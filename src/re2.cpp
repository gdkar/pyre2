/* Generated by Cython 0.25.2 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__re2
#define __PYX_HAVE_API__re2
#include <string.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <map>
#include "re2/stringpiece.h"
#include "re2/re2.h"
#include "_re2macros.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "re2.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_3re2_Match;
struct __pyx_obj_3re2_Pattern;
struct __pyx_opt_args_3re2_7Pattern__finditer;

/* "re2.pyx":466
 * 
 * 
 *     cdef _finditer(self, object string, int pos=0, int endpos=-1, int as_match=0):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t size
 *         cdef int result
 */

#line 466 "re2.pyx"
struct __pyx_opt_args_3re2_7Pattern__finditer {

#line 466 "re2.pyx"
  int __pyx_n;

#line 466 "re2.pyx"
  int pos;

#line 466 "re2.pyx"
  int endpos;

#line 466 "re2.pyx"
  int as_match;

#line 466 "re2.pyx"
};

/* "re2.pyx":97
 *     cdef void emit_endif "#endif //" ()
 * 
 * cdef class Match:             # <<<<<<<<<<<<<<
 *     cdef _re2.StringPiece * matches
 *     cdef const _re2.stringintmap * named_groups
 */

#line 97 "re2.pyx"
struct __pyx_obj_3re2_Match {

#line 97 "re2.pyx"
  PyObject_HEAD

#line 97 "re2.pyx"
  struct __pyx_vtabstruct_3re2_Match *__pyx_vtab;

#line 97 "re2.pyx"
  re2::StringPiece *matches;

#line 97 "re2.pyx"
  std::map<std::string,int> const *named_groups;

#line 97 "re2.pyx"
  int encoded;

#line 97 "re2.pyx"
  int _lastindex;

#line 97 "re2.pyx"
  int nmatches;

#line 97 "re2.pyx"
  int _pos;

#line 97 "re2.pyx"
  int _endpos;

#line 97 "re2.pyx"
  PyObject *match_string;

#line 97 "re2.pyx"
  PyObject *_pattern_object;

#line 97 "re2.pyx"
  PyObject *_groups;

#line 97 "re2.pyx"
  PyObject *_spans;

#line 97 "re2.pyx"
  PyObject *_named_groups;

#line 97 "re2.pyx"
  PyObject *_named_indexes;

#line 97 "re2.pyx"
};

#line 97 "re2.pyx"


/* "re2.pyx":378
 * 
 * 
 * cdef class Pattern:             # <<<<<<<<<<<<<<
 *     cdef _re2.RE2 * re_pattern
 *     cdef int ngroups
 */

#line 378 "re2.pyx"
struct __pyx_obj_3re2_Pattern {

#line 378 "re2.pyx"
  PyObject_HEAD

#line 378 "re2.pyx"
  struct __pyx_vtabstruct_3re2_Pattern *__pyx_vtab;

#line 378 "re2.pyx"
  re2::RE2 *re_pattern;

#line 378 "re2.pyx"
  int ngroups;

#line 378 "re2.pyx"
  int encoded;

#line 378 "re2.pyx"
  int _flags;

#line 378 "re2.pyx"
  PyObject *pattern;

#line 378 "re2.pyx"
  PyObject *__weakref__;

#line 378 "re2.pyx"
};

#line 378 "re2.pyx"


#line 378 "re2.pyx"


/* "re2.pyx":97
 *     cdef void emit_endif "#endif //" ()
 * 
 * cdef class Match:             # <<<<<<<<<<<<<<
 *     cdef _re2.StringPiece * matches
 *     cdef const _re2.stringintmap * named_groups
 */

#line 97 "re2.pyx"


#line 97 "re2.pyx"
struct __pyx_vtabstruct_3re2_Match {

#line 97 "re2.pyx"
  PyObject *(*init_groups)(struct __pyx_obj_3re2_Match *);

#line 97 "re2.pyx"
  PyObject *(*_convert_positions)(struct __pyx_obj_3re2_Match *, PyObject *);

#line 97 "re2.pyx"
  PyObject *(*_make_spans)(struct __pyx_obj_3re2_Match *);

#line 97 "re2.pyx"
};

#line 97 "re2.pyx"
static struct __pyx_vtabstruct_3re2_Match *__pyx_vtabptr_3re2_Match;

#line 97 "re2.pyx"


/* "re2.pyx":378
 * 
 * 
 * cdef class Pattern:             # <<<<<<<<<<<<<<
 *     cdef _re2.RE2 * re_pattern
 *     cdef int ngroups
 */

#line 378 "re2.pyx"


#line 378 "re2.pyx"
struct __pyx_vtabstruct_3re2_Pattern {

#line 378 "re2.pyx"
  PyObject *(*_search)(struct __pyx_obj_3re2_Pattern *, PyObject *, int, int, RE2::Anchor);

#line 378 "re2.pyx"
  PyObject *(*_print_pattern)(struct __pyx_obj_3re2_Pattern *);

#line 378 "re2.pyx"
  PyObject *(*_finditer)(struct __pyx_obj_3re2_Pattern *, PyObject *, struct __pyx_opt_args_3re2_7Pattern__finditer *__pyx_optional_args);

#line 378 "re2.pyx"
};

#line 378 "re2.pyx"
static struct __pyx_vtabstruct_3re2_Pattern *__pyx_vtabptr_3re2_Pattern;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* CallableCheck.proto */
#if CYTHON_USE_TYPE_SLOTS && PY_MAJOR_VERSION >= 3
#define __Pyx_PyCallable_Check(obj)   ((obj)->ob_type->tp_call != NULL)
#else
#define __Pyx_PyCallable_Check(obj)   PyCallable_Check(obj)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* UnicodeAsUCS4.proto */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject*);

/* object_ord.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyObject_Ord(c)\
    (likely(PyUnicode_Check(c)) ? (long)__Pyx_PyUnicode_AsPy_UCS4(c) : __Pyx__PyObject_Ord(c))
#else
#define __Pyx_PyObject_Ord(c) __Pyx__PyObject_Ord(c)
#endif
static long __Pyx__PyObject_Ord(PyObject* c);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ptrdiff_t(ptrdiff_t value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_3re2_5Match_init_groups(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_3re2_5Match__convert_positions(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_positions); /* proto*/
static PyObject *__pyx_f_3re2_5Match__make_spans(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_3re2_7Pattern__search(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos, RE2::Anchor __pyx_v_anchoring); /* proto*/
static PyObject *__pyx_f_3re2_7Pattern__print_pattern(struct __pyx_obj_3re2_Pattern *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_3re2_7Pattern__finditer(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, struct __pyx_opt_args_3re2_7Pattern__finditer *__pyx_optional_args); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from '_re2' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython' */

/* Module declarations from 're2' */
static PyTypeObject *__pyx_ptype_3re2_Match = 0;
static PyTypeObject *__pyx_ptype_3re2_Pattern = 0;
static int __pyx_v_3re2_current_notification;
static int __pyx_v_3re2__I;
static int __pyx_v_3re2__M;
static int __pyx_v_3re2__S;
static int __pyx_v_3re2__U;
static int __pyx_v_3re2__X;
static int __pyx_v_3re2__L;
static PyObject *__pyx_f_3re2_cpp_to_pystring(std::string); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_3re2_cpp_to_utf8(std::string); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_3re2_char_to_utf8(const char*, int); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_3re2_unicode_to_bytestring(PyObject *, int *); /*proto*/
static CYTHON_INLINE int __pyx_f_3re2_pystring_to_bytestring(PyObject *, char **, Py_ssize_t *); /*proto*/
#define __Pyx_MODULE_NAME "re2"
int __pyx_module_is_main_re2 = 0;

/* Implementation of 're2' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_NameError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_AttributeError;
static const char __pyx_k_0[] = "0";
static const char __pyx_k_D[] = "D";
static const char __pyx_k_I[] = "I";
static const char __pyx_k_L[] = "L";
static const char __pyx_k_M[] = "M";
static const char __pyx_k_S[] = "S";
static const char __pyx_k_U[] = "U";
static const char __pyx_k_W[] = "W";
static const char __pyx_k_X[] = "X";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_g[] = "g<";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_89[] = "89";
static const char __pyx_k__5[] = "\\";
static const char __pyx_k__8[] = "\000";
static const char __pyx_k_ch[] = "ch";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_000[] = "\\000";
static const char __pyx_k__12[] = ">";
static const char __pyx_k__15[] = "";
static const char __pyx_k__19[] = "\n";
static const char __pyx_k__27[] = "(?";
static const char __pyx_k__28[] = ")";
static const char __pyx_k__29[] = "#";
static const char __pyx_k__30[] = "[\\";
static const char __pyx_k__31[] = "[";
static const char __pyx_k__32[] = "]";
static const char __pyx_k__42[] = " \t\n\r\013\014";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_re2[] = "re2";
static const char __pyx_k_sub[] = "sub";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_P_Nd[] = "\\P{Nd}";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_next[] = "next";
static const char __pyx_k_opts[] = "opts";
static const char __pyx_k_p_Nd[] = "\\p{Nd}";
static const char __pyx_k_repl[] = "repl";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_span[] = "span";
static const char __pyx_k_subn[] = "subn";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_this[] = "this";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_cache[] = "_cache";
static const char __pyx_k_clear[] = "clear";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_flush[] = "flush";
static const char __pyx_k_group[] = "group";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_level[] = "level";
static const char __pyx_k_match[] = "match";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_s_p_Z[] = "\\s\\p{Z}";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_DOTALL[] = "DOTALL";
static const char __pyx_k_LOCALE[] = "LOCALE";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_endpos[] = "endpos";
static const char __pyx_k_escape[] = "escape";
static const char __pyx_k_groups[] = "groups";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_length[] = "length";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_next_2[] = "__next";
static const char __pyx_k_p_Nd_2[] = "[^\\p{Nd}]";
static const char __pyx_k_search[] = "search";
static const char __pyx_k_source[] = "source";
static const char __pyx_k_stdout[] = "stdout";
static const char __pyx_k_string[] = "string";
static const char __pyx_k_1234567[] = "1234567";
static const char __pyx_k_UNICODE[] = "UNICODE";
static const char __pyx_k_VERBOSE[] = "VERBOSE";
static const char __pyx_k_VERSION[] = "VERSION";
static const char __pyx_k_compile[] = "_compile";
static const char __pyx_k_default[] = "default";
static const char __pyx_k_encoded[] = "encoded";
static const char __pyx_k_findall[] = "findall";
static const char __pyx_k_isdigit[] = "isdigit";
static const char __pyx_k_istring[] = "istring";
static const char __pyx_k_max_mem[] = "max_mem";
static const char __pyx_k_pattern[] = "pattern";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_s_p_Z_2[] = "[\\s\\p{Z}]";
static const char __pyx_k_s_p_Z_3[] = "[^\\s\\p{Z}]";
static const char __pyx_k_MAXCACHE[] = "_MAXCACHE";
static const char __pyx_k_alphanum[] = "_alphanum";
static const char __pyx_k_cachekey[] = "cachekey";
static const char __pyx_k_callback[] = "callback";
static const char __pyx_k_finditer[] = "finditer";
static const char __pyx_k_maxsplit[] = "maxsplit";
static const char __pyx_k_p_L_p_Nd[] = "_\\p{L}\\p{Nd}";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_strflags[] = "strflags";
static const char __pyx_k_tostring[] = "tostring";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_MULTILINE[] = "MULTILINE";
static const char __pyx_k_NameError[] = "NameError";
static const char __pyx_k_Tokenizer[] = "Tokenizer";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_compile_2[] = "compile";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_error_msg[] = "error_msg";
static const char __pyx_k_groupdict[] = "groupdict";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_pypattern[] = "pypattern";
static const char __pyx_k_IGNORECASE[] = "IGNORECASE";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_RegexError[] = "RegexError";
static const char __pyx_k_SREPattern[] = "SREPattern";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_WHITESPACE[] = "WHITESPACE";
static const char __pyx_k_alphanum_2[] = "alphanum";
static const char __pyx_k_cache_repl[] = "_cache_repl";
static const char __pyx_k_error_code[] = "error_code";
static const char __pyx_k_num_groups[] = "num_groups";
static const char __pyx_k_p_L_p_Nd_2[] = "[_\\p{L}\\p{Nd}]";
static const char __pyx_k_p_L_p_Nd_3[] = "[^_\\p{L}\\p{Nd}]";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_re_pattern[] = "re_pattern";
static const char __pyx_k_VERSION_HEX[] = "VERSION_HEX";
static const char __pyx_k_new_pattern[] = "new_pattern";
static const char __pyx_k_Tokenizer_get[] = "Tokenizer.get";
static const char __pyx_k_convert_spans[] = "_convert_spans";
static const char __pyx_k_no_such_group[] = "no such group";
static const char __pyx_k_subn_callback[] = "_subn_callback";
static const char __pyx_k_AttributeError[] = "AttributeError";
static const char __pyx_k_pattern_object[] = "pattern_object";
static const char __pyx_k_Tokenizer__next[] = "_Tokenizer__next";
static const char __pyx_k_prepare_pattern[] = "prepare_pattern";
static const char __pyx_k_FALLBACK_QUIETLY[] = "FALLBACK_QUIETLY";
static const char __pyx_k_FALLBACK_WARNING[] = "FALLBACK_WARNING";
static const char __pyx_k_Tokenizer___init[] = "Tokenizer.__init__";
static const char __pyx_k_Tokenizer___next[] = "Tokenizer.__next";
static const char __pyx_k_original_pattern[] = "original_pattern";
static const char __pyx_k_FALLBACK_EXCEPTION[] = "FALLBACK_EXCEPTION";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_BackreferencesException[] = "BackreferencesException";
static const char __pyx_k_Invalid_rewrite_pattern[] = "Invalid rewrite pattern";
static const char __pyx_k_bogus_escape_end_of_line[] = "bogus escape (end of line)";
static const char __pyx_k_CharClassProblemException[] = "CharClassProblemException";
static const char __pyx_k_expected_string_or_buffer[] = "expected string or buffer";
static const char __pyx_k_set_fallback_notification[] = "set_fallback_notification";
static const char __pyx_k_Backreferences_not_supported[] = "Backreferences not supported";
static const char __pyx_k_File_re2_pyx_starting_at_line_1[] = "File: re2.pyx (starting at line 1)";
static const char __pyx_k_W_and_S_not_supported_inside_ch[] = "\\W and \\S not supported inside character classes";
static const char __pyx_k_first_argument_must_be_a_string[] = "first argument must be a string or compiled pattern";
static const char __pyx_k_home_gdkar_git_repos_extra_pyre[] = "/home/gdkar/git-repos/extra/pyre2-axiak.git/src/re2.pyx";
static const char __pyx_k_Cannot_process_flags_argument_wi[] = "Cannot process flags argument with a compiled pattern";
static const char __pyx_k_File_re2_pyx_starting_at_line_45[] = "File: re2.pyx (starting at line 45)\n\n    Some error has occured in compilation of the regex.\n    ";
static const char __pyx_k_So_far_pyre2_does_not_support_cu[] = "So far pyre2 does not support custom replacement counts";
static const char __pyx_k_This_function_expects_a_valid_no[] = "This function expects a valid notification level.";
static const char __pyx_k_WARNING_Using_re_module_Reason_s[] = "WARNING: Using re module. Reason: %s";
static const char __pyx_k_abcdefghijklmnopqrstuvwxyzABCDEF[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890";
static const char __pyx_k_unexpected_end_of_regular_expres[] = "unexpected end of regular expression";
static PyObject *__pyx_kp_s_0;
static PyObject *__pyx_kp_s_000;
static PyObject *__pyx_kp_s_1234567;
static PyObject *__pyx_kp_s_89;
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_n_s_BackreferencesException;
static PyObject *__pyx_kp_s_Backreferences_not_supported;
static PyObject *__pyx_kp_s_Cannot_process_flags_argument_wi;
static PyObject *__pyx_n_s_CharClassProblemException;
static PyObject *__pyx_n_s_D;
static PyObject *__pyx_n_s_DOTALL;
static PyObject *__pyx_n_s_FALLBACK_EXCEPTION;
static PyObject *__pyx_n_s_FALLBACK_QUIETLY;
static PyObject *__pyx_n_s_FALLBACK_WARNING;
static PyObject *__pyx_kp_s_File_re2_pyx_starting_at_line_45;
static PyObject *__pyx_n_s_I;
static PyObject *__pyx_n_s_IGNORECASE;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Invalid_rewrite_pattern;
static PyObject *__pyx_n_s_L;
static PyObject *__pyx_n_s_LOCALE;
static PyObject *__pyx_n_s_M;
static PyObject *__pyx_n_s_MAXCACHE;
static PyObject *__pyx_n_s_MULTILINE;
static PyObject *__pyx_n_s_NameError;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_kp_s_P_Nd;
static PyObject *__pyx_n_s_RegexError;
static PyObject *__pyx_n_s_S;
static PyObject *__pyx_n_s_SREPattern;
static PyObject *__pyx_kp_s_So_far_pyre2_does_not_support_cu;
static PyObject *__pyx_kp_s_This_function_expects_a_valid_no;
static PyObject *__pyx_n_s_Tokenizer;
static PyObject *__pyx_n_s_Tokenizer___init;
static PyObject *__pyx_n_s_Tokenizer___next;
static PyObject *__pyx_n_s_Tokenizer__next;
static PyObject *__pyx_n_s_Tokenizer_get;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_U;
static PyObject *__pyx_n_s_UNICODE;
static PyObject *__pyx_n_s_VERBOSE;
static PyObject *__pyx_n_s_VERSION;
static PyObject *__pyx_n_s_VERSION_HEX;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_W;
static PyObject *__pyx_kp_s_WARNING_Using_re_module_Reason_s;
static PyObject *__pyx_n_s_WHITESPACE;
static PyObject *__pyx_kp_s_W_and_S_not_supported_inside_ch;
static PyObject *__pyx_n_s_X;
static PyObject *__pyx_kp_s__12;
static PyObject *__pyx_kp_s__15;
static PyObject *__pyx_kp_u__15;
static PyObject *__pyx_kp_s__19;
static PyObject *__pyx_kp_s__27;
static PyObject *__pyx_kp_s__28;
static PyObject *__pyx_kp_s__29;
static PyObject *__pyx_kp_s__30;
static PyObject *__pyx_kp_s__31;
static PyObject *__pyx_kp_s__32;
static PyObject *__pyx_kp_s__42;
static PyObject *__pyx_kp_s__5;
static PyObject *__pyx_kp_s__8;
static PyObject *__pyx_n_s_abcdefghijklmnopqrstuvwxyzABCDEF;
static PyObject *__pyx_n_s_alphanum;
static PyObject *__pyx_n_s_alphanum_2;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_kp_s_bogus_escape_end_of_line;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_cache;
static PyObject *__pyx_n_s_cache_repl;
static PyObject *__pyx_n_s_cachekey;
static PyObject *__pyx_n_s_callback;
static PyObject *__pyx_n_s_ch;
static PyObject *__pyx_n_s_clear;
static PyObject *__pyx_n_s_compile;
static PyObject *__pyx_n_s_compile_2;
static PyObject *__pyx_n_s_convert_spans;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_default;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_encoded;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_endpos;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_error_code;
static PyObject *__pyx_n_s_error_msg;
static PyObject *__pyx_n_s_escape;
static PyObject *__pyx_kp_s_expected_string_or_buffer;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_findall;
static PyObject *__pyx_n_s_finditer;
static PyObject *__pyx_kp_s_first_argument_must_be_a_string;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_flush;
static PyObject *__pyx_kp_s_g;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_group;
static PyObject *__pyx_n_s_groupdict;
static PyObject *__pyx_n_s_groups;
static PyObject *__pyx_kp_s_home_gdkar_git_repos_extra_pyre;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_isdigit;
static PyObject *__pyx_n_s_istring;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_s_level;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_match;
static PyObject *__pyx_n_s_max_mem;
static PyObject *__pyx_n_s_maxsplit;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_new_pattern;
static PyObject *__pyx_n_s_next;
static PyObject *__pyx_n_s_next_2;
static PyObject *__pyx_kp_s_no_such_group;
static PyObject *__pyx_n_s_num_groups;
static PyObject *__pyx_n_s_opts;
static PyObject *__pyx_n_s_original_pattern;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_kp_s_p_L_p_Nd;
static PyObject *__pyx_kp_s_p_L_p_Nd_2;
static PyObject *__pyx_kp_s_p_L_p_Nd_3;
static PyObject *__pyx_kp_s_p_Nd;
static PyObject *__pyx_kp_s_p_Nd_2;
static PyObject *__pyx_n_s_pattern;
static PyObject *__pyx_n_s_pattern_object;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_prepare_pattern;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pypattern;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_re;
static PyObject *__pyx_n_s_re2;
static PyObject *__pyx_n_s_re_pattern;
static PyObject *__pyx_n_s_repl;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_kp_s_s_p_Z;
static PyObject *__pyx_kp_s_s_p_Z_2;
static PyObject *__pyx_kp_s_s_p_Z_3;
static PyObject *__pyx_n_s_search;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_set_fallback_notification;
static PyObject *__pyx_n_s_source;
static PyObject *__pyx_n_s_span;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_stdout;
static PyObject *__pyx_n_s_strflags;
static PyObject *__pyx_n_s_string;
static PyObject *__pyx_n_s_sub;
static PyObject *__pyx_n_s_subn;
static PyObject *__pyx_n_s_subn_callback;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_this;
static PyObject *__pyx_n_s_tostring;
static PyObject *__pyx_kp_s_unexpected_end_of_regular_expres;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_pf_3re2_set_fallback_notification(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_level); /* proto */
static int __pyx_pf_3re2_5Match___init__(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_pattern_object, int __pyx_v_num_groups); /* proto */
static void __pyx_pf_3re2_5Match_2__dealloc__(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_2re___get__(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_3pos___get__(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_6endpos___get__(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_6string___get__(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_4groups(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_default); /* proto */
static PyObject *__pyx_pf_3re2_5Match_6group(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_3re2_5Match_8_convert_spans(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_spans); /* proto */
static PyObject *__pyx_pf_3re2_5Match_4regs___get__(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_10expand(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_template); /* proto */
static PyObject *__pyx_pf_3re2_5Match_12groupdict(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_14end(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_group); /* proto */
static PyObject *__pyx_pf_3re2_5Match_16start(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_group); /* proto */
static PyObject *__pyx_pf_3re2_5Match_18span(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_group); /* proto */
static PyObject *__pyx_pf_3re2_5Match_9lastindex___get__(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_5Match_9lastgroup___get__(struct __pyx_obj_3re2_Match *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_5flags___get__(struct __pyx_obj_3re2_Pattern *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_6groups___get__(struct __pyx_obj_3re2_Pattern *__pyx_v_self); /* proto */
static void __pyx_pf_3re2_7Pattern___dealloc__(struct __pyx_obj_3re2_Pattern *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_2search(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_4match(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_6finditer(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_8findall(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_10split(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_maxsplit); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_12sub(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_14subn(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_repl, PyObject *__pyx_v_istring, int __pyx_v_count); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_16_subn_callback(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_callback, PyObject *__pyx_v_string, int __pyx_v_count); /* proto */
static PyObject *__pyx_pf_3re2_7Pattern_7pattern___get__(struct __pyx_obj_3re2_Pattern *__pyx_v_self); /* proto */
static int __pyx_pf_3re2_7Pattern_7pattern_2__set__(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3re2_7Pattern_7pattern_4__del__(struct __pyx_obj_3re2_Pattern *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_2compile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, int __pyx_v_flags, int __pyx_v_max_mem); /* proto */
static PyObject *__pyx_pf_3re2_9Tokenizer___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string); /* proto */
static PyObject *__pyx_pf_3re2_9Tokenizer_2__next(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_9Tokenizer_4get(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3re2_4prepare_pattern(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_3re2_6_compile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, int __pyx_v_flags, int __pyx_v_max_mem); /* proto */
static PyObject *__pyx_pf_3re2_8search(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_3re2_10match(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_3re2_12finditer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_3re2_14findall(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_3re2_16split(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_maxsplit); /* proto */
static PyObject *__pyx_pf_3re2_18sub(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count); /* proto */
static PyObject *__pyx_pf_3re2_20subn(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count); /* proto */
static PyObject *__pyx_pf_3re2_22escape(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern); /* proto */
static PyObject *__pyx_tp_new_3re2_Match(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3re2_Pattern(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_23;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_535;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_slice__7;
static PyObject *__pyx_slice__9;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_slice__10;
static PyObject *__pyx_slice__11;
static PyObject *__pyx_slice__13;
static PyObject *__pyx_slice__35;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__68;

/* "re2.pyx":31
 * cdef int current_notification = FALLBACK_QUIETLY
 * 
 * def set_fallback_notification(level):             # <<<<<<<<<<<<<<
 *     """
 *     Set the fallback notification to a level; one of:
 */

#line 31 "re2.pyx"


#line 31 "re2.pyx"
/* Python wrapper */

#line 31 "re2.pyx"
static PyObject *__pyx_pw_3re2_1set_fallback_notification(PyObject *__pyx_self, PyObject *__pyx_v_level); /*proto*/

#line 31 "re2.pyx"
static char __pyx_doc_3re2_set_fallback_notification[] = "File: re2.pyx (starting at line 31)\n\n    Set the fallback notification to a level; one of:\n        FALLBACK_QUIETLY\n\tFALLBACK_WARNING\n\tFALLBACK_EXCEPTION\n    ";
static PyMethodDef __pyx_mdef_3re2_1set_fallback_notification = 
#line 31 "re2.pyx"
{"set_fallback_notification", (PyCFunction)__pyx_pw_3re2_1set_fallback_notification, METH_O, __pyx_doc_3re2_set_fallback_notification};

#line 31 "re2.pyx"
static PyObject *__pyx_pw_3re2_1set_fallback_notification(PyObject *__pyx_self, PyObject *__pyx_v_level) {

#line 31 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 31 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 31 "re2.pyx"
  __Pyx_RefNannySetupContext("set_fallback_notification (wrapper)", 0);
  __pyx_r = 
#line 31 "re2.pyx"
__pyx_pf_3re2_set_fallback_notification(__pyx_self, ((PyObject *)__pyx_v_level));

#line 31 "re2.pyx"


#line 31 "re2.pyx"
  /* function exit code */

#line 31 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 31 "re2.pyx"
  return __pyx_r;

#line 31 "re2.pyx"
}

#line 31 "re2.pyx"


#line 31 "re2.pyx"
static PyObject *__pyx_pf_3re2_set_fallback_notification(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_level) {

#line 31 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 31 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 31 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 31 "re2.pyx"
  int __pyx_t_2;

#line 31 "re2.pyx"
  int __pyx_t_3;

#line 31 "re2.pyx"
  int __pyx_t_4;

#line 31 "re2.pyx"
  __Pyx_RefNannySetupContext("set_fallback_notification", 0);

#line 31 "re2.pyx"
  __Pyx_INCREF(__pyx_v_level);

  /* "re2.pyx":39
 *     """
 *     global current_notification
 *     level = int(level)             # <<<<<<<<<<<<<<
 *     if level < 0 or level > 2:
 *         raise ValueError("This function expects a valid notification level.")
 */

#line 39 "re2.pyx"
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_v_level); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)

#line 39 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 39 "re2.pyx"
  __Pyx_DECREF_SET(__pyx_v_level, __pyx_t_1);

#line 39 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":40
 *     global current_notification
 *     level = int(level)
 *     if level < 0 or level > 2:             # <<<<<<<<<<<<<<
 *         raise ValueError("This function expects a valid notification level.")
 *     current_notification = level
 */

#line 40 "re2.pyx"
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_level, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)

#line 40 "re2.pyx"
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 40, __pyx_L1_error)

#line 40 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 40 "re2.pyx"
  if (!__pyx_t_3) {

#line 40 "re2.pyx"
  } else {

#line 40 "re2.pyx"
    __pyx_t_2 = __pyx_t_3;

#line 40 "re2.pyx"
    goto __pyx_L4_bool_binop_done;

#line 40 "re2.pyx"
  }

#line 40 "re2.pyx"
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_level, __pyx_int_2, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)

#line 40 "re2.pyx"
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 40, __pyx_L1_error)

#line 40 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 40 "re2.pyx"
  __pyx_t_2 = __pyx_t_3;

#line 40 "re2.pyx"
  __pyx_L4_bool_binop_done:;

#line 40 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":41
 *     level = int(level)
 *     if level < 0 or level > 2:
 *         raise ValueError("This function expects a valid notification level.")             # <<<<<<<<<<<<<<
 *     current_notification = level
 * 
 */

#line 41 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)

#line 41 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 41 "re2.pyx"
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 41 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 41 "re2.pyx"
    __PYX_ERR(0, 41, __pyx_L1_error)

    /* "re2.pyx":40
 *     global current_notification
 *     level = int(level)
 *     if level < 0 or level > 2:             # <<<<<<<<<<<<<<
 *         raise ValueError("This function expects a valid notification level.")
 *     current_notification = level
 */

#line 40 "re2.pyx"
  }

  /* "re2.pyx":42
 *     if level < 0 or level > 2:
 *         raise ValueError("This function expects a valid notification level.")
 *     current_notification = level             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 42 "re2.pyx"
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_level); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 42, __pyx_L1_error)

#line 42 "re2.pyx"
  __pyx_v_3re2_current_notification = __pyx_t_4;

  /* "re2.pyx":31
 * cdef int current_notification = FALLBACK_QUIETLY
 * 
 * def set_fallback_notification(level):             # <<<<<<<<<<<<<<
 *     """
 *     Set the fallback notification to a level; one of:
 */

#line 31 "re2.pyx"


#line 31 "re2.pyx"
  /* function exit code */

#line 31 "re2.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 31 "re2.pyx"
  goto __pyx_L0;

#line 31 "re2.pyx"
  __pyx_L1_error:;

#line 31 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 31 "re2.pyx"
  __Pyx_AddTraceback("re2.set_fallback_notification", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 31 "re2.pyx"
  __pyx_r = NULL;

#line 31 "re2.pyx"
  __pyx_L0:;

#line 31 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_level);

#line 31 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 31 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 31 "re2.pyx"
  return __pyx_r;

#line 31 "re2.pyx"
}

/* "re2.pyx":60
 * import warnings
 * 
 * cdef object cpp_to_pystring(_re2.cpp_string input):             # <<<<<<<<<<<<<<
 *     # This function is a quick converter from a std::string object
 *     # to a python string. By taking the slice we go to the right size,
 */

#line 60 "re2.pyx"


#line 60 "re2.pyx"
static PyObject *__pyx_f_3re2_cpp_to_pystring(std::string __pyx_v_input) {

#line 60 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 60 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 60 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 60 "re2.pyx"
  __Pyx_RefNannySetupContext("cpp_to_pystring", 0);

  /* "re2.pyx":64
 *     # to a python string. By taking the slice we go to the right size,
 *     # despite spurious or missing null characters.
 *     return input.c_str()[:input.length()]             # <<<<<<<<<<<<<<
 * 
 * cdef inline object cpp_to_utf8(_re2.cpp_string input):
 */

#line 64 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 64 "re2.pyx"
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_input.c_str() + 0, __pyx_v_input.length() - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)

#line 64 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 64 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 64 "re2.pyx"
  __pyx_t_1 = 0;

#line 64 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":60
 * import warnings
 * 
 * cdef object cpp_to_pystring(_re2.cpp_string input):             # <<<<<<<<<<<<<<
 *     # This function is a quick converter from a std::string object
 *     # to a python string. By taking the slice we go to the right size,
 */

#line 60 "re2.pyx"


#line 60 "re2.pyx"
  /* function exit code */

#line 60 "re2.pyx"
  __pyx_L1_error:;

#line 60 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 60 "re2.pyx"
  __Pyx_AddTraceback("re2.cpp_to_pystring", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 60 "re2.pyx"
  __pyx_r = 0;

#line 60 "re2.pyx"
  __pyx_L0:;

#line 60 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 60 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 60 "re2.pyx"
  return __pyx_r;

#line 60 "re2.pyx"
}

/* "re2.pyx":66
 *     return input.c_str()[:input.length()]
 * 
 * cdef inline object cpp_to_utf8(_re2.cpp_string input):             # <<<<<<<<<<<<<<
 *     # This function converts a std::string object to a utf8 object.
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input.c_str(), input.length(), 'strict')
 */

#line 66 "re2.pyx"


#line 66 "re2.pyx"
static CYTHON_INLINE PyObject *__pyx_f_3re2_cpp_to_utf8(std::string __pyx_v_input) {

#line 66 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 66 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 66 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 66 "re2.pyx"
  __Pyx_RefNannySetupContext("cpp_to_utf8", 0);

  /* "re2.pyx":68
 * cdef inline object cpp_to_utf8(_re2.cpp_string input):
 *     # This function converts a std::string object to a utf8 object.
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input.c_str(), input.length(), 'strict')             # <<<<<<<<<<<<<<
 * 
 * cdef inline object char_to_utf8(_re2.const_char_ptr input, int length):
 */

#line 68 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 68 "re2.pyx"
  __pyx_t_1 = PyUnicode_DecodeUTF8(__pyx_v_input.c_str(), __pyx_v_input.length(), ((char *)"strict")); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)

#line 68 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 68 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 68 "re2.pyx"
  __pyx_t_1 = 0;

#line 68 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":66
 *     return input.c_str()[:input.length()]
 * 
 * cdef inline object cpp_to_utf8(_re2.cpp_string input):             # <<<<<<<<<<<<<<
 *     # This function converts a std::string object to a utf8 object.
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input.c_str(), input.length(), 'strict')
 */

#line 66 "re2.pyx"


#line 66 "re2.pyx"
  /* function exit code */

#line 66 "re2.pyx"
  __pyx_L1_error:;

#line 66 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 66 "re2.pyx"
  __Pyx_AddTraceback("re2.cpp_to_utf8", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 66 "re2.pyx"
  __pyx_r = 0;

#line 66 "re2.pyx"
  __pyx_L0:;

#line 66 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 66 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 66 "re2.pyx"
  return __pyx_r;

#line 66 "re2.pyx"
}

/* "re2.pyx":70
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input.c_str(), input.length(), 'strict')
 * 
 * cdef inline object char_to_utf8(_re2.const_char_ptr input, int length):             # <<<<<<<<<<<<<<
 *     # This function converts a C string to a utf8 object.
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input, length, 'strict')
 */

#line 70 "re2.pyx"


#line 70 "re2.pyx"
static CYTHON_INLINE PyObject *__pyx_f_3re2_char_to_utf8(const char* __pyx_v_input, int __pyx_v_length) {

#line 70 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 70 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 70 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 70 "re2.pyx"
  __Pyx_RefNannySetupContext("char_to_utf8", 0);

  /* "re2.pyx":72
 * cdef inline object char_to_utf8(_re2.const_char_ptr input, int length):
 *     # This function converts a C string to a utf8 object.
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input, length, 'strict')             # <<<<<<<<<<<<<<
 * 
 * cdef inline object unicode_to_bytestring(object pystring, int * encoded):
 */

#line 72 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 72 "re2.pyx"
  __pyx_t_1 = PyUnicode_DecodeUTF8(__pyx_v_input, __pyx_v_length, ((char *)"strict")); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)

#line 72 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 72 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 72 "re2.pyx"
  __pyx_t_1 = 0;

#line 72 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":70
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input.c_str(), input.length(), 'strict')
 * 
 * cdef inline object char_to_utf8(_re2.const_char_ptr input, int length):             # <<<<<<<<<<<<<<
 *     # This function converts a C string to a utf8 object.
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input, length, 'strict')
 */

#line 70 "re2.pyx"


#line 70 "re2.pyx"
  /* function exit code */

#line 70 "re2.pyx"
  __pyx_L1_error:;

#line 70 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 70 "re2.pyx"
  __Pyx_AddTraceback("re2.char_to_utf8", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 70 "re2.pyx"
  __pyx_r = 0;

#line 70 "re2.pyx"
  __pyx_L0:;

#line 70 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 70 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 70 "re2.pyx"
  return __pyx_r;

#line 70 "re2.pyx"
}

/* "re2.pyx":74
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input, length, 'strict')
 * 
 * cdef inline object unicode_to_bytestring(object pystring, int * encoded):             # <<<<<<<<<<<<<<
 *     # This function will convert a utf8 string to a bytestring object.
 *     if cpython.unicode.PyUnicode_Check(pystring):
 */

#line 74 "re2.pyx"


#line 74 "re2.pyx"
static CYTHON_INLINE PyObject *__pyx_f_3re2_unicode_to_bytestring(PyObject *__pyx_v_pystring, int *__pyx_v_encoded) {

#line 74 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 74 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 74 "re2.pyx"
  int __pyx_t_1;

#line 74 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 74 "re2.pyx"
  __Pyx_RefNannySetupContext("unicode_to_bytestring", 0);

#line 74 "re2.pyx"
  __Pyx_INCREF(__pyx_v_pystring);

  /* "re2.pyx":76
 * cdef inline object unicode_to_bytestring(object pystring, int * encoded):
 *     # This function will convert a utf8 string to a bytestring object.
 *     if cpython.unicode.PyUnicode_Check(pystring):             # <<<<<<<<<<<<<<
 *         pystring = cpython.unicode.PyUnicode_EncodeUTF8(cpython.unicode.PyUnicode_AS_UNICODE(pystring),
 *                                                        cpython.unicode.PyUnicode_GET_SIZE(pystring),
 */

#line 76 "re2.pyx"
  __pyx_t_1 = (PyUnicode_Check(__pyx_v_pystring) != 0);

#line 76 "re2.pyx"
  if (__pyx_t_1) {

    /* "re2.pyx":77
 *     # This function will convert a utf8 string to a bytestring object.
 *     if cpython.unicode.PyUnicode_Check(pystring):
 *         pystring = cpython.unicode.PyUnicode_EncodeUTF8(cpython.unicode.PyUnicode_AS_UNICODE(pystring),             # <<<<<<<<<<<<<<
 *                                                        cpython.unicode.PyUnicode_GET_SIZE(pystring),
 *                                                        "strict")
 */

#line 77 "re2.pyx"
    __pyx_t_2 = PyUnicode_EncodeUTF8(PyUnicode_AS_UNICODE(__pyx_v_pystring), PyUnicode_GET_SIZE(__pyx_v_pystring), ((char *)"strict")); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)

#line 77 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 77 "re2.pyx"
    __Pyx_DECREF_SET(__pyx_v_pystring, __pyx_t_2);

#line 77 "re2.pyx"
    __pyx_t_2 = 0;

    /* "re2.pyx":80
 *                                                        cpython.unicode.PyUnicode_GET_SIZE(pystring),
 *                                                        "strict")
 *         encoded[0] = 1             # <<<<<<<<<<<<<<
 *     else:
 *         encoded[0] = 0
 */

#line 80 "re2.pyx"
    (__pyx_v_encoded[0]) = 1;

    /* "re2.pyx":76
 * cdef inline object unicode_to_bytestring(object pystring, int * encoded):
 *     # This function will convert a utf8 string to a bytestring object.
 *     if cpython.unicode.PyUnicode_Check(pystring):             # <<<<<<<<<<<<<<
 *         pystring = cpython.unicode.PyUnicode_EncodeUTF8(cpython.unicode.PyUnicode_AS_UNICODE(pystring),
 *                                                        cpython.unicode.PyUnicode_GET_SIZE(pystring),
 */

#line 76 "re2.pyx"
    goto __pyx_L3;

#line 76 "re2.pyx"
  }

  /* "re2.pyx":82
 *         encoded[0] = 1
 *     else:
 *         encoded[0] = 0             # <<<<<<<<<<<<<<
 *     return pystring
 * 
 */

#line 82 "re2.pyx"
  /*else*/ {

#line 82 "re2.pyx"
    (__pyx_v_encoded[0]) = 0;

#line 82 "re2.pyx"
  }

#line 82 "re2.pyx"
  __pyx_L3:;

  /* "re2.pyx":83
 *     else:
 *         encoded[0] = 0
 *     return pystring             # <<<<<<<<<<<<<<
 * 
 * cdef inline int pystring_to_bytestring(object pystring, char ** cstring, Py_ssize_t * length):
 */

#line 83 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 83 "re2.pyx"
  __Pyx_INCREF(__pyx_v_pystring);

#line 83 "re2.pyx"
  __pyx_r = __pyx_v_pystring;

#line 83 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":74
 *     return cpython.unicode.PyUnicode_DecodeUTF8(input, length, 'strict')
 * 
 * cdef inline object unicode_to_bytestring(object pystring, int * encoded):             # <<<<<<<<<<<<<<
 *     # This function will convert a utf8 string to a bytestring object.
 *     if cpython.unicode.PyUnicode_Check(pystring):
 */

#line 74 "re2.pyx"


#line 74 "re2.pyx"
  /* function exit code */

#line 74 "re2.pyx"
  __pyx_L1_error:;

#line 74 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 74 "re2.pyx"
  __Pyx_AddTraceback("re2.unicode_to_bytestring", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 74 "re2.pyx"
  __pyx_r = 0;

#line 74 "re2.pyx"
  __pyx_L0:;

#line 74 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_pystring);

#line 74 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 74 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 74 "re2.pyx"
  return __pyx_r;

#line 74 "re2.pyx"
}

/* "re2.pyx":85
 *     return pystring
 * 
 * cdef inline int pystring_to_bytestring(object pystring, char ** cstring, Py_ssize_t * length):             # <<<<<<<<<<<<<<
 *     # This function will convert a pystring to a bytesstring, placing
 *     # the char * in cstring, and the length in length.
 */

#line 85 "re2.pyx"


#line 85 "re2.pyx"
static CYTHON_INLINE int __pyx_f_3re2_pystring_to_bytestring(PyObject *__pyx_v_pystring, char **__pyx_v_cstring, Py_ssize_t *__pyx_v_length) {

#line 85 "re2.pyx"
  int __pyx_r;

#line 85 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 85 "re2.pyx"
  __Pyx_RefNannySetupContext("pystring_to_bytestring", 0);

  /* "re2.pyx":91
 *     # it will move to utf-8. If utf8 does not work, then it has to be
 *     # a non-supported encoding.
 *     return _re2.PyObject_AsCharBuffer(pystring, <_re2.const_char_ptr*> cstring, length)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */

#line 91 "re2.pyx"
  __pyx_r = PyObject_AsCharBuffer(__pyx_v_pystring, ((const char* *)__pyx_v_cstring), __pyx_v_length);

#line 91 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":85
 *     return pystring
 * 
 * cdef inline int pystring_to_bytestring(object pystring, char ** cstring, Py_ssize_t * length):             # <<<<<<<<<<<<<<
 *     # This function will convert a pystring to a bytesstring, placing
 *     # the char * in cstring, and the length in length.
 */

#line 85 "re2.pyx"


#line 85 "re2.pyx"
  /* function exit code */

#line 85 "re2.pyx"
  __pyx_L0:;

#line 85 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 85 "re2.pyx"
  return __pyx_r;

#line 85 "re2.pyx"
}

/* "re2.pyx":113
 *     cdef dict _named_indexes
 * 
 *     def __init__(self, object pattern_object, int num_groups):             # <<<<<<<<<<<<<<
 *         self._lastindex = -1
 *         self._groups = None
 */

#line 113 "re2.pyx"


#line 113 "re2.pyx"
/* Python wrapper */

#line 113 "re2.pyx"
static int __pyx_pw_3re2_5Match_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 113 "re2.pyx"
static char __pyx_doc_3re2_5Match___init__[] = "File: re2.pyx (starting at line 113)";

#line 113 "re2.pyx"
#if CYTHON_COMPILING_IN_CPYTHON

#line 113 "re2.pyx"
struct wrapperbase __pyx_wrapperbase_3re2_5Match___init__;

#line 113 "re2.pyx"
#endif

#line 113 "re2.pyx"
static int __pyx_pw_3re2_5Match_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern_object = 0
#line 113 "re2.pyx"
;
  int __pyx_v_num_groups
#line 113 "re2.pyx"
;

#line 113 "re2.pyx"
  int __pyx_r;

#line 113 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 113 "re2.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 113 "re2.pyx"
  {

#line 113 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern_object,&__pyx_n_s_num_groups,0};

#line 113 "re2.pyx"
    PyObject* values[2] = {0,0};

#line 113 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 113 "re2.pyx"
      Py_ssize_t kw_args;

#line 113 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 113 "re2.pyx"
      switch (pos_args) {
        case  2: 
#line 113 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 113 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 113 "re2.pyx"
        case  0: break;
        default: 
#line 113 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 113 "re2.pyx"
      }

#line 113 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 113 "re2.pyx"
      switch (pos_args) {

#line 113 "re2.pyx"
        case  0:

#line 113 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pattern_object)) != 0)) kw_args--;
        else 
#line 113 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 113 "re2.pyx"
        case  1:

#line 113 "re2.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_num_groups)) != 0)) kw_args--;

#line 113 "re2.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); 
#line 113 "re2.pyx"
__PYX_ERR(0, 113, __pyx_L3_error)

#line 113 "re2.pyx"
        }

#line 113 "re2.pyx"
      }

#line 113 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 113 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 113, __pyx_L3_error)

#line 113 "re2.pyx"
      }

#line 113 "re2.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 113 "re2.pyx"
      goto __pyx_L5_argtuple_error;

#line 113 "re2.pyx"
    } else {

#line 113 "re2.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 113 "re2.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 113 "re2.pyx"
    }

#line 113 "re2.pyx"
    __pyx_v_pattern_object = values[0];

#line 113 "re2.pyx"
    __pyx_v_num_groups = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_num_groups == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 113, __pyx_L3_error)

#line 113 "re2.pyx"
  }

#line 113 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 113 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 113 "re2.pyx"
__PYX_ERR(0, 113, __pyx_L3_error)

#line 113 "re2.pyx"
  __pyx_L3_error:;

#line 113 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 113 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 113 "re2.pyx"
  return -1;

#line 113 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 113 "re2.pyx"
__pyx_pf_3re2_5Match___init__(((struct __pyx_obj_3re2_Match *)__pyx_v_self), __pyx_v_pattern_object, __pyx_v_num_groups);

#line 113 "re2.pyx"


#line 113 "re2.pyx"
  /* function exit code */

#line 113 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 113 "re2.pyx"
  return __pyx_r;

#line 113 "re2.pyx"
}

#line 113 "re2.pyx"


#line 113 "re2.pyx"
static int __pyx_pf_3re2_5Match___init__(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_pattern_object, int __pyx_v_num_groups) {

#line 113 "re2.pyx"
  int __pyx_r;

#line 113 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 113 "re2.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "re2.pyx":114
 * 
 *     def __init__(self, object pattern_object, int num_groups):
 *         self._lastindex = -1             # <<<<<<<<<<<<<<
 *         self._groups = None
 *         self._pos = 0
 */

#line 114 "re2.pyx"
  __pyx_v_self->_lastindex = -1;

  /* "re2.pyx":115
 *     def __init__(self, object pattern_object, int num_groups):
 *         self._lastindex = -1
 *         self._groups = None             # <<<<<<<<<<<<<<
 *         self._pos = 0
 *         self._endpos = -1
 */

#line 115 "re2.pyx"
  __Pyx_INCREF(Py_None);

#line 115 "re2.pyx"
  __Pyx_GIVEREF(Py_None);

#line 115 "re2.pyx"
  __Pyx_GOTREF(__pyx_v_self->_groups);

#line 115 "re2.pyx"
  __Pyx_DECREF(__pyx_v_self->_groups);

#line 115 "re2.pyx"
  __pyx_v_self->_groups = ((PyObject*)Py_None);

  /* "re2.pyx":116
 *         self._lastindex = -1
 *         self._groups = None
 *         self._pos = 0             # <<<<<<<<<<<<<<
 *         self._endpos = -1
 *         self.matches = _re2.new_StringPiece_array(num_groups + 1)
 */

#line 116 "re2.pyx"
  __pyx_v_self->_pos = 0;

  /* "re2.pyx":117
 *         self._groups = None
 *         self._pos = 0
 *         self._endpos = -1             # <<<<<<<<<<<<<<
 *         self.matches = _re2.new_StringPiece_array(num_groups + 1)
 *         self.nmatches = num_groups
 */

#line 117 "re2.pyx"
  __pyx_v_self->_endpos = -1;

  /* "re2.pyx":118
 *         self._pos = 0
 *         self._endpos = -1
 *         self.matches = _re2.new_StringPiece_array(num_groups + 1)             # <<<<<<<<<<<<<<
 *         self.nmatches = num_groups
 *         self._pattern_object = pattern_object
 */

#line 118 "re2.pyx"
  __pyx_v_self->matches = new_StringPiece_array((__pyx_v_num_groups + 1));

  /* "re2.pyx":119
 *         self._endpos = -1
 *         self.matches = _re2.new_StringPiece_array(num_groups + 1)
 *         self.nmatches = num_groups             # <<<<<<<<<<<<<<
 *         self._pattern_object = pattern_object
 * 
 */

#line 119 "re2.pyx"
  __pyx_v_self->nmatches = __pyx_v_num_groups;

  /* "re2.pyx":120
 *         self.matches = _re2.new_StringPiece_array(num_groups + 1)
 *         self.nmatches = num_groups
 *         self._pattern_object = pattern_object             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */

#line 120 "re2.pyx"
  __Pyx_INCREF(__pyx_v_pattern_object);

#line 120 "re2.pyx"
  __Pyx_GIVEREF(__pyx_v_pattern_object);

#line 120 "re2.pyx"
  __Pyx_GOTREF(__pyx_v_self->_pattern_object);

#line 120 "re2.pyx"
  __Pyx_DECREF(__pyx_v_self->_pattern_object);

#line 120 "re2.pyx"
  __pyx_v_self->_pattern_object = __pyx_v_pattern_object;

  /* "re2.pyx":113
 *     cdef dict _named_indexes
 * 
 *     def __init__(self, object pattern_object, int num_groups):             # <<<<<<<<<<<<<<
 *         self._lastindex = -1
 *         self._groups = None
 */

#line 113 "re2.pyx"


#line 113 "re2.pyx"
  /* function exit code */

#line 113 "re2.pyx"
  __pyx_r = 0;

#line 113 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 113 "re2.pyx"
  return __pyx_r;

#line 113 "re2.pyx"
}

/* "re2.pyx":122
 *         self._pattern_object = pattern_object
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *        _re2.delete_StringPiece_array(self.matches)
 * 
 */

#line 122 "re2.pyx"


#line 122 "re2.pyx"
/* Python wrapper */

#line 122 "re2.pyx"
static void __pyx_pw_3re2_5Match_3__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 122 "re2.pyx"
static void __pyx_pw_3re2_5Match_3__dealloc__(PyObject *__pyx_v_self) {

#line 122 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 122 "re2.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 122 "re2.pyx"
  __pyx_pf_3re2_5Match_2__dealloc__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

#line 122 "re2.pyx"


#line 122 "re2.pyx"
  /* function exit code */

#line 122 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 122 "re2.pyx"
}

#line 122 "re2.pyx"


#line 122 "re2.pyx"
static void __pyx_pf_3re2_5Match_2__dealloc__(struct __pyx_obj_3re2_Match *__pyx_v_self) {

#line 122 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 122 "re2.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "re2.pyx":123
 * 
 *     def __dealloc__(self):
 *        _re2.delete_StringPiece_array(self.matches)             # <<<<<<<<<<<<<<
 * 
 *     property re:
 */

#line 123 "re2.pyx"
  delete_StringPiece_array(__pyx_v_self->matches);

  /* "re2.pyx":122
 *         self._pattern_object = pattern_object
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *        _re2.delete_StringPiece_array(self.matches)
 * 
 */

#line 122 "re2.pyx"


#line 122 "re2.pyx"
  /* function exit code */

#line 122 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 122 "re2.pyx"
}

/* "re2.pyx":126
 * 
 *     property re:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._pattern_object
 * 
 */

#line 126 "re2.pyx"


#line 126 "re2.pyx"
/* Python wrapper */

#line 126 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_2re_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 126 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_2re_1__get__(PyObject *__pyx_v_self) {

#line 126 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 126 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 126 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 126 "re2.pyx"
__pyx_pf_3re2_5Match_2re___get__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

#line 126 "re2.pyx"


#line 126 "re2.pyx"
  /* function exit code */

#line 126 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 126 "re2.pyx"
  return __pyx_r;

#line 126 "re2.pyx"
}

#line 126 "re2.pyx"


#line 126 "re2.pyx"
static PyObject *__pyx_pf_3re2_5Match_2re___get__(struct __pyx_obj_3re2_Match *__pyx_v_self) {

#line 126 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 126 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 126 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "re2.pyx":127
 *     property re:
 *         def __get__(self):
 *             return self._pattern_object             # <<<<<<<<<<<<<<
 * 
 *     property pos:
 */

#line 127 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 127 "re2.pyx"
  __Pyx_INCREF(__pyx_v_self->_pattern_object);

#line 127 "re2.pyx"
  __pyx_r = __pyx_v_self->_pattern_object;

#line 127 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":126
 * 
 *     property re:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._pattern_object
 * 
 */

#line 126 "re2.pyx"


#line 126 "re2.pyx"
  /* function exit code */

#line 126 "re2.pyx"
  __pyx_L0:;

#line 126 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 126 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 126 "re2.pyx"
  return __pyx_r;

#line 126 "re2.pyx"
}

/* "re2.pyx":130
 * 
 *     property pos:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._pos
 * 
 */

#line 130 "re2.pyx"


#line 130 "re2.pyx"
/* Python wrapper */

#line 130 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_3pos_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 130 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_3pos_1__get__(PyObject *__pyx_v_self) {

#line 130 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 130 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 130 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 130 "re2.pyx"
__pyx_pf_3re2_5Match_3pos___get__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

#line 130 "re2.pyx"


#line 130 "re2.pyx"
  /* function exit code */

#line 130 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 130 "re2.pyx"
  return __pyx_r;

#line 130 "re2.pyx"
}

#line 130 "re2.pyx"


#line 130 "re2.pyx"
static PyObject *__pyx_pf_3re2_5Match_3pos___get__(struct __pyx_obj_3re2_Match *__pyx_v_self) {

#line 130 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 130 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 130 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 130 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "re2.pyx":131
 *     property pos:
 *         def __get__(self):
 *             return self._pos             # <<<<<<<<<<<<<<
 * 
 *     property endpos:
 */

#line 131 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 131 "re2.pyx"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)

#line 131 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 131 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 131 "re2.pyx"
  __pyx_t_1 = 0;

#line 131 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":130
 * 
 *     property pos:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._pos
 * 
 */

#line 130 "re2.pyx"


#line 130 "re2.pyx"
  /* function exit code */

#line 130 "re2.pyx"
  __pyx_L1_error:;

#line 130 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 130 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.pos.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 130 "re2.pyx"
  __pyx_r = NULL;

#line 130 "re2.pyx"
  __pyx_L0:;

#line 130 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 130 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 130 "re2.pyx"
  return __pyx_r;

#line 130 "re2.pyx"
}

/* "re2.pyx":134
 * 
 *     property endpos:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._endpos
 * 
 */

#line 134 "re2.pyx"


#line 134 "re2.pyx"
/* Python wrapper */

#line 134 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_6endpos_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 134 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_6endpos_1__get__(PyObject *__pyx_v_self) {

#line 134 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 134 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 134 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 134 "re2.pyx"
__pyx_pf_3re2_5Match_6endpos___get__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

#line 134 "re2.pyx"


#line 134 "re2.pyx"
  /* function exit code */

#line 134 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 134 "re2.pyx"
  return __pyx_r;

#line 134 "re2.pyx"
}

#line 134 "re2.pyx"


#line 134 "re2.pyx"
static PyObject *__pyx_pf_3re2_5Match_6endpos___get__(struct __pyx_obj_3re2_Match *__pyx_v_self) {

#line 134 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 134 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 134 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 134 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "re2.pyx":135
 *     property endpos:
 *         def __get__(self):
 *             return self._endpos             # <<<<<<<<<<<<<<
 * 
 *     property string:
 */

#line 135 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 135 "re2.pyx"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_endpos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)

#line 135 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 135 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 135 "re2.pyx"
  __pyx_t_1 = 0;

#line 135 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":134
 * 
 *     property endpos:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._endpos
 * 
 */

#line 134 "re2.pyx"


#line 134 "re2.pyx"
  /* function exit code */

#line 134 "re2.pyx"
  __pyx_L1_error:;

#line 134 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 134 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.endpos.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 134 "re2.pyx"
  __pyx_r = NULL;

#line 134 "re2.pyx"
  __pyx_L0:;

#line 134 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 134 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 134 "re2.pyx"
  return __pyx_r;

#line 134 "re2.pyx"
}

/* "re2.pyx":138
 * 
 *     property string:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.match_string
 * 
 */

#line 138 "re2.pyx"


#line 138 "re2.pyx"
/* Python wrapper */

#line 138 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_6string_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 138 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_6string_1__get__(PyObject *__pyx_v_self) {

#line 138 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 138 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 138 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 138 "re2.pyx"
__pyx_pf_3re2_5Match_6string___get__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

#line 138 "re2.pyx"


#line 138 "re2.pyx"
  /* function exit code */

#line 138 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 138 "re2.pyx"
  return __pyx_r;

#line 138 "re2.pyx"
}

#line 138 "re2.pyx"


#line 138 "re2.pyx"
static PyObject *__pyx_pf_3re2_5Match_6string___get__(struct __pyx_obj_3re2_Match *__pyx_v_self) {

#line 138 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 138 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 138 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "re2.pyx":139
 *     property string:
 *         def __get__(self):
 *             return self.match_string             # <<<<<<<<<<<<<<
 * 
 *     cdef init_groups(self):
 */

#line 139 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 139 "re2.pyx"
  __Pyx_INCREF(__pyx_v_self->match_string);

#line 139 "re2.pyx"
  __pyx_r = __pyx_v_self->match_string;

#line 139 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":138
 * 
 *     property string:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.match_string
 * 
 */

#line 138 "re2.pyx"


#line 138 "re2.pyx"
  /* function exit code */

#line 138 "re2.pyx"
  __pyx_L0:;

#line 138 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 138 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 138 "re2.pyx"
  return __pyx_r;

#line 138 "re2.pyx"
}

/* "re2.pyx":141
 *             return self.match_string
 * 
 *     cdef init_groups(self):             # <<<<<<<<<<<<<<
 *         cdef list groups = []
 *         cdef int i
 */

#line 141 "re2.pyx"


#line 141 "re2.pyx"
static PyObject *__pyx_f_3re2_5Match_init_groups(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  PyObject *__pyx_v_groups = 0
#line 141 "re2.pyx"
;
  int __pyx_v_i
#line 141 "re2.pyx"
;
  int __pyx_v_cur_encoded
#line 141 "re2.pyx"
;
  const char* __pyx_v_last_end
#line 141 "re2.pyx"
;
  const char* __pyx_v_cur_end
#line 141 "re2.pyx"
;

#line 141 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 141 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 141 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 141 "re2.pyx"
  int __pyx_t_2;

#line 141 "re2.pyx"
  int __pyx_t_3;

#line 141 "re2.pyx"
  int __pyx_t_4;

#line 141 "re2.pyx"
  int __pyx_t_5;

#line 141 "re2.pyx"
  int __pyx_t_6;

#line 141 "re2.pyx"
  __Pyx_RefNannySetupContext("init_groups", 0);

  /* "re2.pyx":142
 * 
 *     cdef init_groups(self):
 *         cdef list groups = []             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef bint cur_encoded = self.encoded
 */

#line 142 "re2.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)

#line 142 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 142 "re2.pyx"
  __pyx_v_groups = ((PyObject*)__pyx_t_1);

#line 142 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":144
 *         cdef list groups = []
 *         cdef int i
 *         cdef bint cur_encoded = self.encoded             # <<<<<<<<<<<<<<
 * 
 *         if self._groups is not None:
 */

#line 144 "re2.pyx"
  __pyx_t_2 = __pyx_v_self->encoded;

#line 144 "re2.pyx"
  __pyx_v_cur_encoded = __pyx_t_2;

  /* "re2.pyx":146
 *         cdef bint cur_encoded = self.encoded
 * 
 *         if self._groups is not None:             # <<<<<<<<<<<<<<
 *             return
 * 
 */

#line 146 "re2.pyx"
  __pyx_t_2 = (__pyx_v_self->_groups != ((PyObject*)Py_None));

#line 146 "re2.pyx"
  __pyx_t_3 = (__pyx_t_2 != 0);

#line 146 "re2.pyx"
  if (__pyx_t_3) {

    /* "re2.pyx":147
 * 
 *         if self._groups is not None:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         cdef _re2.const_char_ptr last_end = NULL
 */

#line 147 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 147 "re2.pyx"
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 147 "re2.pyx"
    goto __pyx_L0;

    /* "re2.pyx":146
 *         cdef bint cur_encoded = self.encoded
 * 
 *         if self._groups is not None:             # <<<<<<<<<<<<<<
 *             return
 * 
 */

#line 146 "re2.pyx"
  }

  /* "re2.pyx":149
 *             return
 * 
 *         cdef _re2.const_char_ptr last_end = NULL             # <<<<<<<<<<<<<<
 *         cdef _re2.const_char_ptr cur_end = NULL
 * 
 */

#line 149 "re2.pyx"
  __pyx_v_last_end = NULL;

  /* "re2.pyx":150
 * 
 *         cdef _re2.const_char_ptr last_end = NULL
 *         cdef _re2.const_char_ptr cur_end = NULL             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.nmatches):
 */

#line 150 "re2.pyx"
  __pyx_v_cur_end = NULL;

  /* "re2.pyx":152
 *         cdef _re2.const_char_ptr cur_end = NULL
 * 
 *         for i in range(self.nmatches):             # <<<<<<<<<<<<<<
 *             if self.matches[i].data() == NULL:
 *                 groups.append(None)
 */

#line 152 "re2.pyx"
  __pyx_t_4 = __pyx_v_self->nmatches;

#line 152 "re2.pyx"
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {

#line 152 "re2.pyx"
    __pyx_v_i = __pyx_t_5;

    /* "re2.pyx":153
 * 
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:             # <<<<<<<<<<<<<<
 *                 groups.append(None)
 *             else:
 */

#line 153 "re2.pyx"
    __pyx_t_3 = (((__pyx_v_self->matches[__pyx_v_i]).data() == NULL) != 0);

#line 153 "re2.pyx"
    if (__pyx_t_3) {

      /* "re2.pyx":154
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:
 *                 groups.append(None)             # <<<<<<<<<<<<<<
 *             else:
 *                 if i > 0:
 */

#line 154 "re2.pyx"
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_groups, Py_None); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 154, __pyx_L1_error)

      /* "re2.pyx":153
 * 
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:             # <<<<<<<<<<<<<<
 *                 groups.append(None)
 *             else:
 */

#line 153 "re2.pyx"
      goto __pyx_L6;

#line 153 "re2.pyx"
    }

    /* "re2.pyx":156
 *                 groups.append(None)
 *             else:
 *                 if i > 0:             # <<<<<<<<<<<<<<
 *                     cur_end = self.matches[i].data() + self.matches[i].length()
 * 
 */

#line 156 "re2.pyx"
    /*else*/ {

#line 156 "re2.pyx"
      __pyx_t_3 = ((__pyx_v_i > 0) != 0);

#line 156 "re2.pyx"
      if (__pyx_t_3) {

        /* "re2.pyx":157
 *             else:
 *                 if i > 0:
 *                     cur_end = self.matches[i].data() + self.matches[i].length()             # <<<<<<<<<<<<<<
 * 
 *                     if last_end == NULL:
 */

#line 157 "re2.pyx"
        __pyx_v_cur_end = ((__pyx_v_self->matches[__pyx_v_i]).data() + (__pyx_v_self->matches[__pyx_v_i]).length());

        /* "re2.pyx":159
 *                     cur_end = self.matches[i].data() + self.matches[i].length()
 * 
 *                     if last_end == NULL:             # <<<<<<<<<<<<<<
 *                         last_end = cur_end
 *                         self._lastindex = i
 */

#line 159 "re2.pyx"
        __pyx_t_3 = ((__pyx_v_last_end == NULL) != 0);

#line 159 "re2.pyx"
        if (__pyx_t_3) {

          /* "re2.pyx":160
 * 
 *                     if last_end == NULL:
 *                         last_end = cur_end             # <<<<<<<<<<<<<<
 *                         self._lastindex = i
 *                     else:
 */

#line 160 "re2.pyx"
          __pyx_v_last_end = __pyx_v_cur_end;

          /* "re2.pyx":161
 *                     if last_end == NULL:
 *                         last_end = cur_end
 *                         self._lastindex = i             # <<<<<<<<<<<<<<
 *                     else:
 *                         # The rules for last group are a bit complicated:
 */

#line 161 "re2.pyx"
          __pyx_v_self->_lastindex = __pyx_v_i;

          /* "re2.pyx":159
 *                     cur_end = self.matches[i].data() + self.matches[i].length()
 * 
 *                     if last_end == NULL:             # <<<<<<<<<<<<<<
 *                         last_end = cur_end
 *                         self._lastindex = i
 */

#line 159 "re2.pyx"
          goto __pyx_L8;

#line 159 "re2.pyx"
        }

        /* "re2.pyx":166
 *                         # if two groups end at the same point, the earlier one is considered last
 *                         # so we don't switch our selection unless the end point has moved
 *                         if cur_end > last_end:             # <<<<<<<<<<<<<<
 *                             last_end = cur_end
 *                             self._lastindex = i
 */

#line 166 "re2.pyx"
        /*else*/ {

#line 166 "re2.pyx"
          __pyx_t_3 = ((__pyx_v_cur_end > __pyx_v_last_end) != 0);

#line 166 "re2.pyx"
          if (__pyx_t_3) {

            /* "re2.pyx":167
 *                         # so we don't switch our selection unless the end point has moved
 *                         if cur_end > last_end:
 *                             last_end = cur_end             # <<<<<<<<<<<<<<
 *                             self._lastindex = i
 * 
 */

#line 167 "re2.pyx"
            __pyx_v_last_end = __pyx_v_cur_end;

            /* "re2.pyx":168
 *                         if cur_end > last_end:
 *                             last_end = cur_end
 *                             self._lastindex = i             # <<<<<<<<<<<<<<
 * 
 *                 if cur_encoded:
 */

#line 168 "re2.pyx"
            __pyx_v_self->_lastindex = __pyx_v_i;

            /* "re2.pyx":166
 *                         # if two groups end at the same point, the earlier one is considered last
 *                         # so we don't switch our selection unless the end point has moved
 *                         if cur_end > last_end:             # <<<<<<<<<<<<<<
 *                             last_end = cur_end
 *                             self._lastindex = i
 */

#line 166 "re2.pyx"
          }

#line 166 "re2.pyx"
        }

#line 166 "re2.pyx"
        __pyx_L8:;

        /* "re2.pyx":156
 *                 groups.append(None)
 *             else:
 *                 if i > 0:             # <<<<<<<<<<<<<<
 *                     cur_end = self.matches[i].data() + self.matches[i].length()
 * 
 */

#line 156 "re2.pyx"
      }

      /* "re2.pyx":170
 *                             self._lastindex = i
 * 
 *                 if cur_encoded:             # <<<<<<<<<<<<<<
 *                     groups.append(char_to_utf8(self.matches[i].data(), self.matches[i].length()))
 *                 else:
 */

#line 170 "re2.pyx"
      __pyx_t_3 = (__pyx_v_cur_encoded != 0);

#line 170 "re2.pyx"
      if (__pyx_t_3) {

        /* "re2.pyx":171
 * 
 *                 if cur_encoded:
 *                     groups.append(char_to_utf8(self.matches[i].data(), self.matches[i].length()))             # <<<<<<<<<<<<<<
 *                 else:
 *                     groups.append(self.matches[i].data()[:self.matches[i].length()])
 */

#line 171 "re2.pyx"
        __pyx_t_1 = __pyx_f_3re2_char_to_utf8((__pyx_v_self->matches[__pyx_v_i]).data(), (__pyx_v_self->matches[__pyx_v_i]).length()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)

#line 171 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 171 "re2.pyx"
        __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_groups, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 171, __pyx_L1_error)

#line 171 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "re2.pyx":170
 *                             self._lastindex = i
 * 
 *                 if cur_encoded:             # <<<<<<<<<<<<<<
 *                     groups.append(char_to_utf8(self.matches[i].data(), self.matches[i].length()))
 *                 else:
 */

#line 170 "re2.pyx"
        goto __pyx_L10;

#line 170 "re2.pyx"
      }

      /* "re2.pyx":173
 *                     groups.append(char_to_utf8(self.matches[i].data(), self.matches[i].length()))
 *                 else:
 *                     groups.append(self.matches[i].data()[:self.matches[i].length()])             # <<<<<<<<<<<<<<
 *         self._groups = tuple(groups)
 * 
 */

#line 173 "re2.pyx"
      /*else*/ {

#line 173 "re2.pyx"
        __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(((const char*)(__pyx_v_self->matches[__pyx_v_i]).data()) + 0, (__pyx_v_self->matches[__pyx_v_i]).length() - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)

#line 173 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 173 "re2.pyx"
        __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_groups, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 173, __pyx_L1_error)

#line 173 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 173 "re2.pyx"
      }

#line 173 "re2.pyx"
      __pyx_L10:;

#line 173 "re2.pyx"
    }

#line 173 "re2.pyx"
    __pyx_L6:;

#line 173 "re2.pyx"
  }

  /* "re2.pyx":174
 *                 else:
 *                     groups.append(self.matches[i].data()[:self.matches[i].length()])
 *         self._groups = tuple(groups)             # <<<<<<<<<<<<<<
 * 
 *     def groups(self, default=None):
 */

#line 174 "re2.pyx"
  __pyx_t_1 = PyList_AsTuple(__pyx_v_groups); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)

#line 174 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 174 "re2.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 174 "re2.pyx"
  __Pyx_GOTREF(__pyx_v_self->_groups);

#line 174 "re2.pyx"
  __Pyx_DECREF(__pyx_v_self->_groups);

#line 174 "re2.pyx"
  __pyx_v_self->_groups = ((PyObject*)__pyx_t_1);

#line 174 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":141
 *             return self.match_string
 * 
 *     cdef init_groups(self):             # <<<<<<<<<<<<<<
 *         cdef list groups = []
 *         cdef int i
 */

#line 141 "re2.pyx"


#line 141 "re2.pyx"
  /* function exit code */

#line 141 "re2.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 141 "re2.pyx"
  goto __pyx_L0;

#line 141 "re2.pyx"
  __pyx_L1_error:;

#line 141 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 141 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.init_groups", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 141 "re2.pyx"
  __pyx_r = 0;

#line 141 "re2.pyx"
  __pyx_L0:;

#line 141 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_groups);

#line 141 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 141 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 141 "re2.pyx"
  return __pyx_r;

#line 141 "re2.pyx"
}

/* "re2.pyx":176
 *         self._groups = tuple(groups)
 * 
 *     def groups(self, default=None):             # <<<<<<<<<<<<<<
 *         self.init_groups()
 *         if default is not None:
 */

#line 176 "re2.pyx"


#line 176 "re2.pyx"
/* Python wrapper */

#line 176 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_5groups(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 176 "re2.pyx"
static char __pyx_doc_3re2_5Match_4groups[] = "File: re2.pyx (starting at line 176)";

#line 176 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_5groups(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_default = 0
#line 176 "re2.pyx"
;

#line 176 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 176 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 176 "re2.pyx"
  __Pyx_RefNannySetupContext("groups (wrapper)", 0);

#line 176 "re2.pyx"
  {

#line 176 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_default,0};

#line 176 "re2.pyx"
    PyObject* values[1] = {0};

#line 176 "re2.pyx"
    values[0] = ((PyObject *)Py_None);

#line 176 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 176 "re2.pyx"
      Py_ssize_t kw_args;

#line 176 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 176 "re2.pyx"
      switch (pos_args) {
        case  1: 
#line 176 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 176 "re2.pyx"
        case  0: break;
        default: 
#line 176 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 176 "re2.pyx"
      }

#line 176 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 176 "re2.pyx"
      switch (pos_args) {

#line 176 "re2.pyx"
        case  0:

#line 176 "re2.pyx"
        if (kw_args > 0) {

#line 176 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_default);

#line 176 "re2.pyx"
          if (value) { values[0] = value; kw_args--; }

#line 176 "re2.pyx"
        }

#line 176 "re2.pyx"
      }

#line 176 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 176 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "groups") < 0)) __PYX_ERR(0, 176, __pyx_L3_error)

#line 176 "re2.pyx"
      }

#line 176 "re2.pyx"
    } else {

#line 176 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: 
#line 176 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: 
#line 176 "re2.pyx"
break;
        default: 
#line 176 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 176 "re2.pyx"
      }

#line 176 "re2.pyx"
    }

#line 176 "re2.pyx"
    __pyx_v_default = values[0];

#line 176 "re2.pyx"
  }

#line 176 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 176 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("groups", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 176 "re2.pyx"
__PYX_ERR(0, 176, __pyx_L3_error)

#line 176 "re2.pyx"
  __pyx_L3_error:;

#line 176 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.groups", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 176 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 176 "re2.pyx"
  return NULL;

#line 176 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 176 "re2.pyx"
__pyx_pf_3re2_5Match_4groups(((struct __pyx_obj_3re2_Match *)__pyx_v_self), __pyx_v_default);

#line 176 "re2.pyx"


#line 176 "re2.pyx"
  /* function exit code */

#line 176 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 176 "re2.pyx"
  return __pyx_r;

#line 176 "re2.pyx"
}

#line 176 "re2.pyx"


#line 176 "re2.pyx"
static PyObject *__pyx_pf_3re2_5Match_4groups(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_default) {
  PyObject *__pyx_v_g = NULL
#line 176 "re2.pyx"
;

#line 176 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 176 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 176 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 176 "re2.pyx"
  int __pyx_t_2;

#line 176 "re2.pyx"
  int __pyx_t_3;

#line 176 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 176 "re2.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 176 "re2.pyx"
  Py_ssize_t __pyx_t_6;

#line 176 "re2.pyx"
  __Pyx_RefNannySetupContext("groups", 0);

  /* "re2.pyx":177
 * 
 *     def groups(self, default=None):
 *         self.init_groups()             # <<<<<<<<<<<<<<
 *         if default is not None:
 *             return tuple([g or default for g in self._groups[1:]])
 */

#line 177 "re2.pyx"
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_self->__pyx_vtab)->init_groups(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)

#line 177 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 177 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":178
 *     def groups(self, default=None):
 *         self.init_groups()
 *         if default is not None:             # <<<<<<<<<<<<<<
 *             return tuple([g or default for g in self._groups[1:]])
 *         return self._groups[1:]
 */

#line 178 "re2.pyx"
  __pyx_t_2 = (__pyx_v_default != Py_None);

#line 178 "re2.pyx"
  __pyx_t_3 = (__pyx_t_2 != 0);

#line 178 "re2.pyx"
  if (__pyx_t_3) {

    /* "re2.pyx":179
 *         self.init_groups()
 *         if default is not None:
 *             return tuple([g or default for g in self._groups[1:]])             # <<<<<<<<<<<<<<
 *         return self._groups[1:]
 * 
 */

#line 179 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 179 "re2.pyx"
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)

#line 179 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 179 "re2.pyx"
    if (unlikely(__pyx_v_self->_groups == Py_None)) {

#line 179 "re2.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 179 "re2.pyx"
      __PYX_ERR(0, 179, __pyx_L1_error)

#line 179 "re2.pyx"
    }

#line 179 "re2.pyx"
    __pyx_t_4 = __Pyx_PyTuple_GetSlice(__pyx_v_self->_groups, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 179, __pyx_L1_error)

#line 179 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 179 "re2.pyx"
    __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;

#line 179 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 179 "re2.pyx"
    for (;;) {

#line 179 "re2.pyx"
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;

#line 179 "re2.pyx"
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 179 "re2.pyx"
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 179, __pyx_L1_error)

#line 179 "re2.pyx"
      #else

#line 179 "re2.pyx"
      __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 179, __pyx_L1_error)

#line 179 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 179 "re2.pyx"
      #endif

#line 179 "re2.pyx"
      __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_4);

#line 179 "re2.pyx"
      __pyx_t_4 = 0;

#line 179 "re2.pyx"
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_g); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 179, __pyx_L1_error)

#line 179 "re2.pyx"
      if (!__pyx_t_3) {

#line 179 "re2.pyx"
      } else {

#line 179 "re2.pyx"
        __Pyx_INCREF(__pyx_v_g);

#line 179 "re2.pyx"
        __pyx_t_4 = __pyx_v_g;

#line 179 "re2.pyx"
        goto __pyx_L6_bool_binop_done;

#line 179 "re2.pyx"
      }

#line 179 "re2.pyx"
      __Pyx_INCREF(__pyx_v_default);

#line 179 "re2.pyx"
      __pyx_t_4 = __pyx_v_default;

#line 179 "re2.pyx"
      __pyx_L6_bool_binop_done:;

#line 179 "re2.pyx"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 179, __pyx_L1_error)

#line 179 "re2.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 179 "re2.pyx"
    }

#line 179 "re2.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 179 "re2.pyx"
    __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 179, __pyx_L1_error)

#line 179 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 179 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 179 "re2.pyx"
    __pyx_r = __pyx_t_5;

#line 179 "re2.pyx"
    __pyx_t_5 = 0;

#line 179 "re2.pyx"
    goto __pyx_L0;

    /* "re2.pyx":178
 *     def groups(self, default=None):
 *         self.init_groups()
 *         if default is not None:             # <<<<<<<<<<<<<<
 *             return tuple([g or default for g in self._groups[1:]])
 *         return self._groups[1:]
 */

#line 178 "re2.pyx"
  }

  /* "re2.pyx":180
 *         if default is not None:
 *             return tuple([g or default for g in self._groups[1:]])
 *         return self._groups[1:]             # <<<<<<<<<<<<<<
 * 
 *     def group(self, *args):
 */

#line 180 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 180 "re2.pyx"
  if (unlikely(__pyx_v_self->_groups == Py_None)) {

#line 180 "re2.pyx"
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 180 "re2.pyx"
    __PYX_ERR(0, 180, __pyx_L1_error)

#line 180 "re2.pyx"
  }

#line 180 "re2.pyx"
  __pyx_t_5 = __Pyx_PyTuple_GetSlice(__pyx_v_self->_groups, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 180, __pyx_L1_error)

#line 180 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 180 "re2.pyx"
  __pyx_r = __pyx_t_5;

#line 180 "re2.pyx"
  __pyx_t_5 = 0;

#line 180 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":176
 *         self._groups = tuple(groups)
 * 
 *     def groups(self, default=None):             # <<<<<<<<<<<<<<
 *         self.init_groups()
 *         if default is not None:
 */

#line 176 "re2.pyx"


#line 176 "re2.pyx"
  /* function exit code */

#line 176 "re2.pyx"
  __pyx_L1_error:;

#line 176 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 176 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 176 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 176 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.groups", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 176 "re2.pyx"
  __pyx_r = NULL;

#line 176 "re2.pyx"
  __pyx_L0:;

#line 176 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_g);

#line 176 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 176 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 176 "re2.pyx"
  return __pyx_r;

#line 176 "re2.pyx"
}

/* "re2.pyx":182
 *         return self._groups[1:]
 * 
 *     def group(self, *args):             # <<<<<<<<<<<<<<
 *         try:
 *             string = basestring
 */

#line 182 "re2.pyx"


#line 182 "re2.pyx"
/* Python wrapper */

#line 182 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_7group(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 182 "re2.pyx"
static char __pyx_doc_3re2_5Match_6group[] = "File: re2.pyx (starting at line 182)";

#line 182 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_7group(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0
#line 182 "re2.pyx"
;

#line 182 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 182 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 182 "re2.pyx"
  __Pyx_RefNannySetupContext("group (wrapper)", 0);

#line 182 "re2.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "group", 0))) return NULL;

#line 182 "re2.pyx"
  __Pyx_INCREF(__pyx_args);

#line 182 "re2.pyx"
  __pyx_v_args = __pyx_args;
  __pyx_r = 
#line 182 "re2.pyx"
__pyx_pf_3re2_5Match_6group(((struct __pyx_obj_3re2_Match *)__pyx_v_self), __pyx_v_args);

#line 182 "re2.pyx"


#line 182 "re2.pyx"
  /* function exit code */

#line 182 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_args);

#line 182 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 182 "re2.pyx"
  return __pyx_r;

#line 182 "re2.pyx"
}

#line 182 "re2.pyx"


#line 182 "re2.pyx"
static PyObject *__pyx_pf_3re2_5Match_6group(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_string = NULL
#line 182 "re2.pyx"
;
  CYTHON_UNUSED PyObject *__pyx_v_e = NULL
#line 182 "re2.pyx"
;
  PyObject *__pyx_v_groupnum = NULL
#line 182 "re2.pyx"
;
  int __pyx_v_idx
#line 182 "re2.pyx"
;
  PyObject *__pyx_v_i = NULL
#line 182 "re2.pyx"
;

#line 182 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 182 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 182 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 182 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 182 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 182 "re2.pyx"
  Py_ssize_t __pyx_t_4;

#line 182 "re2.pyx"
  int __pyx_t_5;

#line 182 "re2.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 182 "re2.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 182 "re2.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 182 "re2.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 182 "re2.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 182 "re2.pyx"
  PyObject *__pyx_t_11 = NULL;

#line 182 "re2.pyx"
  int __pyx_t_12;

#line 182 "re2.pyx"
  int __pyx_t_13;

#line 182 "re2.pyx"
  __Pyx_RefNannySetupContext("group", 0);

  /* "re2.pyx":183
 * 
 *     def group(self, *args):
 *         try:             # <<<<<<<<<<<<<<
 *             string = basestring
 *         except NameError as e:
 */

#line 183 "re2.pyx"
  {

#line 183 "re2.pyx"
    if (__pyx_t_1||__pyx_t_2||__pyx_t_3); else {/*mark used*/}

#line 183 "re2.pyx"
    /*try:*/ {

      /* "re2.pyx":184
 *     def group(self, *args):
 *         try:
 *             string = basestring             # <<<<<<<<<<<<<<
 *         except NameError as e:
 *             string = (str, bytes)
 */

#line 184 "re2.pyx"
      __Pyx_INCREF(((PyObject *)(&PyBaseString_Type)));

#line 184 "re2.pyx"
      __pyx_v_string = ((PyObject *)(&PyBaseString_Type));

      /* "re2.pyx":183
 * 
 *     def group(self, *args):
 *         try:             # <<<<<<<<<<<<<<
 *             string = basestring
 *         except NameError as e:
 */

#line 183 "re2.pyx"
    }

#line 183 "re2.pyx"
  }

  /* "re2.pyx":187
 *         except NameError as e:
 *             string = (str, bytes)
 *         if len(args) > 1:             # <<<<<<<<<<<<<<
 *             return tuple([self.group(i) for i in args])
 *         elif len(args) > 0:
 */

#line 187 "re2.pyx"
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 187, __pyx_L1_error)

#line 187 "re2.pyx"
  __pyx_t_5 = ((__pyx_t_4 > 1) != 0);

#line 187 "re2.pyx"
  if (__pyx_t_5) {

    /* "re2.pyx":188
 *             string = (str, bytes)
 *         if len(args) > 1:
 *             return tuple([self.group(i) for i in args])             # <<<<<<<<<<<<<<
 *         elif len(args) > 0:
 *             groupnum = args[0]
 */

#line 188 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 188 "re2.pyx"
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 188 "re2.pyx"
    __pyx_t_7 = __pyx_v_args; __Pyx_INCREF(__pyx_t_7); __pyx_t_4 = 0;

#line 188 "re2.pyx"
    for (;;) {

#line 188 "re2.pyx"
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_7)) break;

#line 188 "re2.pyx"
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 188 "re2.pyx"
      __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_4); __Pyx_INCREF(__pyx_t_8); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "re2.pyx"
      #else

#line 188 "re2.pyx"
      __pyx_t_8 = PySequence_ITEM(__pyx_t_7, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 188 "re2.pyx"
      #endif

#line 188 "re2.pyx"
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_8);

#line 188 "re2.pyx"
      __pyx_t_8 = 0;

#line 188 "re2.pyx"
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_group); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 188 "re2.pyx"
      __pyx_t_10 = NULL;

#line 188 "re2.pyx"
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {

#line 188 "re2.pyx"
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);

#line 188 "re2.pyx"
        if (likely(__pyx_t_10)) {

#line 188 "re2.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);

#line 188 "re2.pyx"
          __Pyx_INCREF(__pyx_t_10);

#line 188 "re2.pyx"
          __Pyx_INCREF(function);

#line 188 "re2.pyx"
          __Pyx_DECREF_SET(__pyx_t_9, function);

#line 188 "re2.pyx"
        }

#line 188 "re2.pyx"
      }

#line 188 "re2.pyx"
      if (!__pyx_t_10) {

#line 188 "re2.pyx"
        __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 188 "re2.pyx"
      } else {

#line 188 "re2.pyx"
        #if CYTHON_FAST_PYCALL

#line 188 "re2.pyx"
        if (PyFunction_Check(__pyx_t_9)) {

#line 188 "re2.pyx"
          PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_i};

#line 188 "re2.pyx"
          __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "re2.pyx"
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 188 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_8);

#line 188 "re2.pyx"
        } else

#line 188 "re2.pyx"
        #endif

#line 188 "re2.pyx"
        #if CYTHON_FAST_PYCCALL

#line 188 "re2.pyx"
        if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {

#line 188 "re2.pyx"
          PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_i};

#line 188 "re2.pyx"
          __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "re2.pyx"
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 188 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_8);

#line 188 "re2.pyx"
        } else

#line 188 "re2.pyx"
        #endif

#line 188 "re2.pyx"
        {

#line 188 "re2.pyx"
          __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_11);

#line 188 "re2.pyx"
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;

#line 188 "re2.pyx"
          __Pyx_INCREF(__pyx_v_i);

#line 188 "re2.pyx"
          __Pyx_GIVEREF(__pyx_v_i);

#line 188 "re2.pyx"
          PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_v_i);

#line 188 "re2.pyx"
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_8);

#line 188 "re2.pyx"
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 188 "re2.pyx"
        }

#line 188 "re2.pyx"
      }

#line 188 "re2.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 188 "re2.pyx"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "re2.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 188 "re2.pyx"
    }

#line 188 "re2.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 188 "re2.pyx"
    __pyx_t_7 = PyList_AsTuple(((PyObject*)__pyx_t_6)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 188, __pyx_L1_error)

#line 188 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 188 "re2.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 188 "re2.pyx"
    __pyx_r = __pyx_t_7;

#line 188 "re2.pyx"
    __pyx_t_7 = 0;

#line 188 "re2.pyx"
    goto __pyx_L0;

    /* "re2.pyx":187
 *         except NameError as e:
 *             string = (str, bytes)
 *         if len(args) > 1:             # <<<<<<<<<<<<<<
 *             return tuple([self.group(i) for i in args])
 *         elif len(args) > 0:
 */

#line 187 "re2.pyx"
  }

  /* "re2.pyx":189
 *         if len(args) > 1:
 *             return tuple([self.group(i) for i in args])
 *         elif len(args) > 0:             # <<<<<<<<<<<<<<
 *             groupnum = args[0]
 *         else:
 */

#line 189 "re2.pyx"
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 189, __pyx_L1_error)

#line 189 "re2.pyx"
  __pyx_t_5 = ((__pyx_t_4 > 0) != 0);

#line 189 "re2.pyx"
  if (__pyx_t_5) {

    /* "re2.pyx":190
 *             return tuple([self.group(i) for i in args])
 *         elif len(args) > 0:
 *             groupnum = args[0]             # <<<<<<<<<<<<<<
 *         else:
 *             groupnum = 0
 */

#line 190 "re2.pyx"
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 190, __pyx_L1_error)

#line 190 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 190 "re2.pyx"
    __pyx_v_groupnum = __pyx_t_7;

#line 190 "re2.pyx"
    __pyx_t_7 = 0;

    /* "re2.pyx":189
 *         if len(args) > 1:
 *             return tuple([self.group(i) for i in args])
 *         elif len(args) > 0:             # <<<<<<<<<<<<<<
 *             groupnum = args[0]
 *         else:
 */

#line 189 "re2.pyx"
    goto __pyx_L11;

#line 189 "re2.pyx"
  }

  /* "re2.pyx":192
 *             groupnum = args[0]
 *         else:
 *             groupnum = 0             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */

#line 192 "re2.pyx"
  /*else*/ {

#line 192 "re2.pyx"
    __Pyx_INCREF(__pyx_int_0);

#line 192 "re2.pyx"
    __pyx_v_groupnum = __pyx_int_0;

#line 192 "re2.pyx"
  }

#line 192 "re2.pyx"
  __pyx_L11:;

  /* "re2.pyx":196
 *         cdef int idx
 * 
 *         self.init_groups()             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(groupnum, string):
 */

#line 196 "re2.pyx"
  __pyx_t_7 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_self->__pyx_vtab)->init_groups(__pyx_v_self); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 196, __pyx_L1_error)

#line 196 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 196 "re2.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "re2.pyx":198
 *         self.init_groups()
 * 
 *         if isinstance(groupnum, string):             # <<<<<<<<<<<<<<
 *             return self.groupdict()[groupnum]
 * 
 */

#line 198 "re2.pyx"
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_groupnum, __pyx_v_string); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 198, __pyx_L1_error)

#line 198 "re2.pyx"
  __pyx_t_12 = (__pyx_t_5 != 0);

#line 198 "re2.pyx"
  if (__pyx_t_12) {

    /* "re2.pyx":199
 * 
 *         if isinstance(groupnum, string):
 *             return self.groupdict()[groupnum]             # <<<<<<<<<<<<<<
 * 
 *         idx = groupnum
 */

#line 199 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 199 "re2.pyx"
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_groupdict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 199, __pyx_L1_error)

#line 199 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 199 "re2.pyx"
    __pyx_t_8 = NULL;

#line 199 "re2.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {

#line 199 "re2.pyx"
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);

#line 199 "re2.pyx"
      if (likely(__pyx_t_8)) {

#line 199 "re2.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 199 "re2.pyx"
        __Pyx_INCREF(__pyx_t_8);

#line 199 "re2.pyx"
        __Pyx_INCREF(function);

#line 199 "re2.pyx"
        __Pyx_DECREF_SET(__pyx_t_6, function);

#line 199 "re2.pyx"
      }

#line 199 "re2.pyx"
    }

#line 199 "re2.pyx"
    if (__pyx_t_8) {

#line 199 "re2.pyx"
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 199, __pyx_L1_error)

#line 199 "re2.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 199 "re2.pyx"
    } else {

#line 199 "re2.pyx"
      __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 199, __pyx_L1_error)

#line 199 "re2.pyx"
    }

#line 199 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 199 "re2.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 199 "re2.pyx"
    __pyx_t_6 = PyObject_GetItem(__pyx_t_7, __pyx_v_groupnum); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 199, __pyx_L1_error)

#line 199 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 199 "re2.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 199 "re2.pyx"
    __pyx_r = __pyx_t_6;

#line 199 "re2.pyx"
    __pyx_t_6 = 0;

#line 199 "re2.pyx"
    goto __pyx_L0;

    /* "re2.pyx":198
 *         self.init_groups()
 * 
 *         if isinstance(groupnum, string):             # <<<<<<<<<<<<<<
 *             return self.groupdict()[groupnum]
 * 
 */

#line 198 "re2.pyx"
  }

  /* "re2.pyx":201
 *             return self.groupdict()[groupnum]
 * 
 *         idx = groupnum             # <<<<<<<<<<<<<<
 * 
 *         if idx > self.nmatches - 1:
 */

#line 201 "re2.pyx"
  __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_groupnum); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 201, __pyx_L1_error)

#line 201 "re2.pyx"
  __pyx_v_idx = __pyx_t_13;

  /* "re2.pyx":203
 *         idx = groupnum
 * 
 *         if idx > self.nmatches - 1:             # <<<<<<<<<<<<<<
 *             raise IndexError("no such group")
 *         return self._groups[idx]
 */

#line 203 "re2.pyx"
  __pyx_t_12 = ((__pyx_v_idx > (__pyx_v_self->nmatches - 1)) != 0);

#line 203 "re2.pyx"
  if (__pyx_t_12) {

    /* "re2.pyx":204
 * 
 *         if idx > self.nmatches - 1:
 *             raise IndexError("no such group")             # <<<<<<<<<<<<<<
 *         return self._groups[idx]
 * 
 */

#line 204 "re2.pyx"
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 204, __pyx_L1_error)

#line 204 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 204 "re2.pyx"
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);

#line 204 "re2.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 204 "re2.pyx"
    __PYX_ERR(0, 204, __pyx_L1_error)

    /* "re2.pyx":203
 *         idx = groupnum
 * 
 *         if idx > self.nmatches - 1:             # <<<<<<<<<<<<<<
 *             raise IndexError("no such group")
 *         return self._groups[idx]
 */

#line 203 "re2.pyx"
  }

  /* "re2.pyx":205
 *         if idx > self.nmatches - 1:
 *             raise IndexError("no such group")
 *         return self._groups[idx]             # <<<<<<<<<<<<<<
 * 
 *     cdef object _convert_positions(self, positions):
 */

#line 205 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 205 "re2.pyx"
  if (unlikely(__pyx_v_self->_groups == Py_None)) {

#line 205 "re2.pyx"
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 205 "re2.pyx"
    __PYX_ERR(0, 205, __pyx_L1_error)

#line 205 "re2.pyx"
  }

#line 205 "re2.pyx"
  __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v_self->_groups, __pyx_v_idx, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 205, __pyx_L1_error)

#line 205 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 205 "re2.pyx"
  __pyx_r = __pyx_t_6;

#line 205 "re2.pyx"
  __pyx_t_6 = 0;

#line 205 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":182
 *         return self._groups[1:]
 * 
 *     def group(self, *args):             # <<<<<<<<<<<<<<
 *         try:
 *             string = basestring
 */

#line 182 "re2.pyx"


#line 182 "re2.pyx"
  /* function exit code */

#line 182 "re2.pyx"
  __pyx_L1_error:;

#line 182 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 182 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 182 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 182 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 182 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 182 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_11);

#line 182 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.group", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 182 "re2.pyx"
  __pyx_r = NULL;

#line 182 "re2.pyx"
  __pyx_L0:;

#line 182 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_string);

#line 182 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_e);

#line 182 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_groupnum);

#line 182 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 182 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 182 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 182 "re2.pyx"
  return __pyx_r;

#line 182 "re2.pyx"
}

/* "re2.pyx":207
 *         return self._groups[idx]
 * 
 *     cdef object _convert_positions(self, positions):             # <<<<<<<<<<<<<<
 *         cdef char * s = self.match_string
 *         cdef int cpos = 0
 */

#line 207 "re2.pyx"


#line 207 "re2.pyx"
static PyObject *__pyx_f_3re2_5Match__convert_positions(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_positions) {
  char *__pyx_v_s
#line 207 "re2.pyx"
;
  int __pyx_v_cpos
#line 207 "re2.pyx"
;
  int __pyx_v_upos
#line 207 "re2.pyx"
;
  int __pyx_v_size
#line 207 "re2.pyx"
;
  int __pyx_v_c
#line 207 "re2.pyx"
;
  PyObject *__pyx_v_new_positions = NULL
#line 207 "re2.pyx"
;
  long __pyx_v_i
#line 207 "re2.pyx"
;
  Py_ssize_t __pyx_v_num_positions
#line 207 "re2.pyx"
;

#line 207 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 207 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 207 "re2.pyx"
  char *__pyx_t_1;

#line 207 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 207 "re2.pyx"
  Py_ssize_t __pyx_t_3;

#line 207 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 207 "re2.pyx"
  int __pyx_t_5;

#line 207 "re2.pyx"
  int __pyx_t_6;

#line 207 "re2.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 207 "re2.pyx"
  __Pyx_RefNannySetupContext("_convert_positions", 0);

  /* "re2.pyx":208
 * 
 *     cdef object _convert_positions(self, positions):
 *         cdef char * s = self.match_string             # <<<<<<<<<<<<<<
 *         cdef int cpos = 0
 *         cdef int upos = 0
 */

#line 208 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_self->match_string); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)

#line 208 "re2.pyx"
  __pyx_v_s = __pyx_t_1;

  /* "re2.pyx":209
 *     cdef object _convert_positions(self, positions):
 *         cdef char * s = self.match_string
 *         cdef int cpos = 0             # <<<<<<<<<<<<<<
 *         cdef int upos = 0
 *         cdef int size = len(self.match_string)
 */

#line 209 "re2.pyx"
  __pyx_v_cpos = 0;

  /* "re2.pyx":210
 *         cdef char * s = self.match_string
 *         cdef int cpos = 0
 *         cdef int upos = 0             # <<<<<<<<<<<<<<
 *         cdef int size = len(self.match_string)
 *         cdef int c
 */

#line 210 "re2.pyx"
  __pyx_v_upos = 0;

  /* "re2.pyx":211
 *         cdef int cpos = 0
 *         cdef int upos = 0
 *         cdef int size = len(self.match_string)             # <<<<<<<<<<<<<<
 *         cdef int c
 * 
 */

#line 211 "re2.pyx"
  __pyx_t_2 = __pyx_v_self->match_string;

#line 211 "re2.pyx"
  __Pyx_INCREF(__pyx_t_2);

#line 211 "re2.pyx"
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 211, __pyx_L1_error)

#line 211 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 211 "re2.pyx"
  __pyx_v_size = __pyx_t_3;

  /* "re2.pyx":214
 *         cdef int c
 * 
 *         new_positions = []             # <<<<<<<<<<<<<<
 *         i = 0
 *         num_positions = len(positions)
 */

#line 214 "re2.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)

#line 214 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 214 "re2.pyx"
  __pyx_v_new_positions = ((PyObject*)__pyx_t_2);

#line 214 "re2.pyx"
  __pyx_t_2 = 0;

  /* "re2.pyx":215
 * 
 *         new_positions = []
 *         i = 0             # <<<<<<<<<<<<<<
 *         num_positions = len(positions)
 *         if positions[i] == -1:
 */

#line 215 "re2.pyx"
  __pyx_v_i = 0;

  /* "re2.pyx":216
 *         new_positions = []
 *         i = 0
 *         num_positions = len(positions)             # <<<<<<<<<<<<<<
 *         if positions[i] == -1:
 *             new_positions.append(-1)
 */

#line 216 "re2.pyx"
  __pyx_t_3 = PyObject_Length(__pyx_v_positions); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 216, __pyx_L1_error)

#line 216 "re2.pyx"
  __pyx_v_num_positions = __pyx_t_3;

  /* "re2.pyx":217
 *         i = 0
 *         num_positions = len(positions)
 *         if positions[i] == -1:             # <<<<<<<<<<<<<<
 *             new_positions.append(-1)
 *             inc(i)
 */

#line 217 "re2.pyx"
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_positions, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L1_error)

#line 217 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 217 "re2.pyx"
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_t_2, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 217, __pyx_L1_error)

#line 217 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 217 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 217 "re2.pyx"
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 217, __pyx_L1_error)

#line 217 "re2.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 217 "re2.pyx"
  if (__pyx_t_5) {

    /* "re2.pyx":218
 *         num_positions = len(positions)
 *         if positions[i] == -1:
 *             new_positions.append(-1)             # <<<<<<<<<<<<<<
 *             inc(i)
 *             if i == num_positions:
 */

#line 218 "re2.pyx"
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_positions, __pyx_int_neg_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 218, __pyx_L1_error)

    /* "re2.pyx":219
 *         if positions[i] == -1:
 *             new_positions.append(-1)
 *             inc(i)             # <<<<<<<<<<<<<<
 *             if i == num_positions:
 *                 return new_positions
 */

#line 219 "re2.pyx"
    (++__pyx_v_i);

    /* "re2.pyx":220
 *             new_positions.append(-1)
 *             inc(i)
 *             if i == num_positions:             # <<<<<<<<<<<<<<
 *                 return new_positions
 *         if positions[i] == 0:
 */

#line 220 "re2.pyx"
    __pyx_t_5 = ((__pyx_v_i == __pyx_v_num_positions) != 0);

#line 220 "re2.pyx"
    if (__pyx_t_5) {

      /* "re2.pyx":221
 *             inc(i)
 *             if i == num_positions:
 *                 return new_positions             # <<<<<<<<<<<<<<
 *         if positions[i] == 0:
 *             new_positions.append(0)
 */

#line 221 "re2.pyx"
      __Pyx_XDECREF(__pyx_r);

#line 221 "re2.pyx"
      __Pyx_INCREF(__pyx_v_new_positions);

#line 221 "re2.pyx"
      __pyx_r = __pyx_v_new_positions;

#line 221 "re2.pyx"
      goto __pyx_L0;

      /* "re2.pyx":220
 *             new_positions.append(-1)
 *             inc(i)
 *             if i == num_positions:             # <<<<<<<<<<<<<<
 *                 return new_positions
 *         if positions[i] == 0:
 */

#line 220 "re2.pyx"
    }

    /* "re2.pyx":217
 *         i = 0
 *         num_positions = len(positions)
 *         if positions[i] == -1:             # <<<<<<<<<<<<<<
 *             new_positions.append(-1)
 *             inc(i)
 */

#line 217 "re2.pyx"
  }

  /* "re2.pyx":222
 *             if i == num_positions:
 *                 return new_positions
 *         if positions[i] == 0:             # <<<<<<<<<<<<<<
 *             new_positions.append(0)
 *             inc(i)
 */

#line 222 "re2.pyx"
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_positions, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 222, __pyx_L1_error)

#line 222 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 222 "re2.pyx"
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_4, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 222, __pyx_L1_error)

#line 222 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 222 "re2.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 222 "re2.pyx"
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 222, __pyx_L1_error)

#line 222 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 222 "re2.pyx"
  if (__pyx_t_5) {

    /* "re2.pyx":223
 *                 return new_positions
 *         if positions[i] == 0:
 *             new_positions.append(0)             # <<<<<<<<<<<<<<
 *             inc(i)
 *             if i == num_positions:
 */

#line 223 "re2.pyx"
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_positions, __pyx_int_0); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 223, __pyx_L1_error)

    /* "re2.pyx":224
 *         if positions[i] == 0:
 *             new_positions.append(0)
 *             inc(i)             # <<<<<<<<<<<<<<
 *             if i == num_positions:
 *                 return new_positions
 */

#line 224 "re2.pyx"
    (++__pyx_v_i);

    /* "re2.pyx":225
 *             new_positions.append(0)
 *             inc(i)
 *             if i == num_positions:             # <<<<<<<<<<<<<<
 *                 return new_positions
 * 
 */

#line 225 "re2.pyx"
    __pyx_t_5 = ((__pyx_v_i == __pyx_v_num_positions) != 0);

#line 225 "re2.pyx"
    if (__pyx_t_5) {

      /* "re2.pyx":226
 *             inc(i)
 *             if i == num_positions:
 *                 return new_positions             # <<<<<<<<<<<<<<
 * 
 *         while cpos < size:
 */

#line 226 "re2.pyx"
      __Pyx_XDECREF(__pyx_r);

#line 226 "re2.pyx"
      __Pyx_INCREF(__pyx_v_new_positions);

#line 226 "re2.pyx"
      __pyx_r = __pyx_v_new_positions;

#line 226 "re2.pyx"
      goto __pyx_L0;

      /* "re2.pyx":225
 *             new_positions.append(0)
 *             inc(i)
 *             if i == num_positions:             # <<<<<<<<<<<<<<
 *                 return new_positions
 * 
 */

#line 225 "re2.pyx"
    }

    /* "re2.pyx":222
 *             if i == num_positions:
 *                 return new_positions
 *         if positions[i] == 0:             # <<<<<<<<<<<<<<
 *             new_positions.append(0)
 *             inc(i)
 */

#line 222 "re2.pyx"
  }

  /* "re2.pyx":228
 *                 return new_positions
 * 
 *         while cpos < size:             # <<<<<<<<<<<<<<
 *             c = <unsigned char>s[cpos]
 *             if c < 0x80:
 */

#line 228 "re2.pyx"
  while (1) {

#line 228 "re2.pyx"
    __pyx_t_5 = ((__pyx_v_cpos < __pyx_v_size) != 0);

#line 228 "re2.pyx"
    if (!__pyx_t_5) break;

    /* "re2.pyx":229
 * 
 *         while cpos < size:
 *             c = <unsigned char>s[cpos]             # <<<<<<<<<<<<<<
 *             if c < 0x80:
 *                 inc(cpos)
 */

#line 229 "re2.pyx"
    __pyx_v_c = ((unsigned char)(__pyx_v_s[__pyx_v_cpos]));

    /* "re2.pyx":230
 *         while cpos < size:
 *             c = <unsigned char>s[cpos]
 *             if c < 0x80:             # <<<<<<<<<<<<<<
 *                 inc(cpos)
 *                 inc(upos)
 */

#line 230 "re2.pyx"
    __pyx_t_5 = ((__pyx_v_c < 0x80) != 0);

#line 230 "re2.pyx"
    if (__pyx_t_5) {

      /* "re2.pyx":231
 *             c = <unsigned char>s[cpos]
 *             if c < 0x80:
 *                 inc(cpos)             # <<<<<<<<<<<<<<
 *                 inc(upos)
 *             elif c < 0xe0:
 */

#line 231 "re2.pyx"
      (++__pyx_v_cpos);

      /* "re2.pyx":232
 *             if c < 0x80:
 *                 inc(cpos)
 *                 inc(upos)             # <<<<<<<<<<<<<<
 *             elif c < 0xe0:
 *                 cpos += 2
 */

#line 232 "re2.pyx"
      (++__pyx_v_upos);

      /* "re2.pyx":230
 *         while cpos < size:
 *             c = <unsigned char>s[cpos]
 *             if c < 0x80:             # <<<<<<<<<<<<<<
 *                 inc(cpos)
 *                 inc(upos)
 */

#line 230 "re2.pyx"
      goto __pyx_L9;

#line 230 "re2.pyx"
    }

    /* "re2.pyx":233
 *                 inc(cpos)
 *                 inc(upos)
 *             elif c < 0xe0:             # <<<<<<<<<<<<<<
 *                 cpos += 2
 *                 inc(upos)
 */

#line 233 "re2.pyx"
    __pyx_t_5 = ((__pyx_v_c < 0xe0) != 0);

#line 233 "re2.pyx"
    if (__pyx_t_5) {

      /* "re2.pyx":234
 *                 inc(upos)
 *             elif c < 0xe0:
 *                 cpos += 2             # <<<<<<<<<<<<<<
 *                 inc(upos)
 *             elif c < 0xf0:
 */

#line 234 "re2.pyx"
      __pyx_v_cpos = (__pyx_v_cpos + 2);

      /* "re2.pyx":235
 *             elif c < 0xe0:
 *                 cpos += 2
 *                 inc(upos)             # <<<<<<<<<<<<<<
 *             elif c < 0xf0:
 *                 cpos += 3
 */

#line 235 "re2.pyx"
      (++__pyx_v_upos);

      /* "re2.pyx":233
 *                 inc(cpos)
 *                 inc(upos)
 *             elif c < 0xe0:             # <<<<<<<<<<<<<<
 *                 cpos += 2
 *                 inc(upos)
 */

#line 233 "re2.pyx"
      goto __pyx_L9;

#line 233 "re2.pyx"
    }

    /* "re2.pyx":236
 *                 cpos += 2
 *                 inc(upos)
 *             elif c < 0xf0:             # <<<<<<<<<<<<<<
 *                 cpos += 3
 *                 inc(upos)
 */

#line 236 "re2.pyx"
    __pyx_t_5 = ((__pyx_v_c < 0xf0) != 0);

#line 236 "re2.pyx"
    if (__pyx_t_5) {

      /* "re2.pyx":237
 *                 inc(upos)
 *             elif c < 0xf0:
 *                 cpos += 3             # <<<<<<<<<<<<<<
 *                 inc(upos)
 *             else:
 */

#line 237 "re2.pyx"
      __pyx_v_cpos = (__pyx_v_cpos + 3);

      /* "re2.pyx":238
 *             elif c < 0xf0:
 *                 cpos += 3
 *                 inc(upos)             # <<<<<<<<<<<<<<
 *             else:
 *                 cpos += 4
 */

#line 238 "re2.pyx"
      (++__pyx_v_upos);

      /* "re2.pyx":236
 *                 cpos += 2
 *                 inc(upos)
 *             elif c < 0xf0:             # <<<<<<<<<<<<<<
 *                 cpos += 3
 *                 inc(upos)
 */

#line 236 "re2.pyx"
      goto __pyx_L9;

#line 236 "re2.pyx"
    }

    /* "re2.pyx":240
 *                 inc(upos)
 *             else:
 *                 cpos += 4             # <<<<<<<<<<<<<<
 *                 inc(upos)
 *                 # wide unicode chars get 2 unichars when python is compiled with --enable-unicode=ucs2
 */

#line 240 "re2.pyx"
    /*else*/ {

#line 240 "re2.pyx"
      __pyx_v_cpos = (__pyx_v_cpos + 4);

      /* "re2.pyx":241
 *             else:
 *                 cpos += 4
 *                 inc(upos)             # <<<<<<<<<<<<<<
 *                 # wide unicode chars get 2 unichars when python is compiled with --enable-unicode=ucs2
 *                 # TODO: verify this
 */

#line 241 "re2.pyx"
      (++__pyx_v_upos);

      /* "re2.pyx":244
 *                 # wide unicode chars get 2 unichars when python is compiled with --enable-unicode=ucs2
 *                 # TODO: verify this
 *                 emit_ifndef_py_unicode_wide()             # <<<<<<<<<<<<<<
 *                 inc(upos)
 *                 emit_endif()
 */

#line 244 "re2.pyx"
      #if !defined(Py_UNICODE_WIDE) //();

      /* "re2.pyx":245
 *                 # TODO: verify this
 *                 emit_ifndef_py_unicode_wide()
 *                 inc(upos)             # <<<<<<<<<<<<<<
 *                 emit_endif()
 * 
 */

#line 245 "re2.pyx"
      (++__pyx_v_upos);

      /* "re2.pyx":246
 *                 emit_ifndef_py_unicode_wide()
 *                 inc(upos)
 *                 emit_endif()             # <<<<<<<<<<<<<<
 * 
 *             if positions[i] == cpos:
 */

#line 246 "re2.pyx"
      #endif //();

#line 246 "re2.pyx"
    }

#line 246 "re2.pyx"
    __pyx_L9:;

    /* "re2.pyx":248
 *                 emit_endif()
 * 
 *             if positions[i] == cpos:             # <<<<<<<<<<<<<<
 *                 new_positions.append(upos)
 *                 inc(i)
 */

#line 248 "re2.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_positions, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)

#line 248 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 248 "re2.pyx"
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_cpos); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 248, __pyx_L1_error)

#line 248 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 248 "re2.pyx"
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 248, __pyx_L1_error)

#line 248 "re2.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 248 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 248 "re2.pyx"
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 248, __pyx_L1_error)

#line 248 "re2.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 248 "re2.pyx"
    if (__pyx_t_5) {

      /* "re2.pyx":249
 * 
 *             if positions[i] == cpos:
 *                 new_positions.append(upos)             # <<<<<<<<<<<<<<
 *                 inc(i)
 *                 if i == num_positions:
 */

#line 249 "re2.pyx"
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_upos); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 249, __pyx_L1_error)

#line 249 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 249 "re2.pyx"
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_positions, __pyx_t_7); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 249, __pyx_L1_error)

#line 249 "re2.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "re2.pyx":250
 *             if positions[i] == cpos:
 *                 new_positions.append(upos)
 *                 inc(i)             # <<<<<<<<<<<<<<
 *                 if i == num_positions:
 *                     return new_positions
 */

#line 250 "re2.pyx"
      (++__pyx_v_i);

      /* "re2.pyx":251
 *                 new_positions.append(upos)
 *                 inc(i)
 *                 if i == num_positions:             # <<<<<<<<<<<<<<
 *                     return new_positions
 * 
 */

#line 251 "re2.pyx"
      __pyx_t_5 = ((__pyx_v_i == __pyx_v_num_positions) != 0);

#line 251 "re2.pyx"
      if (__pyx_t_5) {

        /* "re2.pyx":252
 *                 inc(i)
 *                 if i == num_positions:
 *                     return new_positions             # <<<<<<<<<<<<<<
 * 
 *     def _convert_spans(self, spans):
 */

#line 252 "re2.pyx"
        __Pyx_XDECREF(__pyx_r);

#line 252 "re2.pyx"
        __Pyx_INCREF(__pyx_v_new_positions);

#line 252 "re2.pyx"
        __pyx_r = __pyx_v_new_positions;

#line 252 "re2.pyx"
        goto __pyx_L0;

        /* "re2.pyx":251
 *                 new_positions.append(upos)
 *                 inc(i)
 *                 if i == num_positions:             # <<<<<<<<<<<<<<
 *                     return new_positions
 * 
 */

#line 251 "re2.pyx"
      }

      /* "re2.pyx":248
 *                 emit_endif()
 * 
 *             if positions[i] == cpos:             # <<<<<<<<<<<<<<
 *                 new_positions.append(upos)
 *                 inc(i)
 */

#line 248 "re2.pyx"
    }

#line 248 "re2.pyx"
  }

  /* "re2.pyx":207
 *         return self._groups[idx]
 * 
 *     cdef object _convert_positions(self, positions):             # <<<<<<<<<<<<<<
 *         cdef char * s = self.match_string
 *         cdef int cpos = 0
 */

#line 207 "re2.pyx"


#line 207 "re2.pyx"
  /* function exit code */

#line 207 "re2.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 207 "re2.pyx"
  goto __pyx_L0;

#line 207 "re2.pyx"
  __pyx_L1_error:;

#line 207 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 207 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 207 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 207 "re2.pyx"
  __Pyx_AddTraceback("re2.Match._convert_positions", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 207 "re2.pyx"
  __pyx_r = 0;

#line 207 "re2.pyx"
  __pyx_L0:;

#line 207 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_new_positions);

#line 207 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 207 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 207 "re2.pyx"
  return __pyx_r;

#line 207 "re2.pyx"
}

/* "re2.pyx":254
 *                     return new_positions
 * 
 *     def _convert_spans(self, spans):             # <<<<<<<<<<<<<<
 *         positions = [x for x,y in spans] + [y for x,y in spans]
 *         positions = sorted(set(positions))
 */

#line 254 "re2.pyx"


#line 254 "re2.pyx"
/* Python wrapper */

#line 254 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_9_convert_spans(PyObject *__pyx_v_self, PyObject *__pyx_v_spans); /*proto*/

#line 254 "re2.pyx"
static char __pyx_doc_3re2_5Match_8_convert_spans[] = "File: re2.pyx (starting at line 254)";

#line 254 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_9_convert_spans(PyObject *__pyx_v_self, PyObject *__pyx_v_spans) {

#line 254 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 254 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 254 "re2.pyx"
  __Pyx_RefNannySetupContext("_convert_spans (wrapper)", 0);
  __pyx_r = 
#line 254 "re2.pyx"
__pyx_pf_3re2_5Match_8_convert_spans(((struct __pyx_obj_3re2_Match *)__pyx_v_self), ((PyObject *)__pyx_v_spans));

#line 254 "re2.pyx"


#line 254 "re2.pyx"
  /* function exit code */

#line 254 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 254 "re2.pyx"
  return __pyx_r;

#line 254 "re2.pyx"
}

#line 254 "re2.pyx"


#line 254 "re2.pyx"
static PyObject *__pyx_pf_3re2_5Match_8_convert_spans(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_spans) {
  PyObject *__pyx_v_positions = NULL
#line 254 "re2.pyx"
;
  PyObject *__pyx_v_posdict = NULL
#line 254 "re2.pyx"
;
  PyObject *__pyx_v_x = NULL
#line 254 "re2.pyx"
;
  PyObject *__pyx_v_y = NULL
#line 254 "re2.pyx"
;

#line 254 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 254 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 254 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 254 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 254 "re2.pyx"
  Py_ssize_t __pyx_t_3;

#line 254 "re2.pyx"
  PyObject *(*__pyx_t_4)(PyObject *);

#line 254 "re2.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 254 "re2.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 254 "re2.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 254 "re2.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 254 "re2.pyx"
  PyObject *(*__pyx_t_9)(PyObject *);

#line 254 "re2.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 254 "re2.pyx"
  int __pyx_t_11;

#line 254 "re2.pyx"
  __Pyx_RefNannySetupContext("_convert_spans", 0);

  /* "re2.pyx":255
 * 
 *     def _convert_spans(self, spans):
 *         positions = [x for x,y in spans] + [y for x,y in spans]             # <<<<<<<<<<<<<<
 *         positions = sorted(set(positions))
 *         posdict = dict(zip(positions, self._convert_positions(positions)))
 */

#line 255 "re2.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 255 "re2.pyx"
  if (likely(PyList_CheckExact(__pyx_v_spans)) || PyTuple_CheckExact(__pyx_v_spans)) {

#line 255 "re2.pyx"
    __pyx_t_2 = __pyx_v_spans; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;

#line 255 "re2.pyx"
    __pyx_t_4 = NULL;

#line 255 "re2.pyx"
  } else {
    __pyx_t_3 = -1; 
#line 255 "re2.pyx"
__pyx_t_2 = PyObject_GetIter(__pyx_v_spans); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 255 "re2.pyx"
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
  }

#line 255 "re2.pyx"
  for (;;) {

#line 255 "re2.pyx"
    if (likely(!__pyx_t_4)) {

#line 255 "re2.pyx"
      if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 255 "re2.pyx"
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 255 "re2.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 255 "re2.pyx"
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
        #else

#line 255 "re2.pyx"
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 255 "re2.pyx"
        #endif

#line 255 "re2.pyx"
      } else {

#line 255 "re2.pyx"
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 255 "re2.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 255 "re2.pyx"
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
        #else

#line 255 "re2.pyx"
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 255 "re2.pyx"
        #endif

#line 255 "re2.pyx"
      }
    } else 
#line 255 "re2.pyx"
{

#line 255 "re2.pyx"
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);

#line 255 "re2.pyx"
      if (unlikely(!__pyx_t_5)) {

#line 255 "re2.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 255 "re2.pyx"
        if (exc_type) {

#line 255 "re2.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 255 "re2.pyx"
          else __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
        }

#line 255 "re2.pyx"
        break;

#line 255 "re2.pyx"
      }

#line 255 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 255 "re2.pyx"
    }

#line 255 "re2.pyx"
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {

#line 255 "re2.pyx"
      PyObject* sequence = __pyx_t_5;

#line 255 "re2.pyx"
      #if !CYTHON_COMPILING_IN_PYPY

#line 255 "re2.pyx"
      Py_ssize_t size = Py_SIZE(sequence);

#line 255 "re2.pyx"
      #else

#line 255 "re2.pyx"
      Py_ssize_t size = PySequence_Size(sequence);

#line 255 "re2.pyx"
      #endif

#line 255 "re2.pyx"
      if (unlikely(size != 2)) {

#line 255 "re2.pyx"
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 255 "re2.pyx"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 255 "re2.pyx"
        __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
      }

#line 255 "re2.pyx"
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 255 "re2.pyx"
      if (likely(PyTuple_CheckExact(sequence))) {

#line 255 "re2.pyx"
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 

#line 255 "re2.pyx"
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 

#line 255 "re2.pyx"
      } else {

#line 255 "re2.pyx"
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 

#line 255 "re2.pyx"
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 

#line 255 "re2.pyx"
      }

#line 255 "re2.pyx"
      __Pyx_INCREF(__pyx_t_6);

#line 255 "re2.pyx"
      __Pyx_INCREF(__pyx_t_7);

#line 255 "re2.pyx"
      #else

#line 255 "re2.pyx"
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 255 "re2.pyx"
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 255 "re2.pyx"
      #endif

#line 255 "re2.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 255 "re2.pyx"
    } else {

#line 255 "re2.pyx"
      Py_ssize_t index = -1;

#line 255 "re2.pyx"
      __pyx_t_8 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 255 "re2.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 255 "re2.pyx"
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) 
#line 255 "re2.pyx"
goto __pyx_L5_unpacking_failed;

#line 255 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) 
#line 255 "re2.pyx"
goto __pyx_L5_unpacking_failed;

#line 255 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 255 "re2.pyx"
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
      __pyx_t_9 = NULL;

#line 255 "re2.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 255 "re2.pyx"
      goto __pyx_L6_unpacking_done;

#line 255 "re2.pyx"
      __pyx_L5_unpacking_failed:;

#line 255 "re2.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 255 "re2.pyx"
      __pyx_t_9 = NULL;

#line 255 "re2.pyx"
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 255 "re2.pyx"
      __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
      __pyx_L6_unpacking_done:;

#line 255 "re2.pyx"
    }

#line 255 "re2.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_6);

#line 255 "re2.pyx"
    __pyx_t_6 = 0;

#line 255 "re2.pyx"
    __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_7);

#line 255 "re2.pyx"
    __pyx_t_7 = 0;

#line 255 "re2.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_x))) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
  }

#line 255 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 255 "re2.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 255 "re2.pyx"
  if (likely(PyList_CheckExact(__pyx_v_spans)) || PyTuple_CheckExact(__pyx_v_spans)) {

#line 255 "re2.pyx"
    __pyx_t_5 = __pyx_v_spans; __Pyx_INCREF(__pyx_t_5); __pyx_t_3 = 0;

#line 255 "re2.pyx"
    __pyx_t_4 = NULL;

#line 255 "re2.pyx"
  } else {
    __pyx_t_3 = -1; 
#line 255 "re2.pyx"
__pyx_t_5 = PyObject_GetIter(__pyx_v_spans); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 255 "re2.pyx"
    __pyx_t_4 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
  }

#line 255 "re2.pyx"
  for (;;) {

#line 255 "re2.pyx"
    if (likely(!__pyx_t_4)) {

#line 255 "re2.pyx"
      if (likely(PyList_CheckExact(__pyx_t_5))) {

#line 255 "re2.pyx"
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_5)) break;

#line 255 "re2.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 255 "re2.pyx"
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
        #else

#line 255 "re2.pyx"
        __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 255 "re2.pyx"
        #endif

#line 255 "re2.pyx"
      } else {

#line 255 "re2.pyx"
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_5)) break;

#line 255 "re2.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 255 "re2.pyx"
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
        #else

#line 255 "re2.pyx"
        __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 255 "re2.pyx"
        #endif

#line 255 "re2.pyx"
      }
    } else 
#line 255 "re2.pyx"
{

#line 255 "re2.pyx"
      __pyx_t_7 = __pyx_t_4(__pyx_t_5);

#line 255 "re2.pyx"
      if (unlikely(!__pyx_t_7)) {

#line 255 "re2.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 255 "re2.pyx"
        if (exc_type) {

#line 255 "re2.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 255 "re2.pyx"
          else __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
        }

#line 255 "re2.pyx"
        break;

#line 255 "re2.pyx"
      }

#line 255 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 255 "re2.pyx"
    }

#line 255 "re2.pyx"
    if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {

#line 255 "re2.pyx"
      PyObject* sequence = __pyx_t_7;

#line 255 "re2.pyx"
      #if !CYTHON_COMPILING_IN_PYPY

#line 255 "re2.pyx"
      Py_ssize_t size = Py_SIZE(sequence);

#line 255 "re2.pyx"
      #else

#line 255 "re2.pyx"
      Py_ssize_t size = PySequence_Size(sequence);

#line 255 "re2.pyx"
      #endif

#line 255 "re2.pyx"
      if (unlikely(size != 2)) {

#line 255 "re2.pyx"
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 255 "re2.pyx"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 255 "re2.pyx"
        __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
      }

#line 255 "re2.pyx"
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 255 "re2.pyx"
      if (likely(PyTuple_CheckExact(sequence))) {

#line 255 "re2.pyx"
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 

#line 255 "re2.pyx"
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 

#line 255 "re2.pyx"
      } else {

#line 255 "re2.pyx"
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 

#line 255 "re2.pyx"
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 

#line 255 "re2.pyx"
      }

#line 255 "re2.pyx"
      __Pyx_INCREF(__pyx_t_6);

#line 255 "re2.pyx"
      __Pyx_INCREF(__pyx_t_8);

#line 255 "re2.pyx"
      #else

#line 255 "re2.pyx"
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 255 "re2.pyx"
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 255 "re2.pyx"
      #endif

#line 255 "re2.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 255 "re2.pyx"
    } else {

#line 255 "re2.pyx"
      Py_ssize_t index = -1;

#line 255 "re2.pyx"
      __pyx_t_10 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 255 "re2.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 255 "re2.pyx"
      __pyx_t_9 = Py_TYPE(__pyx_t_10)->tp_iternext;
      index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_10); if (unlikely(!__pyx_t_6)) 
#line 255 "re2.pyx"
goto __pyx_L9_unpacking_failed;

#line 255 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_8 = __pyx_t_9(__pyx_t_10); if (unlikely(!__pyx_t_8)) 
#line 255 "re2.pyx"
goto __pyx_L9_unpacking_failed;

#line 255 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 255 "re2.pyx"
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_10), 2) < 0) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
      __pyx_t_9 = NULL;

#line 255 "re2.pyx"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 255 "re2.pyx"
      goto __pyx_L10_unpacking_done;

#line 255 "re2.pyx"
      __pyx_L9_unpacking_failed:;

#line 255 "re2.pyx"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 255 "re2.pyx"
      __pyx_t_9 = NULL;

#line 255 "re2.pyx"
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 255 "re2.pyx"
      __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
      __pyx_L10_unpacking_done:;

#line 255 "re2.pyx"
    }

#line 255 "re2.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_6);

#line 255 "re2.pyx"
    __pyx_t_6 = 0;

#line 255 "re2.pyx"
    __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_8);

#line 255 "re2.pyx"
    __pyx_t_8 = 0;

#line 255 "re2.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_v_y))) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
  }

#line 255 "re2.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 255 "re2.pyx"
  __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 255, __pyx_L1_error)

#line 255 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 255 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 255 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 255 "re2.pyx"
  __pyx_v_positions = ((PyObject*)__pyx_t_5);

#line 255 "re2.pyx"
  __pyx_t_5 = 0;

  /* "re2.pyx":256
 *     def _convert_spans(self, spans):
 *         positions = [x for x,y in spans] + [y for x,y in spans]
 *         positions = sorted(set(positions))             # <<<<<<<<<<<<<<
 *         posdict = dict(zip(positions, self._convert_positions(positions)))
 * 
 */

#line 256 "re2.pyx"
  __pyx_t_2 = PySet_New(__pyx_v_positions); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 256, __pyx_L1_error)

#line 256 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 256 "re2.pyx"
  __pyx_t_1 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)

#line 256 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 256 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 256 "re2.pyx"
  __pyx_t_5 = ((PyObject*)__pyx_t_1);

#line 256 "re2.pyx"
  __pyx_t_1 = 0;

#line 256 "re2.pyx"
  __pyx_t_11 = PyList_Sort(__pyx_t_5); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 256, __pyx_L1_error)

#line 256 "re2.pyx"
  __Pyx_DECREF_SET(__pyx_v_positions, ((PyObject*)__pyx_t_5));

#line 256 "re2.pyx"
  __pyx_t_5 = 0;

  /* "re2.pyx":257
 *         positions = [x for x,y in spans] + [y for x,y in spans]
 *         positions = sorted(set(positions))
 *         posdict = dict(zip(positions, self._convert_positions(positions)))             # <<<<<<<<<<<<<<
 * 
 *         return [(posdict[x], posdict[y]) for x,y in spans]
 */

#line 257 "re2.pyx"
  __pyx_t_5 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_self->__pyx_vtab)->_convert_positions(__pyx_v_self, __pyx_v_positions); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 257, __pyx_L1_error)

#line 257 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 257 "re2.pyx"
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)

#line 257 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 257 "re2.pyx"
  __Pyx_INCREF(__pyx_v_positions);

#line 257 "re2.pyx"
  __Pyx_GIVEREF(__pyx_v_positions);

#line 257 "re2.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_positions);

#line 257 "re2.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 257 "re2.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);

#line 257 "re2.pyx"
  __pyx_t_5 = 0;

#line 257 "re2.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 257, __pyx_L1_error)

#line 257 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 257 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 257 "re2.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)

#line 257 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 257 "re2.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 257 "re2.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);

#line 257 "re2.pyx"
  __pyx_t_5 = 0;

#line 257 "re2.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyDict_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 257, __pyx_L1_error)

#line 257 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 257 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 257 "re2.pyx"
  __pyx_v_posdict = ((PyObject*)__pyx_t_5);

#line 257 "re2.pyx"
  __pyx_t_5 = 0;

  /* "re2.pyx":259
 *         posdict = dict(zip(positions, self._convert_positions(positions)))
 * 
 *         return [(posdict[x], posdict[y]) for x,y in spans]             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 259 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 259 "re2.pyx"
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 259 "re2.pyx"
  if (likely(PyList_CheckExact(__pyx_v_spans)) || PyTuple_CheckExact(__pyx_v_spans)) {

#line 259 "re2.pyx"
    __pyx_t_1 = __pyx_v_spans; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;

#line 259 "re2.pyx"
    __pyx_t_4 = NULL;

#line 259 "re2.pyx"
  } else {
    __pyx_t_3 = -1; 
#line 259 "re2.pyx"
__pyx_t_1 = PyObject_GetIter(__pyx_v_spans); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 259 "re2.pyx"
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
  }

#line 259 "re2.pyx"
  for (;;) {

#line 259 "re2.pyx"
    if (likely(!__pyx_t_4)) {

#line 259 "re2.pyx"
      if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 259 "re2.pyx"
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 259 "re2.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 259 "re2.pyx"
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
        #else

#line 259 "re2.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 259 "re2.pyx"
        #endif

#line 259 "re2.pyx"
      } else {

#line 259 "re2.pyx"
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 259 "re2.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 259 "re2.pyx"
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
        #else

#line 259 "re2.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 259 "re2.pyx"
        #endif

#line 259 "re2.pyx"
      }
    } else 
#line 259 "re2.pyx"
{

#line 259 "re2.pyx"
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);

#line 259 "re2.pyx"
      if (unlikely(!__pyx_t_2)) {

#line 259 "re2.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 259 "re2.pyx"
        if (exc_type) {

#line 259 "re2.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 259 "re2.pyx"
          else __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
        }

#line 259 "re2.pyx"
        break;

#line 259 "re2.pyx"
      }

#line 259 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 259 "re2.pyx"
    }

#line 259 "re2.pyx"
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {

#line 259 "re2.pyx"
      PyObject* sequence = __pyx_t_2;

#line 259 "re2.pyx"
      #if !CYTHON_COMPILING_IN_PYPY

#line 259 "re2.pyx"
      Py_ssize_t size = Py_SIZE(sequence);

#line 259 "re2.pyx"
      #else

#line 259 "re2.pyx"
      Py_ssize_t size = PySequence_Size(sequence);

#line 259 "re2.pyx"
      #endif

#line 259 "re2.pyx"
      if (unlikely(size != 2)) {

#line 259 "re2.pyx"
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 259 "re2.pyx"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 259 "re2.pyx"
        __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
      }

#line 259 "re2.pyx"
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 259 "re2.pyx"
      if (likely(PyTuple_CheckExact(sequence))) {

#line 259 "re2.pyx"
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 

#line 259 "re2.pyx"
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 

#line 259 "re2.pyx"
      } else {

#line 259 "re2.pyx"
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 

#line 259 "re2.pyx"
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 

#line 259 "re2.pyx"
      }

#line 259 "re2.pyx"
      __Pyx_INCREF(__pyx_t_7);

#line 259 "re2.pyx"
      __Pyx_INCREF(__pyx_t_8);

#line 259 "re2.pyx"
      #else

#line 259 "re2.pyx"
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 259 "re2.pyx"
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 259 "re2.pyx"
      #endif

#line 259 "re2.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 259 "re2.pyx"
    } else {

#line 259 "re2.pyx"
      Py_ssize_t index = -1;

#line 259 "re2.pyx"
      __pyx_t_6 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 259 "re2.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 259 "re2.pyx"
      __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_9(__pyx_t_6); if (unlikely(!__pyx_t_7)) 
#line 259 "re2.pyx"
goto __pyx_L13_unpacking_failed;

#line 259 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_8 = __pyx_t_9(__pyx_t_6); if (unlikely(!__pyx_t_8)) 
#line 259 "re2.pyx"
goto __pyx_L13_unpacking_failed;

#line 259 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 259 "re2.pyx"
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_6), 2) < 0) __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
      __pyx_t_9 = NULL;

#line 259 "re2.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 259 "re2.pyx"
      goto __pyx_L14_unpacking_done;

#line 259 "re2.pyx"
      __pyx_L13_unpacking_failed:;

#line 259 "re2.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 259 "re2.pyx"
      __pyx_t_9 = NULL;

#line 259 "re2.pyx"
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 259 "re2.pyx"
      __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
      __pyx_L14_unpacking_done:;

#line 259 "re2.pyx"
    }

#line 259 "re2.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_7);

#line 259 "re2.pyx"
    __pyx_t_7 = 0;

#line 259 "re2.pyx"
    __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_8);

#line 259 "re2.pyx"
    __pyx_t_8 = 0;

#line 259 "re2.pyx"
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_posdict, __pyx_v_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 259 "re2.pyx"
    __pyx_t_8 = __Pyx_PyDict_GetItem(__pyx_v_posdict, __pyx_v_y); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 259 "re2.pyx"
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 259 "re2.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 259 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);

#line 259 "re2.pyx"
    __Pyx_GIVEREF(__pyx_t_8);

#line 259 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);

#line 259 "re2.pyx"
    __pyx_t_2 = 0;

#line 259 "re2.pyx"
    __pyx_t_8 = 0;

#line 259 "re2.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 259, __pyx_L1_error)

#line 259 "re2.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 259 "re2.pyx"
  }

#line 259 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 259 "re2.pyx"
  __pyx_r = __pyx_t_5;

#line 259 "re2.pyx"
  __pyx_t_5 = 0;

#line 259 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":254
 *                     return new_positions
 * 
 *     def _convert_spans(self, spans):             # <<<<<<<<<<<<<<
 *         positions = [x for x,y in spans] + [y for x,y in spans]
 *         positions = sorted(set(positions))
 */

#line 254 "re2.pyx"


#line 254 "re2.pyx"
  /* function exit code */

#line 254 "re2.pyx"
  __pyx_L1_error:;

#line 254 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 254 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 254 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 254 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 254 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 254 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 254 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 254 "re2.pyx"
  __Pyx_AddTraceback("re2.Match._convert_spans", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 254 "re2.pyx"
  __pyx_r = NULL;

#line 254 "re2.pyx"
  __pyx_L0:;

#line 254 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_positions);

#line 254 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_posdict);

#line 254 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_x);

#line 254 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_y);

#line 254 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 254 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 254 "re2.pyx"
  return __pyx_r;

#line 254 "re2.pyx"
}

/* "re2.pyx":262
 * 
 * 
 *     cdef _make_spans(self):             # <<<<<<<<<<<<<<
 *         if self._spans is not None:
 *             return
 */

#line 262 "re2.pyx"


#line 262 "re2.pyx"
static PyObject *__pyx_f_3re2_5Match__make_spans(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  int __pyx_v_start
#line 262 "re2.pyx"
;
  int __pyx_v_end
#line 262 "re2.pyx"
;
  char *__pyx_v_s
#line 262 "re2.pyx"
;
  re2::StringPiece *__pyx_v_piece
#line 262 "re2.pyx"
;
  PyObject *__pyx_v_spans = NULL
#line 262 "re2.pyx"
;
  int __pyx_v_i
#line 262 "re2.pyx"
;

#line 262 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 262 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 262 "re2.pyx"
  int __pyx_t_1;

#line 262 "re2.pyx"
  int __pyx_t_2;

#line 262 "re2.pyx"
  char *__pyx_t_3;

#line 262 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 262 "re2.pyx"
  int __pyx_t_5;

#line 262 "re2.pyx"
  int __pyx_t_6;

#line 262 "re2.pyx"
  int __pyx_t_7;

#line 262 "re2.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 262 "re2.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 262 "re2.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 262 "re2.pyx"
  __Pyx_RefNannySetupContext("_make_spans", 0);

  /* "re2.pyx":263
 * 
 *     cdef _make_spans(self):
 *         if self._spans is not None:             # <<<<<<<<<<<<<<
 *             return
 * 
 */

#line 263 "re2.pyx"
  __pyx_t_1 = (__pyx_v_self->_spans != ((PyObject*)Py_None));

#line 263 "re2.pyx"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 263 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":264
 *     cdef _make_spans(self):
 *         if self._spans is not None:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         cdef int start, end
 */

#line 264 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 264 "re2.pyx"
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 264 "re2.pyx"
    goto __pyx_L0;

    /* "re2.pyx":263
 * 
 *     cdef _make_spans(self):
 *         if self._spans is not None:             # <<<<<<<<<<<<<<
 *             return
 * 
 */

#line 263 "re2.pyx"
  }

  /* "re2.pyx":267
 * 
 *         cdef int start, end
 *         cdef char * s = self.match_string             # <<<<<<<<<<<<<<
 *         cdef _re2.StringPiece * piece
 * 
 */

#line 267 "re2.pyx"
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_v_self->match_string); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 267, __pyx_L1_error)

#line 267 "re2.pyx"
  __pyx_v_s = __pyx_t_3;

  /* "re2.pyx":270
 *         cdef _re2.StringPiece * piece
 * 
 *         spans = []             # <<<<<<<<<<<<<<
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:
 */

#line 270 "re2.pyx"
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 270, __pyx_L1_error)

#line 270 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 270 "re2.pyx"
  __pyx_v_spans = __pyx_t_4;

#line 270 "re2.pyx"
  __pyx_t_4 = 0;

  /* "re2.pyx":271
 * 
 *         spans = []
 *         for i in range(self.nmatches):             # <<<<<<<<<<<<<<
 *             if self.matches[i].data() == NULL:
 *                 spans.append((-1, -1))
 */

#line 271 "re2.pyx"
  __pyx_t_5 = __pyx_v_self->nmatches;

#line 271 "re2.pyx"
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {

#line 271 "re2.pyx"
    __pyx_v_i = __pyx_t_6;

    /* "re2.pyx":272
 *         spans = []
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:             # <<<<<<<<<<<<<<
 *                 spans.append((-1, -1))
 *             else:
 */

#line 272 "re2.pyx"
    __pyx_t_2 = (((__pyx_v_self->matches[__pyx_v_i]).data() == NULL) != 0);

#line 272 "re2.pyx"
    if (__pyx_t_2) {

      /* "re2.pyx":273
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:
 *                 spans.append((-1, -1))             # <<<<<<<<<<<<<<
 *             else:
 *                 piece = &self.matches[i]
 */

#line 273 "re2.pyx"
      __pyx_t_7 = __Pyx_PyObject_Append(__pyx_v_spans, __pyx_tuple__3); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 273, __pyx_L1_error)

      /* "re2.pyx":272
 *         spans = []
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:             # <<<<<<<<<<<<<<
 *                 spans.append((-1, -1))
 *             else:
 */

#line 272 "re2.pyx"
      goto __pyx_L6;

#line 272 "re2.pyx"
    }

    /* "re2.pyx":275
 *                 spans.append((-1, -1))
 *             else:
 *                 piece = &self.matches[i]             # <<<<<<<<<<<<<<
 *                 if piece.data() == NULL:
 *                     return (-1, -1)
 */

#line 275 "re2.pyx"
    /*else*/ {

#line 275 "re2.pyx"
      __pyx_v_piece = (&(__pyx_v_self->matches[__pyx_v_i]));

      /* "re2.pyx":276
 *             else:
 *                 piece = &self.matches[i]
 *                 if piece.data() == NULL:             # <<<<<<<<<<<<<<
 *                     return (-1, -1)
 *                 start = piece.data() - s
 */

#line 276 "re2.pyx"
      __pyx_t_2 = ((__pyx_v_piece->data() == NULL) != 0);

#line 276 "re2.pyx"
      if (__pyx_t_2) {

        /* "re2.pyx":277
 *                 piece = &self.matches[i]
 *                 if piece.data() == NULL:
 *                     return (-1, -1)             # <<<<<<<<<<<<<<
 *                 start = piece.data() - s
 *                 end = start + piece.length()
 */

#line 277 "re2.pyx"
        __Pyx_XDECREF(__pyx_r);

#line 277 "re2.pyx"
        __Pyx_INCREF(__pyx_tuple__4);

#line 277 "re2.pyx"
        __pyx_r = __pyx_tuple__4;

#line 277 "re2.pyx"
        goto __pyx_L0;

        /* "re2.pyx":276
 *             else:
 *                 piece = &self.matches[i]
 *                 if piece.data() == NULL:             # <<<<<<<<<<<<<<
 *                     return (-1, -1)
 *                 start = piece.data() - s
 */

#line 276 "re2.pyx"
      }

      /* "re2.pyx":278
 *                 if piece.data() == NULL:
 *                     return (-1, -1)
 *                 start = piece.data() - s             # <<<<<<<<<<<<<<
 *                 end = start + piece.length()
 *                 spans.append((start, end))
 */

#line 278 "re2.pyx"
      __pyx_v_start = (__pyx_v_piece->data() - __pyx_v_s);

      /* "re2.pyx":279
 *                     return (-1, -1)
 *                 start = piece.data() - s
 *                 end = start + piece.length()             # <<<<<<<<<<<<<<
 *                 spans.append((start, end))
 * 
 */

#line 279 "re2.pyx"
      __pyx_v_end = (__pyx_v_start + __pyx_v_piece->length());

      /* "re2.pyx":280
 *                 start = piece.data() - s
 *                 end = start + piece.length()
 *                 spans.append((start, end))             # <<<<<<<<<<<<<<
 * 
 *         if self.encoded:
 */

#line 280 "re2.pyx"
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_start); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 280, __pyx_L1_error)

#line 280 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 280 "re2.pyx"
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_end); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 280, __pyx_L1_error)

#line 280 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 280 "re2.pyx"
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 280, __pyx_L1_error)

#line 280 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 280 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_4);

#line 280 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);

#line 280 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_8);

#line 280 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);

#line 280 "re2.pyx"
      __pyx_t_4 = 0;

#line 280 "re2.pyx"
      __pyx_t_8 = 0;

#line 280 "re2.pyx"
      __pyx_t_7 = __Pyx_PyObject_Append(__pyx_v_spans, __pyx_t_9); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 280, __pyx_L1_error)

#line 280 "re2.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 280 "re2.pyx"
    }

#line 280 "re2.pyx"
    __pyx_L6:;

#line 280 "re2.pyx"
  }

  /* "re2.pyx":282
 *                 spans.append((start, end))
 * 
 *         if self.encoded:             # <<<<<<<<<<<<<<
 *             spans = self._convert_spans(spans)
 * 
 */

#line 282 "re2.pyx"
  __pyx_t_2 = (__pyx_v_self->encoded != 0);

#line 282 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":283
 * 
 *         if self.encoded:
 *             spans = self._convert_spans(spans)             # <<<<<<<<<<<<<<
 * 
 *         self._spans = tuple(spans)
 */

#line 283 "re2.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_convert_spans); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 283, __pyx_L1_error)

#line 283 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 283 "re2.pyx"
    __pyx_t_4 = NULL;

#line 283 "re2.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {

#line 283 "re2.pyx"
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);

#line 283 "re2.pyx"
      if (likely(__pyx_t_4)) {

#line 283 "re2.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);

#line 283 "re2.pyx"
        __Pyx_INCREF(__pyx_t_4);

#line 283 "re2.pyx"
        __Pyx_INCREF(function);

#line 283 "re2.pyx"
        __Pyx_DECREF_SET(__pyx_t_8, function);

#line 283 "re2.pyx"
      }

#line 283 "re2.pyx"
    }

#line 283 "re2.pyx"
    if (!__pyx_t_4) {

#line 283 "re2.pyx"
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_spans); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 283, __pyx_L1_error)

#line 283 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 283 "re2.pyx"
    } else {

#line 283 "re2.pyx"
      #if CYTHON_FAST_PYCALL

#line 283 "re2.pyx"
      if (PyFunction_Check(__pyx_t_8)) {

#line 283 "re2.pyx"
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_spans};

#line 283 "re2.pyx"
        __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 283, __pyx_L1_error)

#line 283 "re2.pyx"
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 283 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 283 "re2.pyx"
      } else

#line 283 "re2.pyx"
      #endif

#line 283 "re2.pyx"
      #if CYTHON_FAST_PYCCALL

#line 283 "re2.pyx"
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {

#line 283 "re2.pyx"
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_spans};

#line 283 "re2.pyx"
        __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 283, __pyx_L1_error)

#line 283 "re2.pyx"
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 283 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 283 "re2.pyx"
      } else

#line 283 "re2.pyx"
      #endif

#line 283 "re2.pyx"
      {

#line 283 "re2.pyx"
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 283, __pyx_L1_error)

#line 283 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_10);

#line 283 "re2.pyx"
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 283 "re2.pyx"
        __Pyx_INCREF(__pyx_v_spans);

#line 283 "re2.pyx"
        __Pyx_GIVEREF(__pyx_v_spans);

#line 283 "re2.pyx"
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_spans);

#line 283 "re2.pyx"
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 283, __pyx_L1_error)

#line 283 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 283 "re2.pyx"
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 283 "re2.pyx"
      }

#line 283 "re2.pyx"
    }

#line 283 "re2.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 283 "re2.pyx"
    __Pyx_DECREF_SET(__pyx_v_spans, __pyx_t_9);

#line 283 "re2.pyx"
    __pyx_t_9 = 0;

    /* "re2.pyx":282
 *                 spans.append((start, end))
 * 
 *         if self.encoded:             # <<<<<<<<<<<<<<
 *             spans = self._convert_spans(spans)
 * 
 */

#line 282 "re2.pyx"
  }

  /* "re2.pyx":285
 *             spans = self._convert_spans(spans)
 * 
 *         self._spans = tuple(spans)             # <<<<<<<<<<<<<<
 * 
 *     property regs:
 */

#line 285 "re2.pyx"
  __pyx_t_9 = PySequence_Tuple(__pyx_v_spans); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 285, __pyx_L1_error)

#line 285 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 285 "re2.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 285 "re2.pyx"
  __Pyx_GOTREF(__pyx_v_self->_spans);

#line 285 "re2.pyx"
  __Pyx_DECREF(__pyx_v_self->_spans);

#line 285 "re2.pyx"
  __pyx_v_self->_spans = ((PyObject*)__pyx_t_9);

#line 285 "re2.pyx"
  __pyx_t_9 = 0;

  /* "re2.pyx":262
 * 
 * 
 *     cdef _make_spans(self):             # <<<<<<<<<<<<<<
 *         if self._spans is not None:
 *             return
 */

#line 262 "re2.pyx"


#line 262 "re2.pyx"
  /* function exit code */

#line 262 "re2.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 262 "re2.pyx"
  goto __pyx_L0;

#line 262 "re2.pyx"
  __pyx_L1_error:;

#line 262 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 262 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 262 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 262 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 262 "re2.pyx"
  __Pyx_AddTraceback("re2.Match._make_spans", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 262 "re2.pyx"
  __pyx_r = 0;

#line 262 "re2.pyx"
  __pyx_L0:;

#line 262 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_spans);

#line 262 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 262 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 262 "re2.pyx"
  return __pyx_r;

#line 262 "re2.pyx"
}

/* "re2.pyx":288
 * 
 *     property regs:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._spans is None:
 *                 self._make_spans()
 */

#line 288 "re2.pyx"


#line 288 "re2.pyx"
/* Python wrapper */

#line 288 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_4regs_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 288 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_4regs_1__get__(PyObject *__pyx_v_self) {

#line 288 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 288 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 288 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 288 "re2.pyx"
__pyx_pf_3re2_5Match_4regs___get__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

#line 288 "re2.pyx"


#line 288 "re2.pyx"
  /* function exit code */

#line 288 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 288 "re2.pyx"
  return __pyx_r;

#line 288 "re2.pyx"
}

#line 288 "re2.pyx"


#line 288 "re2.pyx"
static PyObject *__pyx_pf_3re2_5Match_4regs___get__(struct __pyx_obj_3re2_Match *__pyx_v_self) {

#line 288 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 288 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 288 "re2.pyx"
  int __pyx_t_1;

#line 288 "re2.pyx"
  int __pyx_t_2;

#line 288 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 288 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "re2.pyx":289
 *     property regs:
 *         def __get__(self):
 *             if self._spans is None:             # <<<<<<<<<<<<<<
 *                 self._make_spans()
 *             return self._spans
 */

#line 289 "re2.pyx"
  __pyx_t_1 = (__pyx_v_self->_spans == ((PyObject*)Py_None));

#line 289 "re2.pyx"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 289 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":290
 *         def __get__(self):
 *             if self._spans is None:
 *                 self._make_spans()             # <<<<<<<<<<<<<<
 *             return self._spans
 * 
 */

#line 290 "re2.pyx"
    __pyx_t_3 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_self->__pyx_vtab)->_make_spans(__pyx_v_self); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 290, __pyx_L1_error)

#line 290 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 290 "re2.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "re2.pyx":289
 *     property regs:
 *         def __get__(self):
 *             if self._spans is None:             # <<<<<<<<<<<<<<
 *                 self._make_spans()
 *             return self._spans
 */

#line 289 "re2.pyx"
  }

  /* "re2.pyx":291
 *             if self._spans is None:
 *                 self._make_spans()
 *             return self._spans             # <<<<<<<<<<<<<<
 * 
 *     def expand(self, object template):
 */

#line 291 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 291 "re2.pyx"
  __Pyx_INCREF(__pyx_v_self->_spans);

#line 291 "re2.pyx"
  __pyx_r = __pyx_v_self->_spans;

#line 291 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":288
 * 
 *     property regs:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._spans is None:
 *                 self._make_spans()
 */

#line 288 "re2.pyx"


#line 288 "re2.pyx"
  /* function exit code */

#line 288 "re2.pyx"
  __pyx_L1_error:;

#line 288 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 288 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.regs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 288 "re2.pyx"
  __pyx_r = NULL;

#line 288 "re2.pyx"
  __pyx_L0:;

#line 288 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 288 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 288 "re2.pyx"
  return __pyx_r;

#line 288 "re2.pyx"
}

/* "re2.pyx":293
 *             return self._spans
 * 
 *     def expand(self, object template):             # <<<<<<<<<<<<<<
 *         # TODO - This can be optimized to work a bit faster in C.
 *         # Expand a template with groups
 */

#line 293 "re2.pyx"


#line 293 "re2.pyx"
/* Python wrapper */

#line 293 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_11expand(PyObject *__pyx_v_self, PyObject *__pyx_v_template); /*proto*/

#line 293 "re2.pyx"
static char __pyx_doc_3re2_5Match_10expand[] = "File: re2.pyx (starting at line 293)";

#line 293 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_11expand(PyObject *__pyx_v_self, PyObject *__pyx_v_template) {

#line 293 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 293 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 293 "re2.pyx"
  __Pyx_RefNannySetupContext("expand (wrapper)", 0);
  __pyx_r = 
#line 293 "re2.pyx"
__pyx_pf_3re2_5Match_10expand(((struct __pyx_obj_3re2_Match *)__pyx_v_self), ((PyObject *)__pyx_v_template));

#line 293 "re2.pyx"


#line 293 "re2.pyx"
  /* function exit code */

#line 293 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 293 "re2.pyx"
  return __pyx_r;

#line 293 "re2.pyx"
}

#line 293 "re2.pyx"


#line 293 "re2.pyx"
static PyObject *__pyx_pf_3re2_5Match_10expand(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_template) {
  PyObject *__pyx_v_items = NULL
#line 293 "re2.pyx"
;
  PyObject *__pyx_v_i = NULL
#line 293 "re2.pyx"
;
  PyObject *__pyx_v_item = NULL
#line 293 "re2.pyx"
;
  PyObject *__pyx_v_name = NULL
#line 293 "re2.pyx"
;
  PyObject *__pyx_v_rest = NULL
#line 293 "re2.pyx"
;

#line 293 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 293 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 293 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 293 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 293 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 293 "re2.pyx"
  Py_ssize_t __pyx_t_4;

#line 293 "re2.pyx"
  PyObject *(*__pyx_t_5)(PyObject *);

#line 293 "re2.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 293 "re2.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 293 "re2.pyx"
  int __pyx_t_8;

#line 293 "re2.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 293 "re2.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 293 "re2.pyx"
  int __pyx_t_11;

#line 293 "re2.pyx"
  int __pyx_t_12;

#line 293 "re2.pyx"
  PyObject *(*__pyx_t_13)(PyObject *);

#line 293 "re2.pyx"
  __Pyx_RefNannySetupContext("expand", 0);

  /* "re2.pyx":296
 *         # TODO - This can be optimized to work a bit faster in C.
 *         # Expand a template with groups
 *         items = template.split('\\')             # <<<<<<<<<<<<<<
 *         for i, item in enumerate(items[1:]):
 *             if item[0].isdigit():
 */

#line 296 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_template, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)

#line 296 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 296 "re2.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 296, __pyx_L1_error)

#line 296 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 296 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 296 "re2.pyx"
  __pyx_v_items = __pyx_t_2;

#line 296 "re2.pyx"
  __pyx_t_2 = 0;

  /* "re2.pyx":297
 *         # Expand a template with groups
 *         items = template.split('\\')
 *         for i, item in enumerate(items[1:]):             # <<<<<<<<<<<<<<
 *             if item[0].isdigit():
 *                 # Number group
 */

#line 297 "re2.pyx"
  __Pyx_INCREF(__pyx_int_0);

#line 297 "re2.pyx"
  __pyx_t_2 = __pyx_int_0;

#line 297 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_items, 1, 0, NULL, NULL, &__pyx_slice__7, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)

#line 297 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 297 "re2.pyx"
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {

#line 297 "re2.pyx"
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;

#line 297 "re2.pyx"
    __pyx_t_5 = NULL;

#line 297 "re2.pyx"
  } else {
    __pyx_t_4 = -1; 
#line 297 "re2.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L1_error)

#line 297 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 297 "re2.pyx"
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L1_error)

#line 297 "re2.pyx"
  }

#line 297 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 297 "re2.pyx"
  for (;;) {

#line 297 "re2.pyx"
    if (likely(!__pyx_t_5)) {

#line 297 "re2.pyx"
      if (likely(PyList_CheckExact(__pyx_t_3))) {

#line 297 "re2.pyx"
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 297 "re2.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 297 "re2.pyx"
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 297, __pyx_L1_error)

#line 297 "re2.pyx"
        #else

#line 297 "re2.pyx"
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)

#line 297 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 297 "re2.pyx"
        #endif

#line 297 "re2.pyx"
      } else {

#line 297 "re2.pyx"
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 297 "re2.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 297 "re2.pyx"
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 297, __pyx_L1_error)

#line 297 "re2.pyx"
        #else

#line 297 "re2.pyx"
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)

#line 297 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 297 "re2.pyx"
        #endif

#line 297 "re2.pyx"
      }
    } else 
#line 297 "re2.pyx"
{

#line 297 "re2.pyx"
      __pyx_t_1 = __pyx_t_5(__pyx_t_3);

#line 297 "re2.pyx"
      if (unlikely(!__pyx_t_1)) {

#line 297 "re2.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 297 "re2.pyx"
        if (exc_type) {

#line 297 "re2.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 297 "re2.pyx"
          else __PYX_ERR(0, 297, __pyx_L1_error)

#line 297 "re2.pyx"
        }

#line 297 "re2.pyx"
        break;

#line 297 "re2.pyx"
      }

#line 297 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 297 "re2.pyx"
    }

#line 297 "re2.pyx"
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_1);

#line 297 "re2.pyx"
    __pyx_t_1 = 0;

#line 297 "re2.pyx"
    __Pyx_INCREF(__pyx_t_2);

#line 297 "re2.pyx"
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);

#line 297 "re2.pyx"
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)

#line 297 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 297 "re2.pyx"
    __Pyx_DECREF(__pyx_t_2);

#line 297 "re2.pyx"
    __pyx_t_2 = __pyx_t_1;

#line 297 "re2.pyx"
    __pyx_t_1 = 0;

    /* "re2.pyx":298
 *         items = template.split('\\')
 *         for i, item in enumerate(items[1:]):
 *             if item[0].isdigit():             # <<<<<<<<<<<<<<
 *                 # Number group
 *                 if item[0] == '0':
 */

#line 298 "re2.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 298, __pyx_L1_error)

#line 298 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 298 "re2.pyx"
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_isdigit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 298, __pyx_L1_error)

#line 298 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 298 "re2.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 298 "re2.pyx"
    __pyx_t_6 = NULL;

#line 298 "re2.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {

#line 298 "re2.pyx"
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);

#line 298 "re2.pyx"
      if (likely(__pyx_t_6)) {

#line 298 "re2.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 298 "re2.pyx"
        __Pyx_INCREF(__pyx_t_6);

#line 298 "re2.pyx"
        __Pyx_INCREF(function);

#line 298 "re2.pyx"
        __Pyx_DECREF_SET(__pyx_t_7, function);

#line 298 "re2.pyx"
      }

#line 298 "re2.pyx"
    }

#line 298 "re2.pyx"
    if (__pyx_t_6) {

#line 298 "re2.pyx"
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)

#line 298 "re2.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 298 "re2.pyx"
    } else {

#line 298 "re2.pyx"
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)

#line 298 "re2.pyx"
    }

#line 298 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 298 "re2.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 298 "re2.pyx"
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 298, __pyx_L1_error)

#line 298 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 298 "re2.pyx"
    if (__pyx_t_8) {

      /* "re2.pyx":300
 *             if item[0].isdigit():
 *                 # Number group
 *                 if item[0] == '0':             # <<<<<<<<<<<<<<
 *                     items[i + 1] = '\x00' + item[1:]
 *                 else:
 */

#line 300 "re2.pyx"
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)

#line 300 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 300 "re2.pyx"
      __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s_0, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 300, __pyx_L1_error)

#line 300 "re2.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 300 "re2.pyx"
      if (__pyx_t_8) {

        /* "re2.pyx":301
 *                 # Number group
 *                 if item[0] == '0':
 *                     items[i + 1] = '\x00' + item[1:]             # <<<<<<<<<<<<<<
 *                 else:
 *                     items[i + 1] = self.group(int(item[0])) + item[1:]
 */

#line 301 "re2.pyx"
        __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_item, 1, 0, NULL, NULL, &__pyx_slice__9, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)

#line 301 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 301 "re2.pyx"
        __pyx_t_7 = PyNumber_Add(__pyx_kp_s__8, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 301, __pyx_L1_error)

#line 301 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 301 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 301 "re2.pyx"
        __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)

#line 301 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 301 "re2.pyx"
        if (unlikely(PyObject_SetItem(__pyx_v_items, __pyx_t_1, __pyx_t_7) < 0)) __PYX_ERR(0, 301, __pyx_L1_error)

#line 301 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 301 "re2.pyx"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "re2.pyx":300
 *             if item[0].isdigit():
 *                 # Number group
 *                 if item[0] == '0':             # <<<<<<<<<<<<<<
 *                     items[i + 1] = '\x00' + item[1:]
 *                 else:
 */

#line 300 "re2.pyx"
        goto __pyx_L6;

#line 300 "re2.pyx"
      }

      /* "re2.pyx":303
 *                     items[i + 1] = '\x00' + item[1:]
 *                 else:
 *                     items[i + 1] = self.group(int(item[0])) + item[1:]             # <<<<<<<<<<<<<<
 *             elif item[:2] == 'g<' and '>' in item:
 *                 # This is a named group
 */

#line 303 "re2.pyx"
      /*else*/ {

#line 303 "re2.pyx"
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_group); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)

#line 303 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 303 "re2.pyx"
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_item, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 303, __pyx_L1_error)

#line 303 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 303 "re2.pyx"
        __pyx_t_9 = __Pyx_PyNumber_Int(__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 303, __pyx_L1_error)

#line 303 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 303 "re2.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 303 "re2.pyx"
        __pyx_t_6 = NULL;

#line 303 "re2.pyx"
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {

#line 303 "re2.pyx"
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);

#line 303 "re2.pyx"
          if (likely(__pyx_t_6)) {

#line 303 "re2.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 303 "re2.pyx"
            __Pyx_INCREF(__pyx_t_6);

#line 303 "re2.pyx"
            __Pyx_INCREF(function);

#line 303 "re2.pyx"
            __Pyx_DECREF_SET(__pyx_t_1, function);

#line 303 "re2.pyx"
          }

#line 303 "re2.pyx"
        }

#line 303 "re2.pyx"
        if (!__pyx_t_6) {

#line 303 "re2.pyx"
          __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 303, __pyx_L1_error)

#line 303 "re2.pyx"
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 303 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_7);

#line 303 "re2.pyx"
        } else {

#line 303 "re2.pyx"
          #if CYTHON_FAST_PYCALL

#line 303 "re2.pyx"
          if (PyFunction_Check(__pyx_t_1)) {

#line 303 "re2.pyx"
            PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_9};

#line 303 "re2.pyx"
            __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 303, __pyx_L1_error)

#line 303 "re2.pyx"
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 303 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_7);

#line 303 "re2.pyx"
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 303 "re2.pyx"
          } else

#line 303 "re2.pyx"
          #endif

#line 303 "re2.pyx"
          #if CYTHON_FAST_PYCCALL

#line 303 "re2.pyx"
          if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {

#line 303 "re2.pyx"
            PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_9};

#line 303 "re2.pyx"
            __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 303, __pyx_L1_error)

#line 303 "re2.pyx"
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 303 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_7);

#line 303 "re2.pyx"
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 303 "re2.pyx"
          } else

#line 303 "re2.pyx"
          #endif

#line 303 "re2.pyx"
          {

#line 303 "re2.pyx"
            __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 303, __pyx_L1_error)

#line 303 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_10);

#line 303 "re2.pyx"
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_6); __pyx_t_6 = NULL;

#line 303 "re2.pyx"
            __Pyx_GIVEREF(__pyx_t_9);

#line 303 "re2.pyx"
            PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_9);

#line 303 "re2.pyx"
            __pyx_t_9 = 0;

#line 303 "re2.pyx"
            __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 303, __pyx_L1_error)

#line 303 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_7);

#line 303 "re2.pyx"
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 303 "re2.pyx"
          }

#line 303 "re2.pyx"
        }

#line 303 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 303 "re2.pyx"
        __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_item, 1, 0, NULL, NULL, &__pyx_slice__10, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)

#line 303 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 303 "re2.pyx"
        __pyx_t_10 = PyNumber_Add(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 303, __pyx_L1_error)

#line 303 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_10);

#line 303 "re2.pyx"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 303 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 303 "re2.pyx"
        __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)

#line 303 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 303 "re2.pyx"
        if (unlikely(PyObject_SetItem(__pyx_v_items, __pyx_t_1, __pyx_t_10) < 0)) __PYX_ERR(0, 303, __pyx_L1_error)

#line 303 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 303 "re2.pyx"
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 303 "re2.pyx"
      }

#line 303 "re2.pyx"
      __pyx_L6:;

      /* "re2.pyx":298
 *         items = template.split('\\')
 *         for i, item in enumerate(items[1:]):
 *             if item[0].isdigit():             # <<<<<<<<<<<<<<
 *                 # Number group
 *                 if item[0] == '0':
 */

#line 298 "re2.pyx"
      goto __pyx_L5;

#line 298 "re2.pyx"
    }

    /* "re2.pyx":304
 *                 else:
 *                     items[i + 1] = self.group(int(item[0])) + item[1:]
 *             elif item[:2] == 'g<' and '>' in item:             # <<<<<<<<<<<<<<
 *                 # This is a named group
 *                 name, rest = item[2:].split('>', 1)
 */

#line 304 "re2.pyx"
    __pyx_t_10 = __Pyx_PyObject_GetSlice(__pyx_v_item, 0, 2, NULL, NULL, &__pyx_slice__11, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 304, __pyx_L1_error)

#line 304 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_10);

#line 304 "re2.pyx"
    __pyx_t_11 = (__Pyx_PyString_Equals(__pyx_t_10, __pyx_kp_s_g, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 304, __pyx_L1_error)

#line 304 "re2.pyx"
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 304 "re2.pyx"
    if (__pyx_t_11) {

#line 304 "re2.pyx"
    } else {

#line 304 "re2.pyx"
      __pyx_t_8 = __pyx_t_11;

#line 304 "re2.pyx"
      goto __pyx_L7_bool_binop_done;

#line 304 "re2.pyx"
    }

#line 304 "re2.pyx"
    __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s__12, __pyx_v_item, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 304, __pyx_L1_error)

#line 304 "re2.pyx"
    __pyx_t_12 = (__pyx_t_11 != 0);

#line 304 "re2.pyx"
    __pyx_t_8 = __pyx_t_12;

#line 304 "re2.pyx"
    __pyx_L7_bool_binop_done:;

#line 304 "re2.pyx"
    if (__pyx_t_8) {

      /* "re2.pyx":306
 *             elif item[:2] == 'g<' and '>' in item:
 *                 # This is a named group
 *                 name, rest = item[2:].split('>', 1)             # <<<<<<<<<<<<<<
 *                 items[i + 1] = self.group(name) + rest
 *             else:
 */

#line 306 "re2.pyx"
      __pyx_t_10 = __Pyx_PyObject_GetSlice(__pyx_v_item, 2, 0, NULL, NULL, &__pyx_slice__13, 1, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 306, __pyx_L1_error)

#line 306 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 306 "re2.pyx"
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 306, __pyx_L1_error)

#line 306 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 306 "re2.pyx"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 306 "re2.pyx"
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 306, __pyx_L1_error)

#line 306 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 306 "re2.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 306 "re2.pyx"
      if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {

#line 306 "re2.pyx"
        PyObject* sequence = __pyx_t_10;

#line 306 "re2.pyx"
        #if !CYTHON_COMPILING_IN_PYPY

#line 306 "re2.pyx"
        Py_ssize_t size = Py_SIZE(sequence);

#line 306 "re2.pyx"
        #else

#line 306 "re2.pyx"
        Py_ssize_t size = PySequence_Size(sequence);

#line 306 "re2.pyx"
        #endif

#line 306 "re2.pyx"
        if (unlikely(size != 2)) {

#line 306 "re2.pyx"
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 306 "re2.pyx"
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 306 "re2.pyx"
          __PYX_ERR(0, 306, __pyx_L1_error)

#line 306 "re2.pyx"
        }

#line 306 "re2.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 306 "re2.pyx"
        if (likely(PyTuple_CheckExact(sequence))) {

#line 306 "re2.pyx"
          __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 

#line 306 "re2.pyx"
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 

#line 306 "re2.pyx"
        } else {

#line 306 "re2.pyx"
          __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 

#line 306 "re2.pyx"
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 

#line 306 "re2.pyx"
        }

#line 306 "re2.pyx"
        __Pyx_INCREF(__pyx_t_1);

#line 306 "re2.pyx"
        __Pyx_INCREF(__pyx_t_7);

#line 306 "re2.pyx"
        #else

#line 306 "re2.pyx"
        __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 306, __pyx_L1_error)

#line 306 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 306 "re2.pyx"
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 306, __pyx_L1_error)

#line 306 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 306 "re2.pyx"
        #endif

#line 306 "re2.pyx"
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 306 "re2.pyx"
      } else {

#line 306 "re2.pyx"
        Py_ssize_t index = -1;

#line 306 "re2.pyx"
        __pyx_t_9 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 306, __pyx_L1_error)

#line 306 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 306 "re2.pyx"
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 306 "re2.pyx"
        __pyx_t_13 = Py_TYPE(__pyx_t_9)->tp_iternext;
        index = 0; __pyx_t_1 = __pyx_t_13(__pyx_t_9); if (unlikely(!__pyx_t_1)) 
#line 306 "re2.pyx"
goto __pyx_L9_unpacking_failed;

#line 306 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);
        index = 1; __pyx_t_7 = __pyx_t_13(__pyx_t_9); if (unlikely(!__pyx_t_7)) 
#line 306 "re2.pyx"
goto __pyx_L9_unpacking_failed;

#line 306 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 306 "re2.pyx"
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_9), 2) < 0) __PYX_ERR(0, 306, __pyx_L1_error)

#line 306 "re2.pyx"
        __pyx_t_13 = NULL;

#line 306 "re2.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 306 "re2.pyx"
        goto __pyx_L10_unpacking_done;

#line 306 "re2.pyx"
        __pyx_L9_unpacking_failed:;

#line 306 "re2.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 306 "re2.pyx"
        __pyx_t_13 = NULL;

#line 306 "re2.pyx"
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 306 "re2.pyx"
        __PYX_ERR(0, 306, __pyx_L1_error)

#line 306 "re2.pyx"
        __pyx_L10_unpacking_done:;

#line 306 "re2.pyx"
      }

#line 306 "re2.pyx"
      __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_1);

#line 306 "re2.pyx"
      __pyx_t_1 = 0;

#line 306 "re2.pyx"
      __Pyx_XDECREF_SET(__pyx_v_rest, __pyx_t_7);

#line 306 "re2.pyx"
      __pyx_t_7 = 0;

      /* "re2.pyx":307
 *                 # This is a named group
 *                 name, rest = item[2:].split('>', 1)
 *                 items[i + 1] = self.group(name) + rest             # <<<<<<<<<<<<<<
 *             else:
 *                 # This isn't a template at all
 */

#line 307 "re2.pyx"
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_group); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 307, __pyx_L1_error)

#line 307 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 307 "re2.pyx"
      __pyx_t_1 = NULL;

#line 307 "re2.pyx"
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {

#line 307 "re2.pyx"
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);

#line 307 "re2.pyx"
        if (likely(__pyx_t_1)) {

#line 307 "re2.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 307 "re2.pyx"
          __Pyx_INCREF(__pyx_t_1);

#line 307 "re2.pyx"
          __Pyx_INCREF(function);

#line 307 "re2.pyx"
          __Pyx_DECREF_SET(__pyx_t_7, function);

#line 307 "re2.pyx"
        }

#line 307 "re2.pyx"
      }

#line 307 "re2.pyx"
      if (!__pyx_t_1) {

#line 307 "re2.pyx"
        __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_name); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 307, __pyx_L1_error)

#line 307 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_10);

#line 307 "re2.pyx"
      } else {

#line 307 "re2.pyx"
        #if CYTHON_FAST_PYCALL

#line 307 "re2.pyx"
        if (PyFunction_Check(__pyx_t_7)) {

#line 307 "re2.pyx"
          PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_name};

#line 307 "re2.pyx"
          __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 307, __pyx_L1_error)

#line 307 "re2.pyx"
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 307 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_10);

#line 307 "re2.pyx"
        } else

#line 307 "re2.pyx"
        #endif

#line 307 "re2.pyx"
        #if CYTHON_FAST_PYCCALL

#line 307 "re2.pyx"
        if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {

#line 307 "re2.pyx"
          PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_name};

#line 307 "re2.pyx"
          __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 307, __pyx_L1_error)

#line 307 "re2.pyx"
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 307 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_10);

#line 307 "re2.pyx"
        } else

#line 307 "re2.pyx"
        #endif

#line 307 "re2.pyx"
        {

#line 307 "re2.pyx"
          __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 307, __pyx_L1_error)

#line 307 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 307 "re2.pyx"
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1); __pyx_t_1 = NULL;

#line 307 "re2.pyx"
          __Pyx_INCREF(__pyx_v_name);

#line 307 "re2.pyx"
          __Pyx_GIVEREF(__pyx_v_name);

#line 307 "re2.pyx"
          PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_name);

#line 307 "re2.pyx"
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 307, __pyx_L1_error)

#line 307 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_10);

#line 307 "re2.pyx"
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 307 "re2.pyx"
        }

#line 307 "re2.pyx"
      }

#line 307 "re2.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 307 "re2.pyx"
      __pyx_t_7 = PyNumber_Add(__pyx_t_10, __pyx_v_rest); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 307, __pyx_L1_error)

#line 307 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 307 "re2.pyx"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 307 "re2.pyx"
      __pyx_t_10 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 307, __pyx_L1_error)

#line 307 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 307 "re2.pyx"
      if (unlikely(PyObject_SetItem(__pyx_v_items, __pyx_t_10, __pyx_t_7) < 0)) __PYX_ERR(0, 307, __pyx_L1_error)

#line 307 "re2.pyx"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 307 "re2.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "re2.pyx":304
 *                 else:
 *                     items[i + 1] = self.group(int(item[0])) + item[1:]
 *             elif item[:2] == 'g<' and '>' in item:             # <<<<<<<<<<<<<<
 *                 # This is a named group
 *                 name, rest = item[2:].split('>', 1)
 */

#line 304 "re2.pyx"
      goto __pyx_L5;

#line 304 "re2.pyx"
    }

    /* "re2.pyx":310
 *             else:
 *                 # This isn't a template at all
 *                 items[i + 1] = '\\' + item             # <<<<<<<<<<<<<<
 *         return ''.join(items)
 * 
 */

#line 310 "re2.pyx"
    /*else*/ {

#line 310 "re2.pyx"
      __pyx_t_7 = PyNumber_Add(__pyx_kp_s__5, __pyx_v_item); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 310, __pyx_L1_error)

#line 310 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 310 "re2.pyx"
      __pyx_t_10 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 310, __pyx_L1_error)

#line 310 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 310 "re2.pyx"
      if (unlikely(PyObject_SetItem(__pyx_v_items, __pyx_t_10, __pyx_t_7) < 0)) __PYX_ERR(0, 310, __pyx_L1_error)

#line 310 "re2.pyx"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 310 "re2.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 310 "re2.pyx"
    }

#line 310 "re2.pyx"
    __pyx_L5:;

    /* "re2.pyx":297
 *         # Expand a template with groups
 *         items = template.split('\\')
 *         for i, item in enumerate(items[1:]):             # <<<<<<<<<<<<<<
 *             if item[0].isdigit():
 *                 # Number group
 */

#line 297 "re2.pyx"
  }

#line 297 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 297 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":311
 *                 # This isn't a template at all
 *                 items[i + 1] = '\\' + item
 *         return ''.join(items)             # <<<<<<<<<<<<<<
 * 
 *     def groupdict(self):
 */

#line 311 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 311 "re2.pyx"
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s__15, __pyx_v_items); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)

#line 311 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 311 "re2.pyx"
  __pyx_r = __pyx_t_2;

#line 311 "re2.pyx"
  __pyx_t_2 = 0;

#line 311 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":293
 *             return self._spans
 * 
 *     def expand(self, object template):             # <<<<<<<<<<<<<<
 *         # TODO - This can be optimized to work a bit faster in C.
 *         # Expand a template with groups
 */

#line 293 "re2.pyx"


#line 293 "re2.pyx"
  /* function exit code */

#line 293 "re2.pyx"
  __pyx_L1_error:;

#line 293 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 293 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 293 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 293 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 293 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 293 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 293 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 293 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.expand", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 293 "re2.pyx"
  __pyx_r = NULL;

#line 293 "re2.pyx"
  __pyx_L0:;

#line 293 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_items);

#line 293 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 293 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_item);

#line 293 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_name);

#line 293 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_rest);

#line 293 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 293 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 293 "re2.pyx"
  return __pyx_r;

#line 293 "re2.pyx"
}

/* "re2.pyx":313
 *         return ''.join(items)
 * 
 *     def groupdict(self):             # <<<<<<<<<<<<<<
 *         cdef _re2.stringintmapiterator it
 *         cdef dict result = {}
 */

#line 313 "re2.pyx"


#line 313 "re2.pyx"
/* Python wrapper */

#line 313 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_13groupdict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 313 "re2.pyx"
static char __pyx_doc_3re2_5Match_12groupdict[] = "File: re2.pyx (starting at line 313)";

#line 313 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_13groupdict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 313 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 313 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 313 "re2.pyx"
  __Pyx_RefNannySetupContext("groupdict (wrapper)", 0);
  __pyx_r = 
#line 313 "re2.pyx"
__pyx_pf_3re2_5Match_12groupdict(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

#line 313 "re2.pyx"


#line 313 "re2.pyx"
  /* function exit code */

#line 313 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 313 "re2.pyx"
  return __pyx_r;

#line 313 "re2.pyx"
}

#line 313 "re2.pyx"


#line 313 "re2.pyx"
static PyObject *__pyx_pf_3re2_5Match_12groupdict(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  std::map<std::string,int>::const_iterator __pyx_v_it
#line 313 "re2.pyx"
;
  PyObject *__pyx_v_result = 0
#line 313 "re2.pyx"
;
  PyObject *__pyx_v_indexes = 0
#line 313 "re2.pyx"
;

#line 313 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 313 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 313 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 313 "re2.pyx"
  int __pyx_t_2;

#line 313 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 313 "re2.pyx"
  int __pyx_t_4;

#line 313 "re2.pyx"
  __Pyx_RefNannySetupContext("groupdict", 0);

  /* "re2.pyx":315
 *     def groupdict(self):
 *         cdef _re2.stringintmapiterator it
 *         cdef dict result = {}             # <<<<<<<<<<<<<<
 *         cdef dict indexes = {}
 * 
 */

#line 315 "re2.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)

#line 315 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 315 "re2.pyx"
  __pyx_v_result = ((PyObject*)__pyx_t_1);

#line 315 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":316
 *         cdef _re2.stringintmapiterator it
 *         cdef dict result = {}
 *         cdef dict indexes = {}             # <<<<<<<<<<<<<<
 * 
 *         self.init_groups()
 */

#line 316 "re2.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 316, __pyx_L1_error)

#line 316 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 316 "re2.pyx"
  __pyx_v_indexes = ((PyObject*)__pyx_t_1);

#line 316 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":318
 *         cdef dict indexes = {}
 * 
 *         self.init_groups()             # <<<<<<<<<<<<<<
 * 
 *         if self._named_groups:
 */

#line 318 "re2.pyx"
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_self->__pyx_vtab)->init_groups(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)

#line 318 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 318 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":320
 *         self.init_groups()
 * 
 *         if self._named_groups:             # <<<<<<<<<<<<<<
 *             return self._named_groups
 * 
 */

#line 320 "re2.pyx"
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_self->_named_groups); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 320, __pyx_L1_error)

#line 320 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":321
 * 
 *         if self._named_groups:
 *             return self._named_groups             # <<<<<<<<<<<<<<
 * 
 *         self._named_groups = result
 */

#line 321 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 321 "re2.pyx"
    __Pyx_INCREF(__pyx_v_self->_named_groups);

#line 321 "re2.pyx"
    __pyx_r = __pyx_v_self->_named_groups;

#line 321 "re2.pyx"
    goto __pyx_L0;

    /* "re2.pyx":320
 *         self.init_groups()
 * 
 *         if self._named_groups:             # <<<<<<<<<<<<<<
 *             return self._named_groups
 * 
 */

#line 320 "re2.pyx"
  }

  /* "re2.pyx":323
 *             return self._named_groups
 * 
 *         self._named_groups = result             # <<<<<<<<<<<<<<
 *         it = self.named_groups.begin()
 *         while it != self.named_groups.end():
 */

#line 323 "re2.pyx"
  __Pyx_INCREF(__pyx_v_result);

#line 323 "re2.pyx"
  __Pyx_GIVEREF(__pyx_v_result);

#line 323 "re2.pyx"
  __Pyx_GOTREF(__pyx_v_self->_named_groups);

#line 323 "re2.pyx"
  __Pyx_DECREF(__pyx_v_self->_named_groups);

#line 323 "re2.pyx"
  __pyx_v_self->_named_groups = __pyx_v_result;

  /* "re2.pyx":324
 * 
 *         self._named_groups = result
 *         it = self.named_groups.begin()             # <<<<<<<<<<<<<<
 *         while it != self.named_groups.end():
 *             indexes[cpp_to_pystring(deref(it).first)] = deref(it).second
 */

#line 324 "re2.pyx"
  __pyx_v_it = __pyx_v_self->named_groups->begin();

  /* "re2.pyx":325
 *         self._named_groups = result
 *         it = self.named_groups.begin()
 *         while it != self.named_groups.end():             # <<<<<<<<<<<<<<
 *             indexes[cpp_to_pystring(deref(it).first)] = deref(it).second
 *             result[cpp_to_pystring(deref(it).first)] = self._groups[deref(it).second]
 */

#line 325 "re2.pyx"
  while (1) {

#line 325 "re2.pyx"
    __pyx_t_2 = ((__pyx_v_it != __pyx_v_self->named_groups->end()) != 0);

#line 325 "re2.pyx"
    if (!__pyx_t_2) break;

    /* "re2.pyx":326
 *         it = self.named_groups.begin()
 *         while it != self.named_groups.end():
 *             indexes[cpp_to_pystring(deref(it).first)] = deref(it).second             # <<<<<<<<<<<<<<
 *             result[cpp_to_pystring(deref(it).first)] = self._groups[deref(it).second]
 *             inc(it)
 */

#line 326 "re2.pyx"
    __pyx_t_1 = __Pyx_PyInt_From_int((*__pyx_v_it).second); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)

#line 326 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 326 "re2.pyx"
    __pyx_t_3 = __pyx_f_3re2_cpp_to_pystring((*__pyx_v_it).first); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 326, __pyx_L1_error)

#line 326 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 326 "re2.pyx"
    if (unlikely(PyDict_SetItem(__pyx_v_indexes, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(0, 326, __pyx_L1_error)

#line 326 "re2.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 326 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "re2.pyx":327
 *         while it != self.named_groups.end():
 *             indexes[cpp_to_pystring(deref(it).first)] = deref(it).second
 *             result[cpp_to_pystring(deref(it).first)] = self._groups[deref(it).second]             # <<<<<<<<<<<<<<
 *             inc(it)
 * 
 */

#line 327 "re2.pyx"
    if (unlikely(__pyx_v_self->_groups == Py_None)) {

#line 327 "re2.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 327 "re2.pyx"
      __PYX_ERR(0, 327, __pyx_L1_error)

#line 327 "re2.pyx"
    }

#line 327 "re2.pyx"
    __pyx_t_4 = (*__pyx_v_it).second;

#line 327 "re2.pyx"
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_self->_groups, __pyx_t_4, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)

#line 327 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 327 "re2.pyx"
    __pyx_t_3 = __pyx_f_3re2_cpp_to_pystring((*__pyx_v_it).first); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 327, __pyx_L1_error)

#line 327 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 327 "re2.pyx"
    if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(0, 327, __pyx_L1_error)

#line 327 "re2.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 327 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "re2.pyx":328
 *             indexes[cpp_to_pystring(deref(it).first)] = deref(it).second
 *             result[cpp_to_pystring(deref(it).first)] = self._groups[deref(it).second]
 *             inc(it)             # <<<<<<<<<<<<<<
 * 
 *         self._named_groups = result
 */

#line 328 "re2.pyx"
    (++__pyx_v_it);

#line 328 "re2.pyx"
  }

  /* "re2.pyx":330
 *             inc(it)
 * 
 *         self._named_groups = result             # <<<<<<<<<<<<<<
 *         self._named_indexes = indexes
 *         return result
 */

#line 330 "re2.pyx"
  __Pyx_INCREF(__pyx_v_result);

#line 330 "re2.pyx"
  __Pyx_GIVEREF(__pyx_v_result);

#line 330 "re2.pyx"
  __Pyx_GOTREF(__pyx_v_self->_named_groups);

#line 330 "re2.pyx"
  __Pyx_DECREF(__pyx_v_self->_named_groups);

#line 330 "re2.pyx"
  __pyx_v_self->_named_groups = __pyx_v_result;

  /* "re2.pyx":331
 * 
 *         self._named_groups = result
 *         self._named_indexes = indexes             # <<<<<<<<<<<<<<
 *         return result
 * 
 */

#line 331 "re2.pyx"
  __Pyx_INCREF(__pyx_v_indexes);

#line 331 "re2.pyx"
  __Pyx_GIVEREF(__pyx_v_indexes);

#line 331 "re2.pyx"
  __Pyx_GOTREF(__pyx_v_self->_named_indexes);

#line 331 "re2.pyx"
  __Pyx_DECREF(__pyx_v_self->_named_indexes);

#line 331 "re2.pyx"
  __pyx_v_self->_named_indexes = __pyx_v_indexes;

  /* "re2.pyx":332
 *         self._named_groups = result
 *         self._named_indexes = indexes
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def end(self, group=0):
 */

#line 332 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 332 "re2.pyx"
  __Pyx_INCREF(__pyx_v_result);

#line 332 "re2.pyx"
  __pyx_r = __pyx_v_result;

#line 332 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":313
 *         return ''.join(items)
 * 
 *     def groupdict(self):             # <<<<<<<<<<<<<<
 *         cdef _re2.stringintmapiterator it
 *         cdef dict result = {}
 */

#line 313 "re2.pyx"


#line 313 "re2.pyx"
  /* function exit code */

#line 313 "re2.pyx"
  __pyx_L1_error:;

#line 313 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 313 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 313 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.groupdict", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 313 "re2.pyx"
  __pyx_r = NULL;

#line 313 "re2.pyx"
  __pyx_L0:;

#line 313 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_result);

#line 313 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_indexes);

#line 313 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 313 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 313 "re2.pyx"
  return __pyx_r;

#line 313 "re2.pyx"
}

/* "re2.pyx":334
 *         return result
 * 
 *     def end(self, group=0):             # <<<<<<<<<<<<<<
 *         return self.span(group)[1]
 * 
 */

#line 334 "re2.pyx"


#line 334 "re2.pyx"
/* Python wrapper */

#line 334 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_15end(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 334 "re2.pyx"
static char __pyx_doc_3re2_5Match_14end[] = "File: re2.pyx (starting at line 334)";

#line 334 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_15end(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_group = 0
#line 334 "re2.pyx"
;

#line 334 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 334 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 334 "re2.pyx"
  __Pyx_RefNannySetupContext("end (wrapper)", 0);

#line 334 "re2.pyx"
  {

#line 334 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_group,0};

#line 334 "re2.pyx"
    PyObject* values[1] = {0};

#line 334 "re2.pyx"
    values[0] = ((PyObject *)__pyx_int_0);

#line 334 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 334 "re2.pyx"
      Py_ssize_t kw_args;

#line 334 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 334 "re2.pyx"
      switch (pos_args) {
        case  1: 
#line 334 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 334 "re2.pyx"
        case  0: break;
        default: 
#line 334 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 334 "re2.pyx"
      }

#line 334 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 334 "re2.pyx"
      switch (pos_args) {

#line 334 "re2.pyx"
        case  0:

#line 334 "re2.pyx"
        if (kw_args > 0) {

#line 334 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_group);

#line 334 "re2.pyx"
          if (value) { values[0] = value; kw_args--; }

#line 334 "re2.pyx"
        }

#line 334 "re2.pyx"
      }

#line 334 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 334 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "end") < 0)) __PYX_ERR(0, 334, __pyx_L3_error)

#line 334 "re2.pyx"
      }

#line 334 "re2.pyx"
    } else {

#line 334 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: 
#line 334 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: 
#line 334 "re2.pyx"
break;
        default: 
#line 334 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 334 "re2.pyx"
      }

#line 334 "re2.pyx"
    }

#line 334 "re2.pyx"
    __pyx_v_group = values[0];

#line 334 "re2.pyx"
  }

#line 334 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 334 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("end", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 334 "re2.pyx"
__PYX_ERR(0, 334, __pyx_L3_error)

#line 334 "re2.pyx"
  __pyx_L3_error:;

#line 334 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.end", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 334 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 334 "re2.pyx"
  return NULL;

#line 334 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 334 "re2.pyx"
__pyx_pf_3re2_5Match_14end(((struct __pyx_obj_3re2_Match *)__pyx_v_self), __pyx_v_group);

#line 334 "re2.pyx"


#line 334 "re2.pyx"
  /* function exit code */

#line 334 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 334 "re2.pyx"
  return __pyx_r;

#line 334 "re2.pyx"
}

#line 334 "re2.pyx"


#line 334 "re2.pyx"
static PyObject *__pyx_pf_3re2_5Match_14end(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_group) {

#line 334 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 334 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 334 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 334 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 334 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 334 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 334 "re2.pyx"
  __Pyx_RefNannySetupContext("end", 0);

  /* "re2.pyx":335
 * 
 *     def end(self, group=0):
 *         return self.span(group)[1]             # <<<<<<<<<<<<<<
 * 
 *     def start(self, group=0):
 */

#line 335 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 335 "re2.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_span); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)

#line 335 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 335 "re2.pyx"
  __pyx_t_3 = NULL;

#line 335 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 335 "re2.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 335 "re2.pyx"
    if (likely(__pyx_t_3)) {

#line 335 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 335 "re2.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 335 "re2.pyx"
      __Pyx_INCREF(function);

#line 335 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 335 "re2.pyx"
    }

#line 335 "re2.pyx"
  }

#line 335 "re2.pyx"
  if (!__pyx_t_3) {

#line 335 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_group); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)

#line 335 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 335 "re2.pyx"
  } else {

#line 335 "re2.pyx"
    #if CYTHON_FAST_PYCALL

#line 335 "re2.pyx"
    if (PyFunction_Check(__pyx_t_2)) {

#line 335 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_group};

#line 335 "re2.pyx"
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)

#line 335 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 335 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 335 "re2.pyx"
    } else

#line 335 "re2.pyx"
    #endif

#line 335 "re2.pyx"
    #if CYTHON_FAST_PYCCALL

#line 335 "re2.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {

#line 335 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_group};

#line 335 "re2.pyx"
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)

#line 335 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 335 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 335 "re2.pyx"
    } else

#line 335 "re2.pyx"
    #endif

#line 335 "re2.pyx"
    {

#line 335 "re2.pyx"
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 335, __pyx_L1_error)

#line 335 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 335 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;

#line 335 "re2.pyx"
      __Pyx_INCREF(__pyx_v_group);

#line 335 "re2.pyx"
      __Pyx_GIVEREF(__pyx_v_group);

#line 335 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_group);

#line 335 "re2.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)

#line 335 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 335 "re2.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 335 "re2.pyx"
    }

#line 335 "re2.pyx"
  }

#line 335 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 335 "re2.pyx"
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)

#line 335 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 335 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 335 "re2.pyx"
  __pyx_r = __pyx_t_2;

#line 335 "re2.pyx"
  __pyx_t_2 = 0;

#line 335 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":334
 *         return result
 * 
 *     def end(self, group=0):             # <<<<<<<<<<<<<<
 *         return self.span(group)[1]
 * 
 */

#line 334 "re2.pyx"


#line 334 "re2.pyx"
  /* function exit code */

#line 334 "re2.pyx"
  __pyx_L1_error:;

#line 334 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 334 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 334 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 334 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 334 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.end", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 334 "re2.pyx"
  __pyx_r = NULL;

#line 334 "re2.pyx"
  __pyx_L0:;

#line 334 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 334 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 334 "re2.pyx"
  return __pyx_r;

#line 334 "re2.pyx"
}

/* "re2.pyx":337
 *         return self.span(group)[1]
 * 
 *     def start(self, group=0):             # <<<<<<<<<<<<<<
 *         return self.span(group)[0]
 * 
 */

#line 337 "re2.pyx"


#line 337 "re2.pyx"
/* Python wrapper */

#line 337 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_17start(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 337 "re2.pyx"
static char __pyx_doc_3re2_5Match_16start[] = "File: re2.pyx (starting at line 337)";

#line 337 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_17start(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_group = 0
#line 337 "re2.pyx"
;

#line 337 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 337 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 337 "re2.pyx"
  __Pyx_RefNannySetupContext("start (wrapper)", 0);

#line 337 "re2.pyx"
  {

#line 337 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_group,0};

#line 337 "re2.pyx"
    PyObject* values[1] = {0};

#line 337 "re2.pyx"
    values[0] = ((PyObject *)__pyx_int_0);

#line 337 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 337 "re2.pyx"
      Py_ssize_t kw_args;

#line 337 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 337 "re2.pyx"
      switch (pos_args) {
        case  1: 
#line 337 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 337 "re2.pyx"
        case  0: break;
        default: 
#line 337 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 337 "re2.pyx"
      }

#line 337 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 337 "re2.pyx"
      switch (pos_args) {

#line 337 "re2.pyx"
        case  0:

#line 337 "re2.pyx"
        if (kw_args > 0) {

#line 337 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_group);

#line 337 "re2.pyx"
          if (value) { values[0] = value; kw_args--; }

#line 337 "re2.pyx"
        }

#line 337 "re2.pyx"
      }

#line 337 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 337 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "start") < 0)) __PYX_ERR(0, 337, __pyx_L3_error)

#line 337 "re2.pyx"
      }

#line 337 "re2.pyx"
    } else {

#line 337 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: 
#line 337 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: 
#line 337 "re2.pyx"
break;
        default: 
#line 337 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 337 "re2.pyx"
      }

#line 337 "re2.pyx"
    }

#line 337 "re2.pyx"
    __pyx_v_group = values[0];

#line 337 "re2.pyx"
  }

#line 337 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 337 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("start", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 337 "re2.pyx"
__PYX_ERR(0, 337, __pyx_L3_error)

#line 337 "re2.pyx"
  __pyx_L3_error:;

#line 337 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.start", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 337 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 337 "re2.pyx"
  return NULL;

#line 337 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 337 "re2.pyx"
__pyx_pf_3re2_5Match_16start(((struct __pyx_obj_3re2_Match *)__pyx_v_self), __pyx_v_group);

#line 337 "re2.pyx"


#line 337 "re2.pyx"
  /* function exit code */

#line 337 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 337 "re2.pyx"
  return __pyx_r;

#line 337 "re2.pyx"
}

#line 337 "re2.pyx"


#line 337 "re2.pyx"
static PyObject *__pyx_pf_3re2_5Match_16start(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_group) {

#line 337 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 337 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 337 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 337 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 337 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 337 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 337 "re2.pyx"
  __Pyx_RefNannySetupContext("start", 0);

  /* "re2.pyx":338
 * 
 *     def start(self, group=0):
 *         return self.span(group)[0]             # <<<<<<<<<<<<<<
 * 
 *     def span(self, group=0):
 */

#line 338 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 338 "re2.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_span); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)

#line 338 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 338 "re2.pyx"
  __pyx_t_3 = NULL;

#line 338 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 338 "re2.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 338 "re2.pyx"
    if (likely(__pyx_t_3)) {

#line 338 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 338 "re2.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 338 "re2.pyx"
      __Pyx_INCREF(function);

#line 338 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 338 "re2.pyx"
    }

#line 338 "re2.pyx"
  }

#line 338 "re2.pyx"
  if (!__pyx_t_3) {

#line 338 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_group); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)

#line 338 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 338 "re2.pyx"
  } else {

#line 338 "re2.pyx"
    #if CYTHON_FAST_PYCALL

#line 338 "re2.pyx"
    if (PyFunction_Check(__pyx_t_2)) {

#line 338 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_group};

#line 338 "re2.pyx"
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)

#line 338 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 338 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 338 "re2.pyx"
    } else

#line 338 "re2.pyx"
    #endif

#line 338 "re2.pyx"
    #if CYTHON_FAST_PYCCALL

#line 338 "re2.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {

#line 338 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_group};

#line 338 "re2.pyx"
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)

#line 338 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 338 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 338 "re2.pyx"
    } else

#line 338 "re2.pyx"
    #endif

#line 338 "re2.pyx"
    {

#line 338 "re2.pyx"
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 338, __pyx_L1_error)

#line 338 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 338 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;

#line 338 "re2.pyx"
      __Pyx_INCREF(__pyx_v_group);

#line 338 "re2.pyx"
      __Pyx_GIVEREF(__pyx_v_group);

#line 338 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_group);

#line 338 "re2.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)

#line 338 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 338 "re2.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 338 "re2.pyx"
    }

#line 338 "re2.pyx"
  }

#line 338 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 338 "re2.pyx"
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)

#line 338 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 338 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 338 "re2.pyx"
  __pyx_r = __pyx_t_2;

#line 338 "re2.pyx"
  __pyx_t_2 = 0;

#line 338 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":337
 *         return self.span(group)[1]
 * 
 *     def start(self, group=0):             # <<<<<<<<<<<<<<
 *         return self.span(group)[0]
 * 
 */

#line 337 "re2.pyx"


#line 337 "re2.pyx"
  /* function exit code */

#line 337 "re2.pyx"
  __pyx_L1_error:;

#line 337 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 337 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 337 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 337 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 337 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.start", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 337 "re2.pyx"
  __pyx_r = NULL;

#line 337 "re2.pyx"
  __pyx_L0:;

#line 337 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 337 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 337 "re2.pyx"
  return __pyx_r;

#line 337 "re2.pyx"
}

/* "re2.pyx":340
 *         return self.span(group)[0]
 * 
 *     def span(self, group=0):             # <<<<<<<<<<<<<<
 *         self._make_spans()
 *         if type(group) is int:
 */

#line 340 "re2.pyx"


#line 340 "re2.pyx"
/* Python wrapper */

#line 340 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_19span(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 340 "re2.pyx"
static char __pyx_doc_3re2_5Match_18span[] = "File: re2.pyx (starting at line 340)";

#line 340 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_19span(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_group = 0
#line 340 "re2.pyx"
;

#line 340 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 340 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 340 "re2.pyx"
  __Pyx_RefNannySetupContext("span (wrapper)", 0);

#line 340 "re2.pyx"
  {

#line 340 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_group,0};

#line 340 "re2.pyx"
    PyObject* values[1] = {0};

#line 340 "re2.pyx"
    values[0] = ((PyObject *)__pyx_int_0);

#line 340 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 340 "re2.pyx"
      Py_ssize_t kw_args;

#line 340 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 340 "re2.pyx"
      switch (pos_args) {
        case  1: 
#line 340 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 340 "re2.pyx"
        case  0: break;
        default: 
#line 340 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 340 "re2.pyx"
      }

#line 340 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 340 "re2.pyx"
      switch (pos_args) {

#line 340 "re2.pyx"
        case  0:

#line 340 "re2.pyx"
        if (kw_args > 0) {

#line 340 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_group);

#line 340 "re2.pyx"
          if (value) { values[0] = value; kw_args--; }

#line 340 "re2.pyx"
        }

#line 340 "re2.pyx"
      }

#line 340 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 340 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "span") < 0)) __PYX_ERR(0, 340, __pyx_L3_error)

#line 340 "re2.pyx"
      }

#line 340 "re2.pyx"
    } else {

#line 340 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: 
#line 340 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: 
#line 340 "re2.pyx"
break;
        default: 
#line 340 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 340 "re2.pyx"
      }

#line 340 "re2.pyx"
    }

#line 340 "re2.pyx"
    __pyx_v_group = values[0];

#line 340 "re2.pyx"
  }

#line 340 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 340 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("span", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 340 "re2.pyx"
__PYX_ERR(0, 340, __pyx_L3_error)

#line 340 "re2.pyx"
  __pyx_L3_error:;

#line 340 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.span", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 340 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 340 "re2.pyx"
  return NULL;

#line 340 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 340 "re2.pyx"
__pyx_pf_3re2_5Match_18span(((struct __pyx_obj_3re2_Match *)__pyx_v_self), __pyx_v_group);

#line 340 "re2.pyx"


#line 340 "re2.pyx"
  /* function exit code */

#line 340 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 340 "re2.pyx"
  return __pyx_r;

#line 340 "re2.pyx"
}

#line 340 "re2.pyx"


#line 340 "re2.pyx"
static PyObject *__pyx_pf_3re2_5Match_18span(struct __pyx_obj_3re2_Match *__pyx_v_self, PyObject *__pyx_v_group) {

#line 340 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 340 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 340 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 340 "re2.pyx"
  int __pyx_t_2;

#line 340 "re2.pyx"
  int __pyx_t_3;

#line 340 "re2.pyx"
  Py_ssize_t __pyx_t_4;

#line 340 "re2.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 340 "re2.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 340 "re2.pyx"
  __Pyx_RefNannySetupContext("span", 0);

  /* "re2.pyx":341
 * 
 *     def span(self, group=0):
 *         self._make_spans()             # <<<<<<<<<<<<<<
 *         if type(group) is int:
 *             if group > len(self._spans):
 */

#line 341 "re2.pyx"
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_self->__pyx_vtab)->_make_spans(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)

#line 341 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 341 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":342
 *     def span(self, group=0):
 *         self._make_spans()
 *         if type(group) is int:             # <<<<<<<<<<<<<<
 *             if group > len(self._spans):
 *                 raise IndexError("no such group")
 */

#line 342 "re2.pyx"
  __pyx_t_2 = (((PyObject *)Py_TYPE(__pyx_v_group)) == ((PyObject *)(&PyInt_Type)));

#line 342 "re2.pyx"
  __pyx_t_3 = (__pyx_t_2 != 0);

#line 342 "re2.pyx"
  if (__pyx_t_3) {

    /* "re2.pyx":343
 *         self._make_spans()
 *         if type(group) is int:
 *             if group > len(self._spans):             # <<<<<<<<<<<<<<
 *                 raise IndexError("no such group")
 *             return self._spans[group]
 */

#line 343 "re2.pyx"
    __pyx_t_1 = __pyx_v_self->_spans;

#line 343 "re2.pyx"
    __Pyx_INCREF(__pyx_t_1);

#line 343 "re2.pyx"
    if (unlikely(__pyx_t_1 == Py_None)) {

#line 343 "re2.pyx"
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");

#line 343 "re2.pyx"
      __PYX_ERR(0, 343, __pyx_L1_error)

#line 343 "re2.pyx"
    }

#line 343 "re2.pyx"
    __pyx_t_4 = PyTuple_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 343, __pyx_L1_error)

#line 343 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 343 "re2.pyx"
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)

#line 343 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 343 "re2.pyx"
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_group, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 343, __pyx_L1_error)

#line 343 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 343 "re2.pyx"
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 343, __pyx_L1_error)

#line 343 "re2.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 343 "re2.pyx"
    if (__pyx_t_3) {

      /* "re2.pyx":344
 *         if type(group) is int:
 *             if group > len(self._spans):
 *                 raise IndexError("no such group")             # <<<<<<<<<<<<<<
 *             return self._spans[group]
 *         else:
 */

#line 344 "re2.pyx"
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 344, __pyx_L1_error)

#line 344 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 344 "re2.pyx"
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);

#line 344 "re2.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 344 "re2.pyx"
      __PYX_ERR(0, 344, __pyx_L1_error)

      /* "re2.pyx":343
 *         self._make_spans()
 *         if type(group) is int:
 *             if group > len(self._spans):             # <<<<<<<<<<<<<<
 *                 raise IndexError("no such group")
 *             return self._spans[group]
 */

#line 343 "re2.pyx"
    }

    /* "re2.pyx":345
 *             if group > len(self._spans):
 *                 raise IndexError("no such group")
 *             return self._spans[group]             # <<<<<<<<<<<<<<
 *         else:
 *             self.groupdict()
 */

#line 345 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 345 "re2.pyx"
    if (unlikely(__pyx_v_self->_spans == Py_None)) {

#line 345 "re2.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 345 "re2.pyx"
      __PYX_ERR(0, 345, __pyx_L1_error)

#line 345 "re2.pyx"
    }

#line 345 "re2.pyx"
    __pyx_t_5 = PyObject_GetItem(__pyx_v_self->_spans, __pyx_v_group); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 345, __pyx_L1_error)

#line 345 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 345 "re2.pyx"
    __pyx_r = __pyx_t_5;

#line 345 "re2.pyx"
    __pyx_t_5 = 0;

#line 345 "re2.pyx"
    goto __pyx_L0;

    /* "re2.pyx":342
 *     def span(self, group=0):
 *         self._make_spans()
 *         if type(group) is int:             # <<<<<<<<<<<<<<
 *             if group > len(self._spans):
 *                 raise IndexError("no such group")
 */

#line 342 "re2.pyx"
  }

  /* "re2.pyx":347
 *             return self._spans[group]
 *         else:
 *             self.groupdict()             # <<<<<<<<<<<<<<
 *             if group not in self._named_indexes:
 *                 raise IndexError("no such group")
 */

#line 347 "re2.pyx"
  /*else*/ {

#line 347 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_groupdict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)

#line 347 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 347 "re2.pyx"
    __pyx_t_6 = NULL;

#line 347 "re2.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {

#line 347 "re2.pyx"
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);

#line 347 "re2.pyx"
      if (likely(__pyx_t_6)) {

#line 347 "re2.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 347 "re2.pyx"
        __Pyx_INCREF(__pyx_t_6);

#line 347 "re2.pyx"
        __Pyx_INCREF(function);

#line 347 "re2.pyx"
        __Pyx_DECREF_SET(__pyx_t_1, function);

#line 347 "re2.pyx"
      }

#line 347 "re2.pyx"
    }

#line 347 "re2.pyx"
    if (__pyx_t_6) {

#line 347 "re2.pyx"
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 347, __pyx_L1_error)

#line 347 "re2.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 347 "re2.pyx"
    } else {

#line 347 "re2.pyx"
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 347, __pyx_L1_error)

#line 347 "re2.pyx"
    }

#line 347 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 347 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 347 "re2.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "re2.pyx":348
 *         else:
 *             self.groupdict()
 *             if group not in self._named_indexes:             # <<<<<<<<<<<<<<
 *                 raise IndexError("no such group")
 *             return self._spans[self._named_indexes[group]]
 */

#line 348 "re2.pyx"
    if (unlikely(__pyx_v_self->_named_indexes == Py_None)) {

#line 348 "re2.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");

#line 348 "re2.pyx"
      __PYX_ERR(0, 348, __pyx_L1_error)

#line 348 "re2.pyx"
    }

#line 348 "re2.pyx"
    __pyx_t_3 = (__Pyx_PyDict_ContainsTF(__pyx_v_group, __pyx_v_self->_named_indexes, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 348, __pyx_L1_error)

#line 348 "re2.pyx"
    __pyx_t_2 = (__pyx_t_3 != 0);

#line 348 "re2.pyx"
    if (__pyx_t_2) {

      /* "re2.pyx":349
 *             self.groupdict()
 *             if group not in self._named_indexes:
 *                 raise IndexError("no such group")             # <<<<<<<<<<<<<<
 *             return self._spans[self._named_indexes[group]]
 * 
 */

#line 349 "re2.pyx"
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 349, __pyx_L1_error)

#line 349 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 349 "re2.pyx"
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);

#line 349 "re2.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 349 "re2.pyx"
      __PYX_ERR(0, 349, __pyx_L1_error)

      /* "re2.pyx":348
 *         else:
 *             self.groupdict()
 *             if group not in self._named_indexes:             # <<<<<<<<<<<<<<
 *                 raise IndexError("no such group")
 *             return self._spans[self._named_indexes[group]]
 */

#line 348 "re2.pyx"
    }

    /* "re2.pyx":350
 *             if group not in self._named_indexes:
 *                 raise IndexError("no such group")
 *             return self._spans[self._named_indexes[group]]             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 350 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 350 "re2.pyx"
    if (unlikely(__pyx_v_self->_spans == Py_None)) {

#line 350 "re2.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 350 "re2.pyx"
      __PYX_ERR(0, 350, __pyx_L1_error)

#line 350 "re2.pyx"
    }

#line 350 "re2.pyx"
    if (unlikely(__pyx_v_self->_named_indexes == Py_None)) {

#line 350 "re2.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 350 "re2.pyx"
      __PYX_ERR(0, 350, __pyx_L1_error)

#line 350 "re2.pyx"
    }

#line 350 "re2.pyx"
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->_named_indexes, __pyx_v_group); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 350, __pyx_L1_error)

#line 350 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 350 "re2.pyx"
    __pyx_t_1 = PyObject_GetItem(__pyx_v_self->_spans, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)

#line 350 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 350 "re2.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 350 "re2.pyx"
    __pyx_r = __pyx_t_1;

#line 350 "re2.pyx"
    __pyx_t_1 = 0;

#line 350 "re2.pyx"
    goto __pyx_L0;

#line 350 "re2.pyx"
  }

  /* "re2.pyx":340
 *         return self.span(group)[0]
 * 
 *     def span(self, group=0):             # <<<<<<<<<<<<<<
 *         self._make_spans()
 *         if type(group) is int:
 */

#line 340 "re2.pyx"


#line 340 "re2.pyx"
  /* function exit code */

#line 340 "re2.pyx"
  __pyx_L1_error:;

#line 340 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 340 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 340 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 340 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.span", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 340 "re2.pyx"
  __pyx_r = NULL;

#line 340 "re2.pyx"
  __pyx_L0:;

#line 340 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 340 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 340 "re2.pyx"
  return __pyx_r;

#line 340 "re2.pyx"
}

/* "re2.pyx":354
 * 
 *     property lastindex:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.init_groups()
 *             if self._lastindex < 1:
 */

#line 354 "re2.pyx"


#line 354 "re2.pyx"
/* Python wrapper */

#line 354 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_9lastindex_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 354 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_9lastindex_1__get__(PyObject *__pyx_v_self) {

#line 354 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 354 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 354 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 354 "re2.pyx"
__pyx_pf_3re2_5Match_9lastindex___get__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

#line 354 "re2.pyx"


#line 354 "re2.pyx"
  /* function exit code */

#line 354 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 354 "re2.pyx"
  return __pyx_r;

#line 354 "re2.pyx"
}

#line 354 "re2.pyx"


#line 354 "re2.pyx"
static PyObject *__pyx_pf_3re2_5Match_9lastindex___get__(struct __pyx_obj_3re2_Match *__pyx_v_self) {

#line 354 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 354 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 354 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 354 "re2.pyx"
  int __pyx_t_2;

#line 354 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "re2.pyx":355
 *     property lastindex:
 *         def __get__(self):
 *             self.init_groups()             # <<<<<<<<<<<<<<
 *             if self._lastindex < 1:
 *                 return None
 */

#line 355 "re2.pyx"
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_self->__pyx_vtab)->init_groups(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)

#line 355 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 355 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":356
 *         def __get__(self):
 *             self.init_groups()
 *             if self._lastindex < 1:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */

#line 356 "re2.pyx"
  __pyx_t_2 = ((__pyx_v_self->_lastindex < 1) != 0);

#line 356 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":357
 *             self.init_groups()
 *             if self._lastindex < 1:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return self._lastindex
 */

#line 357 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 357 "re2.pyx"
    __Pyx_INCREF(Py_None);

#line 357 "re2.pyx"
    __pyx_r = Py_None;

#line 357 "re2.pyx"
    goto __pyx_L0;

    /* "re2.pyx":356
 *         def __get__(self):
 *             self.init_groups()
 *             if self._lastindex < 1:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */

#line 356 "re2.pyx"
  }

  /* "re2.pyx":359
 *                 return None
 *             else:
 *                 return self._lastindex             # <<<<<<<<<<<<<<
 * 
 *     property lastgroup:
 */

#line 359 "re2.pyx"
  /*else*/ {

#line 359 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 359 "re2.pyx"
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_lastindex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)

#line 359 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 359 "re2.pyx"
    __pyx_r = __pyx_t_1;

#line 359 "re2.pyx"
    __pyx_t_1 = 0;

#line 359 "re2.pyx"
    goto __pyx_L0;

#line 359 "re2.pyx"
  }

  /* "re2.pyx":354
 * 
 *     property lastindex:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.init_groups()
 *             if self._lastindex < 1:
 */

#line 354 "re2.pyx"


#line 354 "re2.pyx"
  /* function exit code */

#line 354 "re2.pyx"
  __pyx_L1_error:;

#line 354 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 354 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.lastindex.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 354 "re2.pyx"
  __pyx_r = NULL;

#line 354 "re2.pyx"
  __pyx_L0:;

#line 354 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 354 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 354 "re2.pyx"
  return __pyx_r;

#line 354 "re2.pyx"
}

/* "re2.pyx":362
 * 
 *     property lastgroup:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.init_groups()
 *             cdef _re2.stringintmapiterator it
 */

#line 362 "re2.pyx"


#line 362 "re2.pyx"
/* Python wrapper */

#line 362 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_9lastgroup_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 362 "re2.pyx"
static PyObject *__pyx_pw_3re2_5Match_9lastgroup_1__get__(PyObject *__pyx_v_self) {

#line 362 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 362 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 362 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 362 "re2.pyx"
__pyx_pf_3re2_5Match_9lastgroup___get__(((struct __pyx_obj_3re2_Match *)__pyx_v_self));

#line 362 "re2.pyx"


#line 362 "re2.pyx"
  /* function exit code */

#line 362 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 362 "re2.pyx"
  return __pyx_r;

#line 362 "re2.pyx"
}

#line 362 "re2.pyx"


#line 362 "re2.pyx"
static PyObject *__pyx_pf_3re2_5Match_9lastgroup___get__(struct __pyx_obj_3re2_Match *__pyx_v_self) {
  std::map<std::string,int>::const_iterator __pyx_v_it
#line 362 "re2.pyx"
;

#line 362 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 362 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 362 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 362 "re2.pyx"
  int __pyx_t_2;

#line 362 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "re2.pyx":363
 *     property lastgroup:
 *         def __get__(self):
 *             self.init_groups()             # <<<<<<<<<<<<<<
 *             cdef _re2.stringintmapiterator it
 * 
 */

#line 363 "re2.pyx"
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Match *)__pyx_v_self->__pyx_vtab)->init_groups(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)

#line 363 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 363 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":366
 *             cdef _re2.stringintmapiterator it
 * 
 *             if self._lastindex < 1:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */

#line 366 "re2.pyx"
  __pyx_t_2 = ((__pyx_v_self->_lastindex < 1) != 0);

#line 366 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":367
 * 
 *             if self._lastindex < 1:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *             it = self.named_groups.begin()
 */

#line 367 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 367 "re2.pyx"
    __Pyx_INCREF(Py_None);

#line 367 "re2.pyx"
    __pyx_r = Py_None;

#line 367 "re2.pyx"
    goto __pyx_L0;

    /* "re2.pyx":366
 *             cdef _re2.stringintmapiterator it
 * 
 *             if self._lastindex < 1:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */

#line 366 "re2.pyx"
  }

  /* "re2.pyx":369
 *                 return None
 * 
 *             it = self.named_groups.begin()             # <<<<<<<<<<<<<<
 *             while it != self.named_groups.end():
 *                 if deref(it).second == self._lastindex:
 */

#line 369 "re2.pyx"
  __pyx_v_it = __pyx_v_self->named_groups->begin();

  /* "re2.pyx":370
 * 
 *             it = self.named_groups.begin()
 *             while it != self.named_groups.end():             # <<<<<<<<<<<<<<
 *                 if deref(it).second == self._lastindex:
 *                     return cpp_to_pystring(deref(it).first)
 */

#line 370 "re2.pyx"
  while (1) {

#line 370 "re2.pyx"
    __pyx_t_2 = ((__pyx_v_it != __pyx_v_self->named_groups->end()) != 0);

#line 370 "re2.pyx"
    if (!__pyx_t_2) break;

    /* "re2.pyx":371
 *             it = self.named_groups.begin()
 *             while it != self.named_groups.end():
 *                 if deref(it).second == self._lastindex:             # <<<<<<<<<<<<<<
 *                     return cpp_to_pystring(deref(it).first)
 *                 inc(it)
 */

#line 371 "re2.pyx"
    __pyx_t_2 = (((*__pyx_v_it).second == __pyx_v_self->_lastindex) != 0);

#line 371 "re2.pyx"
    if (__pyx_t_2) {

      /* "re2.pyx":372
 *             while it != self.named_groups.end():
 *                 if deref(it).second == self._lastindex:
 *                     return cpp_to_pystring(deref(it).first)             # <<<<<<<<<<<<<<
 *                 inc(it)
 * 
 */

#line 372 "re2.pyx"
      __Pyx_XDECREF(__pyx_r);

#line 372 "re2.pyx"
      __pyx_t_1 = __pyx_f_3re2_cpp_to_pystring((*__pyx_v_it).first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)

#line 372 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 372 "re2.pyx"
      __pyx_r = __pyx_t_1;

#line 372 "re2.pyx"
      __pyx_t_1 = 0;

#line 372 "re2.pyx"
      goto __pyx_L0;

      /* "re2.pyx":371
 *             it = self.named_groups.begin()
 *             while it != self.named_groups.end():
 *                 if deref(it).second == self._lastindex:             # <<<<<<<<<<<<<<
 *                     return cpp_to_pystring(deref(it).first)
 *                 inc(it)
 */

#line 371 "re2.pyx"
    }

    /* "re2.pyx":373
 *                 if deref(it).second == self._lastindex:
 *                     return cpp_to_pystring(deref(it).first)
 *                 inc(it)             # <<<<<<<<<<<<<<
 * 
 *             return None
 */

#line 373 "re2.pyx"
    (++__pyx_v_it);

#line 373 "re2.pyx"
  }

  /* "re2.pyx":375
 *                 inc(it)
 * 
 *             return None             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 375 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 375 "re2.pyx"
  __Pyx_INCREF(Py_None);

#line 375 "re2.pyx"
  __pyx_r = Py_None;

#line 375 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":362
 * 
 *     property lastgroup:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.init_groups()
 *             cdef _re2.stringintmapiterator it
 */

#line 362 "re2.pyx"


#line 362 "re2.pyx"
  /* function exit code */

#line 362 "re2.pyx"
  __pyx_L1_error:;

#line 362 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 362 "re2.pyx"
  __Pyx_AddTraceback("re2.Match.lastgroup.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 362 "re2.pyx"
  __pyx_r = NULL;

#line 362 "re2.pyx"
  __pyx_L0:;

#line 362 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 362 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 362 "re2.pyx"
  return __pyx_r;

#line 362 "re2.pyx"
}

/* "re2.pyx":387
 * 
 *     property flags:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._flags
 * 
 */

#line 387 "re2.pyx"


#line 387 "re2.pyx"
/* Python wrapper */

#line 387 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_5flags_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 387 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_5flags_1__get__(PyObject *__pyx_v_self) {

#line 387 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 387 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 387 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 387 "re2.pyx"
__pyx_pf_3re2_7Pattern_5flags___get__(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self));

#line 387 "re2.pyx"


#line 387 "re2.pyx"
  /* function exit code */

#line 387 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 387 "re2.pyx"
  return __pyx_r;

#line 387 "re2.pyx"
}

#line 387 "re2.pyx"


#line 387 "re2.pyx"
static PyObject *__pyx_pf_3re2_7Pattern_5flags___get__(struct __pyx_obj_3re2_Pattern *__pyx_v_self) {

#line 387 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 387 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 387 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 387 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "re2.pyx":388
 *     property flags:
 *         def __get__(self):
 *             return self._flags             # <<<<<<<<<<<<<<
 * 
 *     property groups:
 */

#line 388 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 388 "re2.pyx"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)

#line 388 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 388 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 388 "re2.pyx"
  __pyx_t_1 = 0;

#line 388 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":387
 * 
 *     property flags:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._flags
 * 
 */

#line 387 "re2.pyx"


#line 387 "re2.pyx"
  /* function exit code */

#line 387 "re2.pyx"
  __pyx_L1_error:;

#line 387 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 387 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern.flags.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 387 "re2.pyx"
  __pyx_r = NULL;

#line 387 "re2.pyx"
  __pyx_L0:;

#line 387 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 387 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 387 "re2.pyx"
  return __pyx_r;

#line 387 "re2.pyx"
}

/* "re2.pyx":391
 * 
 *     property groups:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ngroups
 * 
 */

#line 391 "re2.pyx"


#line 391 "re2.pyx"
/* Python wrapper */

#line 391 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_6groups_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 391 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_6groups_1__get__(PyObject *__pyx_v_self) {

#line 391 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 391 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 391 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 391 "re2.pyx"
__pyx_pf_3re2_7Pattern_6groups___get__(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self));

#line 391 "re2.pyx"


#line 391 "re2.pyx"
  /* function exit code */

#line 391 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 391 "re2.pyx"
  return __pyx_r;

#line 391 "re2.pyx"
}

#line 391 "re2.pyx"


#line 391 "re2.pyx"
static PyObject *__pyx_pf_3re2_7Pattern_6groups___get__(struct __pyx_obj_3re2_Pattern *__pyx_v_self) {

#line 391 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 391 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 391 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 391 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "re2.pyx":392
 *     property groups:
 *         def __get__(self):
 *             return self.ngroups             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */

#line 392 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 392 "re2.pyx"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->ngroups); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)

#line 392 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 392 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 392 "re2.pyx"
  __pyx_t_1 = 0;

#line 392 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":391
 * 
 *     property groups:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ngroups
 * 
 */

#line 391 "re2.pyx"


#line 391 "re2.pyx"
  /* function exit code */

#line 391 "re2.pyx"
  __pyx_L1_error:;

#line 391 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 391 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern.groups.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 391 "re2.pyx"
  __pyx_r = NULL;

#line 391 "re2.pyx"
  __pyx_L0:;

#line 391 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 391 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 391 "re2.pyx"
  return __pyx_r;

#line 391 "re2.pyx"
}

/* "re2.pyx":394
 *             return self.ngroups
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.re_pattern
 * 
 */

#line 394 "re2.pyx"


#line 394 "re2.pyx"
/* Python wrapper */

#line 394 "re2.pyx"
static void __pyx_pw_3re2_7Pattern_1__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 394 "re2.pyx"
static void __pyx_pw_3re2_7Pattern_1__dealloc__(PyObject *__pyx_v_self) {

#line 394 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 394 "re2.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 394 "re2.pyx"
  __pyx_pf_3re2_7Pattern___dealloc__(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self));

#line 394 "re2.pyx"


#line 394 "re2.pyx"
  /* function exit code */

#line 394 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 394 "re2.pyx"
}

#line 394 "re2.pyx"


#line 394 "re2.pyx"
static void __pyx_pf_3re2_7Pattern___dealloc__(struct __pyx_obj_3re2_Pattern *__pyx_v_self) {

#line 394 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 394 "re2.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "re2.pyx":395
 * 
 *     def __dealloc__(self):
 *         del self.re_pattern             # <<<<<<<<<<<<<<
 * 
 *     cdef _search(self, string, int pos, int endpos, _re2.re2_Anchor anchoring):
 */

#line 395 "re2.pyx"
  delete __pyx_v_self->re_pattern;

  /* "re2.pyx":394
 *             return self.ngroups
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.re_pattern
 * 
 */

#line 394 "re2.pyx"


#line 394 "re2.pyx"
  /* function exit code */

#line 394 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 394 "re2.pyx"
}

/* "re2.pyx":397
 *         del self.re_pattern
 * 
 *     cdef _search(self, string, int pos, int endpos, _re2.re2_Anchor anchoring):             # <<<<<<<<<<<<<<
 *         """
 *         Scan through string looking for a match, and return a corresponding
 */

#line 397 "re2.pyx"


#line 397 "re2.pyx"
static PyObject *__pyx_f_3re2_7Pattern__search(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos, RE2::Anchor __pyx_v_anchoring) {
  Py_ssize_t __pyx_v_size
#line 397 "re2.pyx"
;
  int __pyx_v_result
#line 397 "re2.pyx"
;
  char *__pyx_v_cstring
#line 397 "re2.pyx"
;
  int __pyx_v_encoded
#line 397 "re2.pyx"
;
  re2::StringPiece *__pyx_v_sp
#line 397 "re2.pyx"
;
  struct __pyx_obj_3re2_Match *__pyx_v_m = 0
#line 397 "re2.pyx"
;

#line 397 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 397 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 397 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 397 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 397 "re2.pyx"
  int __pyx_t_3;

#line 397 "re2.pyx"
  int __pyx_t_4;

#line 397 "re2.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 397 "re2.pyx"
  Py_ssize_t __pyx_t_6;

#line 397 "re2.pyx"
  __Pyx_RefNannySetupContext("_search", 0);

#line 397 "re2.pyx"
  __Pyx_INCREF(__pyx_v_string);

  /* "re2.pyx":405
 *         cdef int result
 *         cdef char * cstring
 *         cdef int encoded = 0             # <<<<<<<<<<<<<<
 *         cdef _re2.StringPiece * sp
 *         cdef Match m = Match(self, self.ngroups + 1)
 */

#line 405 "re2.pyx"
  __pyx_v_encoded = 0;

  /* "re2.pyx":407
 *         cdef int encoded = 0
 *         cdef _re2.StringPiece * sp
 *         cdef Match m = Match(self, self.ngroups + 1)             # <<<<<<<<<<<<<<
 * 
 *         if hasattr(string, 'tostring'):
 */

#line 407 "re2.pyx"
  __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_self->ngroups + 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)

#line 407 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 407 "re2.pyx"
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 407, __pyx_L1_error)

#line 407 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 407 "re2.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_self));

#line 407 "re2.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));

#line 407 "re2.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));

#line 407 "re2.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 407 "re2.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);

#line 407 "re2.pyx"
  __pyx_t_1 = 0;

#line 407 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3re2_Match), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)

#line 407 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 407 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 407 "re2.pyx"
  __pyx_v_m = ((struct __pyx_obj_3re2_Match *)__pyx_t_1);

#line 407 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":409
 *         cdef Match m = Match(self, self.ngroups + 1)
 * 
 *         if hasattr(string, 'tostring'):             # <<<<<<<<<<<<<<
 *             string = string.tostring()
 * 
 */

#line 409 "re2.pyx"
  __pyx_t_3 = PyObject_HasAttr(__pyx_v_string, __pyx_n_s_tostring); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 409, __pyx_L1_error)

#line 409 "re2.pyx"
  __pyx_t_4 = (__pyx_t_3 != 0);

#line 409 "re2.pyx"
  if (__pyx_t_4) {

    /* "re2.pyx":410
 * 
 *         if hasattr(string, 'tostring'):
 *             string = string.tostring()             # <<<<<<<<<<<<<<
 * 
 *         string = unicode_to_bytestring(string, &encoded)
 */

#line 410 "re2.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_string, __pyx_n_s_tostring); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 410, __pyx_L1_error)

#line 410 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 410 "re2.pyx"
    __pyx_t_5 = NULL;

#line 410 "re2.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 410 "re2.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);

#line 410 "re2.pyx"
      if (likely(__pyx_t_5)) {

#line 410 "re2.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 410 "re2.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 410 "re2.pyx"
        __Pyx_INCREF(function);

#line 410 "re2.pyx"
        __Pyx_DECREF_SET(__pyx_t_2, function);

#line 410 "re2.pyx"
      }

#line 410 "re2.pyx"
    }

#line 410 "re2.pyx"
    if (__pyx_t_5) {

#line 410 "re2.pyx"
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 410, __pyx_L1_error)

#line 410 "re2.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 410 "re2.pyx"
    } else {

#line 410 "re2.pyx"
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 410, __pyx_L1_error)

#line 410 "re2.pyx"
    }

#line 410 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 410 "re2.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 410 "re2.pyx"
    __Pyx_DECREF_SET(__pyx_v_string, __pyx_t_1);

#line 410 "re2.pyx"
    __pyx_t_1 = 0;

    /* "re2.pyx":409
 *         cdef Match m = Match(self, self.ngroups + 1)
 * 
 *         if hasattr(string, 'tostring'):             # <<<<<<<<<<<<<<
 *             string = string.tostring()
 * 
 */

#line 409 "re2.pyx"
  }

  /* "re2.pyx":412
 *             string = string.tostring()
 * 
 *         string = unicode_to_bytestring(string, &encoded)             # <<<<<<<<<<<<<<
 * 
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 */

#line 412 "re2.pyx"
  __pyx_t_1 = __pyx_f_3re2_unicode_to_bytestring(__pyx_v_string, (&__pyx_v_encoded)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)

#line 412 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 412 "re2.pyx"
  __Pyx_DECREF_SET(__pyx_v_string, __pyx_t_1);

#line 412 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":414
 *         string = unicode_to_bytestring(string, &encoded)
 * 
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError("expected string or buffer")
 * 
 */

#line 414 "re2.pyx"
  __pyx_t_4 = ((__pyx_f_3re2_pystring_to_bytestring(__pyx_v_string, (&__pyx_v_cstring), (&__pyx_v_size)) == -1L) != 0);

#line 414 "re2.pyx"
  if (__pyx_t_4) {

    /* "re2.pyx":415
 * 
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 * 
 *         if endpos >= 0 and endpos <= pos:
 */

#line 415 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)

#line 415 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 415 "re2.pyx"
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 415 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 415 "re2.pyx"
    __PYX_ERR(0, 415, __pyx_L1_error)

    /* "re2.pyx":414
 *         string = unicode_to_bytestring(string, &encoded)
 * 
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError("expected string or buffer")
 * 
 */

#line 414 "re2.pyx"
  }

  /* "re2.pyx":417
 *             raise TypeError("expected string or buffer")
 * 
 *         if endpos >= 0 and endpos <= pos:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */

#line 417 "re2.pyx"
  __pyx_t_3 = ((__pyx_v_endpos >= 0) != 0);

#line 417 "re2.pyx"
  if (__pyx_t_3) {

#line 417 "re2.pyx"
  } else {

#line 417 "re2.pyx"
    __pyx_t_4 = __pyx_t_3;

#line 417 "re2.pyx"
    goto __pyx_L6_bool_binop_done;

#line 417 "re2.pyx"
  }

#line 417 "re2.pyx"
  __pyx_t_3 = ((__pyx_v_endpos <= __pyx_v_pos) != 0);

#line 417 "re2.pyx"
  __pyx_t_4 = __pyx_t_3;

#line 417 "re2.pyx"
  __pyx_L6_bool_binop_done:;

#line 417 "re2.pyx"
  if (__pyx_t_4) {

    /* "re2.pyx":418
 * 
 *         if endpos >= 0 and endpos <= pos:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         if endpos >= 0 and endpos < size:
 */

#line 418 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 418 "re2.pyx"
    __Pyx_INCREF(Py_None);

#line 418 "re2.pyx"
    __pyx_r = Py_None;

#line 418 "re2.pyx"
    goto __pyx_L0;

    /* "re2.pyx":417
 *             raise TypeError("expected string or buffer")
 * 
 *         if endpos >= 0 and endpos <= pos:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */

#line 417 "re2.pyx"
  }

  /* "re2.pyx":420
 *             return None
 * 
 *         if endpos >= 0 and endpos < size:             # <<<<<<<<<<<<<<
 *             size = endpos
 * 
 */

#line 420 "re2.pyx"
  __pyx_t_3 = ((__pyx_v_endpos >= 0) != 0);

#line 420 "re2.pyx"
  if (__pyx_t_3) {

#line 420 "re2.pyx"
  } else {

#line 420 "re2.pyx"
    __pyx_t_4 = __pyx_t_3;

#line 420 "re2.pyx"
    goto __pyx_L9_bool_binop_done;

#line 420 "re2.pyx"
  }

#line 420 "re2.pyx"
  __pyx_t_3 = ((__pyx_v_endpos < __pyx_v_size) != 0);

#line 420 "re2.pyx"
  __pyx_t_4 = __pyx_t_3;

#line 420 "re2.pyx"
  __pyx_L9_bool_binop_done:;

#line 420 "re2.pyx"
  if (__pyx_t_4) {

    /* "re2.pyx":421
 * 
 *         if endpos >= 0 and endpos < size:
 *             size = endpos             # <<<<<<<<<<<<<<
 * 
 *         if pos > size:
 */

#line 421 "re2.pyx"
    __pyx_v_size = __pyx_v_endpos;

    /* "re2.pyx":420
 *             return None
 * 
 *         if endpos >= 0 and endpos < size:             # <<<<<<<<<<<<<<
 *             size = endpos
 * 
 */

#line 420 "re2.pyx"
  }

  /* "re2.pyx":423
 *             size = endpos
 * 
 *         if pos > size:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */

#line 423 "re2.pyx"
  __pyx_t_4 = ((__pyx_v_pos > __pyx_v_size) != 0);

#line 423 "re2.pyx"
  if (__pyx_t_4) {

    /* "re2.pyx":424
 * 
 *         if pos > size:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         sp = new _re2.StringPiece(cstring, size)
 */

#line 424 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 424 "re2.pyx"
    __Pyx_INCREF(Py_None);

#line 424 "re2.pyx"
    __pyx_r = Py_None;

#line 424 "re2.pyx"
    goto __pyx_L0;

    /* "re2.pyx":423
 *             size = endpos
 * 
 *         if pos > size:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */

#line 423 "re2.pyx"
  }

  /* "re2.pyx":426
 *             return None
 * 
 *         sp = new _re2.StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 *         with nogil:
 *             result = self.re_pattern.Match(sp[0], <int>pos, <int>size, anchoring, m.matches, self.ngroups + 1)
 */

#line 426 "re2.pyx"
  __pyx_v_sp = new re2::StringPiece(__pyx_v_cstring, __pyx_v_size);

  /* "re2.pyx":427
 * 
 *         sp = new _re2.StringPiece(cstring, size)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             result = self.re_pattern.Match(sp[0], <int>pos, <int>size, anchoring, m.matches, self.ngroups + 1)
 * 
 */

#line 427 "re2.pyx"
  {

#line 427 "re2.pyx"
      #ifdef WITH_THREAD

#line 427 "re2.pyx"
      PyThreadState *_save;

#line 427 "re2.pyx"
      Py_UNBLOCK_THREADS

#line 427 "re2.pyx"
      #endif

#line 427 "re2.pyx"
      /*try:*/ {

        /* "re2.pyx":428
 *         sp = new _re2.StringPiece(cstring, size)
 *         with nogil:
 *             result = self.re_pattern.Match(sp[0], <int>pos, <int>size, anchoring, m.matches, self.ngroups + 1)             # <<<<<<<<<<<<<<
 * 
 *         del sp
 */

#line 428 "re2.pyx"
        __pyx_v_result = __pyx_v_self->re_pattern->Match((__pyx_v_sp[0]), ((int)__pyx_v_pos), ((int)__pyx_v_size), __pyx_v_anchoring, __pyx_v_m->matches, (__pyx_v_self->ngroups + 1));

#line 428 "re2.pyx"
      }

      /* "re2.pyx":427
 * 
 *         sp = new _re2.StringPiece(cstring, size)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             result = self.re_pattern.Match(sp[0], <int>pos, <int>size, anchoring, m.matches, self.ngroups + 1)
 * 
 */

#line 427 "re2.pyx"
      /*finally:*/ {

#line 427 "re2.pyx"
        /*normal exit:*/{

#line 427 "re2.pyx"
          #ifdef WITH_THREAD

#line 427 "re2.pyx"
          Py_BLOCK_THREADS

#line 427 "re2.pyx"
          #endif

#line 427 "re2.pyx"
          goto __pyx_L14;

#line 427 "re2.pyx"
        }

#line 427 "re2.pyx"
        __pyx_L14:;

#line 427 "re2.pyx"
      }

#line 427 "re2.pyx"
  }

  /* "re2.pyx":430
 *             result = self.re_pattern.Match(sp[0], <int>pos, <int>size, anchoring, m.matches, self.ngroups + 1)
 * 
 *         del sp             # <<<<<<<<<<<<<<
 *         if result == 0:
 *             return None
 */

#line 430 "re2.pyx"
  delete __pyx_v_sp;

  /* "re2.pyx":431
 * 
 *         del sp
 *         if result == 0:             # <<<<<<<<<<<<<<
 *             return None
 *         m.encoded = <bint>(encoded)
 */

#line 431 "re2.pyx"
  __pyx_t_4 = ((__pyx_v_result == 0) != 0);

#line 431 "re2.pyx"
  if (__pyx_t_4) {

    /* "re2.pyx":432
 *         del sp
 *         if result == 0:
 *             return None             # <<<<<<<<<<<<<<
 *         m.encoded = <bint>(encoded)
 *         m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 */

#line 432 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 432 "re2.pyx"
    __Pyx_INCREF(Py_None);

#line 432 "re2.pyx"
    __pyx_r = Py_None;

#line 432 "re2.pyx"
    goto __pyx_L0;

    /* "re2.pyx":431
 * 
 *         del sp
 *         if result == 0:             # <<<<<<<<<<<<<<
 *             return None
 *         m.encoded = <bint>(encoded)
 */

#line 431 "re2.pyx"
  }

  /* "re2.pyx":433
 *         if result == 0:
 *             return None
 *         m.encoded = <bint>(encoded)             # <<<<<<<<<<<<<<
 *         m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 *         m.nmatches = self.ngroups + 1
 */

#line 433 "re2.pyx"
  __pyx_v_m->encoded = (__pyx_v_encoded != 0);

  /* "re2.pyx":434
 *             return None
 *         m.encoded = <bint>(encoded)
 *         m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())             # <<<<<<<<<<<<<<
 *         m.nmatches = self.ngroups + 1
 *         m.match_string = string
 */

#line 434 "re2.pyx"
  __pyx_v_m->named_groups = cymacros::addressof<const std::map<std::string,int> &>(__pyx_v_self->re_pattern->NamedCapturingGroups());

  /* "re2.pyx":435
 *         m.encoded = <bint>(encoded)
 *         m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 *         m.nmatches = self.ngroups + 1             # <<<<<<<<<<<<<<
 *         m.match_string = string
 *         m._pos = pos
 */

#line 435 "re2.pyx"
  __pyx_v_m->nmatches = (__pyx_v_self->ngroups + 1);

  /* "re2.pyx":436
 *         m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 *         m.nmatches = self.ngroups + 1
 *         m.match_string = string             # <<<<<<<<<<<<<<
 *         m._pos = pos
 *         if endpos == -1:
 */

#line 436 "re2.pyx"
  __Pyx_INCREF(__pyx_v_string);

#line 436 "re2.pyx"
  __Pyx_GIVEREF(__pyx_v_string);

#line 436 "re2.pyx"
  __Pyx_GOTREF(__pyx_v_m->match_string);

#line 436 "re2.pyx"
  __Pyx_DECREF(__pyx_v_m->match_string);

#line 436 "re2.pyx"
  __pyx_v_m->match_string = __pyx_v_string;

  /* "re2.pyx":437
 *         m.nmatches = self.ngroups + 1
 *         m.match_string = string
 *         m._pos = pos             # <<<<<<<<<<<<<<
 *         if endpos == -1:
 *             m._endpos = len(string)
 */

#line 437 "re2.pyx"
  __pyx_v_m->_pos = __pyx_v_pos;

  /* "re2.pyx":438
 *         m.match_string = string
 *         m._pos = pos
 *         if endpos == -1:             # <<<<<<<<<<<<<<
 *             m._endpos = len(string)
 *         else:
 */

#line 438 "re2.pyx"
  __pyx_t_4 = ((__pyx_v_endpos == -1L) != 0);

#line 438 "re2.pyx"
  if (__pyx_t_4) {

    /* "re2.pyx":439
 *         m._pos = pos
 *         if endpos == -1:
 *             m._endpos = len(string)             # <<<<<<<<<<<<<<
 *         else:
 *             m._endpos = endpos
 */

#line 439 "re2.pyx"
    __pyx_t_6 = PyObject_Length(__pyx_v_string); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 439, __pyx_L1_error)

#line 439 "re2.pyx"
    __pyx_v_m->_endpos = __pyx_t_6;

    /* "re2.pyx":438
 *         m.match_string = string
 *         m._pos = pos
 *         if endpos == -1:             # <<<<<<<<<<<<<<
 *             m._endpos = len(string)
 *         else:
 */

#line 438 "re2.pyx"
    goto __pyx_L16;

#line 438 "re2.pyx"
  }

  /* "re2.pyx":441
 *             m._endpos = len(string)
 *         else:
 *             m._endpos = endpos             # <<<<<<<<<<<<<<
 *         return m
 * 
 */

#line 441 "re2.pyx"
  /*else*/ {

#line 441 "re2.pyx"
    __pyx_v_m->_endpos = __pyx_v_endpos;

#line 441 "re2.pyx"
  }

#line 441 "re2.pyx"
  __pyx_L16:;

  /* "re2.pyx":442
 *         else:
 *             m._endpos = endpos
 *         return m             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 442 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 442 "re2.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_m));

#line 442 "re2.pyx"
  __pyx_r = ((PyObject *)__pyx_v_m);

#line 442 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":397
 *         del self.re_pattern
 * 
 *     cdef _search(self, string, int pos, int endpos, _re2.re2_Anchor anchoring):             # <<<<<<<<<<<<<<
 *         """
 *         Scan through string looking for a match, and return a corresponding
 */

#line 397 "re2.pyx"


#line 397 "re2.pyx"
  /* function exit code */

#line 397 "re2.pyx"
  __pyx_L1_error:;

#line 397 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 397 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 397 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 397 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern._search", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 397 "re2.pyx"
  __pyx_r = 0;

#line 397 "re2.pyx"
  __pyx_L0:;

#line 397 "re2.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_m);

#line 397 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_string);

#line 397 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 397 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 397 "re2.pyx"
  return __pyx_r;

#line 397 "re2.pyx"
}

/* "re2.pyx":445
 * 
 * 
 *     def search(self, string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """
 *         Scan through string looking for a match, and return a corresponding
 */

#line 445 "re2.pyx"


#line 445 "re2.pyx"
/* Python wrapper */

#line 445 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_3search(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 445 "re2.pyx"
static char __pyx_doc_3re2_7Pattern_2search[] = "File: re2.pyx (starting at line 445)\n\n        Scan through string looking for a match, and return a corresponding\n        Match instance. Return None if no position in the string matches.\n        ";

#line 445 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_3search(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0
#line 445 "re2.pyx"
;
  int __pyx_v_pos
#line 445 "re2.pyx"
;
  int __pyx_v_endpos
#line 445 "re2.pyx"
;

#line 445 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 445 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 445 "re2.pyx"
  __Pyx_RefNannySetupContext("search (wrapper)", 0);

#line 445 "re2.pyx"
  {

#line 445 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};

#line 445 "re2.pyx"
    PyObject* values[3] = {0,0,0};

#line 445 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 445 "re2.pyx"
      Py_ssize_t kw_args;

#line 445 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 445 "re2.pyx"
      switch (pos_args) {
        case  3: 
#line 445 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 445 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 445 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 445 "re2.pyx"
        case  0: break;
        default: 
#line 445 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 445 "re2.pyx"
      }

#line 445 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 445 "re2.pyx"
      switch (pos_args) {

#line 445 "re2.pyx"
        case  0:

#line 445 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else 
#line 445 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 445 "re2.pyx"
        case  1:

#line 445 "re2.pyx"
        if (kw_args > 0) {

#line 445 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pos);

#line 445 "re2.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 445 "re2.pyx"
        }

#line 445 "re2.pyx"
        case  2:

#line 445 "re2.pyx"
        if (kw_args > 0) {

#line 445 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_endpos);

#line 445 "re2.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 445 "re2.pyx"
        }

#line 445 "re2.pyx"
      }

#line 445 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 445 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "search") < 0)) __PYX_ERR(0, 445, __pyx_L3_error)

#line 445 "re2.pyx"
      }

#line 445 "re2.pyx"
    } else {

#line 445 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 445 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 445 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 445 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 445 "re2.pyx"
        break;
        default: 
#line 445 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 445 "re2.pyx"
      }

#line 445 "re2.pyx"
    }

#line 445 "re2.pyx"
    __pyx_v_string = values[0];

#line 445 "re2.pyx"
    if (values[1]) {

#line 445 "re2.pyx"
      __pyx_v_pos = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 445, __pyx_L3_error)

#line 445 "re2.pyx"
    } else {

#line 445 "re2.pyx"
      __pyx_v_pos = ((int)0);

#line 445 "re2.pyx"
    }

#line 445 "re2.pyx"
    if (values[2]) {

#line 445 "re2.pyx"
      __pyx_v_endpos = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 445, __pyx_L3_error)

#line 445 "re2.pyx"
    } else {

#line 445 "re2.pyx"
      __pyx_v_endpos = ((int)-1);

#line 445 "re2.pyx"
    }

#line 445 "re2.pyx"
  }

#line 445 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 445 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("search", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 445 "re2.pyx"
__PYX_ERR(0, 445, __pyx_L3_error)

#line 445 "re2.pyx"
  __pyx_L3_error:;

#line 445 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern.search", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 445 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 445 "re2.pyx"
  return NULL;

#line 445 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 445 "re2.pyx"
__pyx_pf_3re2_7Pattern_2search(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

#line 445 "re2.pyx"


#line 445 "re2.pyx"
  /* function exit code */

#line 445 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 445 "re2.pyx"
  return __pyx_r;

#line 445 "re2.pyx"
}

#line 445 "re2.pyx"


#line 445 "re2.pyx"
static PyObject *__pyx_pf_3re2_7Pattern_2search(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos) {

#line 445 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 445 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 445 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 445 "re2.pyx"
  __Pyx_RefNannySetupContext("search", 0);

  /* "re2.pyx":450
 *         Match instance. Return None if no position in the string matches.
 *         """
 *         return self._search(string, pos, endpos, _re2.UNANCHORED)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 450 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 450 "re2.pyx"
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Pattern *)__pyx_v_self->__pyx_vtab)->_search(__pyx_v_self, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos, RE2::UNANCHORED); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 450, __pyx_L1_error)

#line 450 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 450 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 450 "re2.pyx"
  __pyx_t_1 = 0;

#line 450 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":445
 * 
 * 
 *     def search(self, string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """
 *         Scan through string looking for a match, and return a corresponding
 */

#line 445 "re2.pyx"


#line 445 "re2.pyx"
  /* function exit code */

#line 445 "re2.pyx"
  __pyx_L1_error:;

#line 445 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 445 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern.search", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 445 "re2.pyx"
  __pyx_r = NULL;

#line 445 "re2.pyx"
  __pyx_L0:;

#line 445 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 445 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 445 "re2.pyx"
  return __pyx_r;

#line 445 "re2.pyx"
}

/* "re2.pyx":453
 * 
 * 
 *     def match(self, string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """
 *         Matches zero or more characters at the beginning of the string.
 */

#line 453 "re2.pyx"


#line 453 "re2.pyx"
/* Python wrapper */

#line 453 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_5match(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 453 "re2.pyx"
static char __pyx_doc_3re2_7Pattern_4match[] = "File: re2.pyx (starting at line 453)\n\n        Matches zero or more characters at the beginning of the string.\n        ";

#line 453 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_5match(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0
#line 453 "re2.pyx"
;
  int __pyx_v_pos
#line 453 "re2.pyx"
;
  int __pyx_v_endpos
#line 453 "re2.pyx"
;

#line 453 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 453 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 453 "re2.pyx"
  __Pyx_RefNannySetupContext("match (wrapper)", 0);

#line 453 "re2.pyx"
  {

#line 453 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};

#line 453 "re2.pyx"
    PyObject* values[3] = {0,0,0};

#line 453 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 453 "re2.pyx"
      Py_ssize_t kw_args;

#line 453 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 453 "re2.pyx"
      switch (pos_args) {
        case  3: 
#line 453 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 453 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 453 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 453 "re2.pyx"
        case  0: break;
        default: 
#line 453 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 453 "re2.pyx"
      }

#line 453 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 453 "re2.pyx"
      switch (pos_args) {

#line 453 "re2.pyx"
        case  0:

#line 453 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else 
#line 453 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 453 "re2.pyx"
        case  1:

#line 453 "re2.pyx"
        if (kw_args > 0) {

#line 453 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pos);

#line 453 "re2.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 453 "re2.pyx"
        }

#line 453 "re2.pyx"
        case  2:

#line 453 "re2.pyx"
        if (kw_args > 0) {

#line 453 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_endpos);

#line 453 "re2.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 453 "re2.pyx"
        }

#line 453 "re2.pyx"
      }

#line 453 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 453 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "match") < 0)) __PYX_ERR(0, 453, __pyx_L3_error)

#line 453 "re2.pyx"
      }

#line 453 "re2.pyx"
    } else {

#line 453 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 453 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 453 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 453 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 453 "re2.pyx"
        break;
        default: 
#line 453 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 453 "re2.pyx"
      }

#line 453 "re2.pyx"
    }

#line 453 "re2.pyx"
    __pyx_v_string = values[0];

#line 453 "re2.pyx"
    if (values[1]) {

#line 453 "re2.pyx"
      __pyx_v_pos = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 453, __pyx_L3_error)

#line 453 "re2.pyx"
    } else {

#line 453 "re2.pyx"
      __pyx_v_pos = ((int)0);

#line 453 "re2.pyx"
    }

#line 453 "re2.pyx"
    if (values[2]) {

#line 453 "re2.pyx"
      __pyx_v_endpos = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 453, __pyx_L3_error)

#line 453 "re2.pyx"
    } else {

#line 453 "re2.pyx"
      __pyx_v_endpos = ((int)-1);

#line 453 "re2.pyx"
    }

#line 453 "re2.pyx"
  }

#line 453 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 453 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("match", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 453 "re2.pyx"
__PYX_ERR(0, 453, __pyx_L3_error)

#line 453 "re2.pyx"
  __pyx_L3_error:;

#line 453 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern.match", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 453 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 453 "re2.pyx"
  return NULL;

#line 453 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 453 "re2.pyx"
__pyx_pf_3re2_7Pattern_4match(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

#line 453 "re2.pyx"


#line 453 "re2.pyx"
  /* function exit code */

#line 453 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 453 "re2.pyx"
  return __pyx_r;

#line 453 "re2.pyx"
}

#line 453 "re2.pyx"


#line 453 "re2.pyx"
static PyObject *__pyx_pf_3re2_7Pattern_4match(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos) {

#line 453 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 453 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 453 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 453 "re2.pyx"
  __Pyx_RefNannySetupContext("match", 0);

  /* "re2.pyx":457
 *         Matches zero or more characters at the beginning of the string.
 *         """
 *         return self._search(string, pos, endpos, _re2.ANCHOR_START)             # <<<<<<<<<<<<<<
 * 
 *     cdef _print_pattern(self):
 */

#line 457 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 457 "re2.pyx"
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Pattern *)__pyx_v_self->__pyx_vtab)->_search(__pyx_v_self, __pyx_v_string, __pyx_v_pos, __pyx_v_endpos, RE2::ANCHOR_START); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 457, __pyx_L1_error)

#line 457 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 457 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 457 "re2.pyx"
  __pyx_t_1 = 0;

#line 457 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":453
 * 
 * 
 *     def match(self, string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """
 *         Matches zero or more characters at the beginning of the string.
 */

#line 453 "re2.pyx"


#line 453 "re2.pyx"
  /* function exit code */

#line 453 "re2.pyx"
  __pyx_L1_error:;

#line 453 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 453 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern.match", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 453 "re2.pyx"
  __pyx_r = NULL;

#line 453 "re2.pyx"
  __pyx_L0:;

#line 453 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 453 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 453 "re2.pyx"
  return __pyx_r;

#line 453 "re2.pyx"
}

/* "re2.pyx":459
 *         return self._search(string, pos, endpos, _re2.ANCHOR_START)
 * 
 *     cdef _print_pattern(self):             # <<<<<<<<<<<<<<
 *         cdef const _re2.cpp_string * s
 *         s = _re2.addressof(self.re_pattern.pattern())
 */

#line 459 "re2.pyx"


#line 459 "re2.pyx"
static PyObject *__pyx_f_3re2_7Pattern__print_pattern(struct __pyx_obj_3re2_Pattern *__pyx_v_self) {
  std::string const *__pyx_v_s
#line 459 "re2.pyx"
;

#line 459 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 459 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 459 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 459 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 459 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 459 "re2.pyx"
  __Pyx_RefNannySetupContext("_print_pattern", 0);

  /* "re2.pyx":461
 *     cdef _print_pattern(self):
 *         cdef const _re2.cpp_string * s
 *         s = _re2.addressof(self.re_pattern.pattern())             # <<<<<<<<<<<<<<
 *         print cpp_to_pystring(s[0]) + "\n"
 *         sys.stdout.flush()
 */

#line 461 "re2.pyx"
  __pyx_v_s = cymacros::addressof<const std::string>(__pyx_v_self->re_pattern->pattern());

  /* "re2.pyx":462
 *         cdef const _re2.cpp_string * s
 *         s = _re2.addressof(self.re_pattern.pattern())
 *         print cpp_to_pystring(s[0]) + "\n"             # <<<<<<<<<<<<<<
 *         sys.stdout.flush()
 * 
 */

#line 462 "re2.pyx"
  __pyx_t_1 = __pyx_f_3re2_cpp_to_pystring((__pyx_v_s[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)

#line 462 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 462 "re2.pyx"
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__19); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 462, __pyx_L1_error)

#line 462 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 462 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 462 "re2.pyx"
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 462, __pyx_L1_error)

#line 462 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":463
 *         s = _re2.addressof(self.re_pattern.pattern())
 *         print cpp_to_pystring(s[0]) + "\n"
 *         sys.stdout.flush()             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 463 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)

#line 463 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 463 "re2.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_stdout); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)

#line 463 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 463 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 463 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_flush); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)

#line 463 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 463 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 463 "re2.pyx"
  __pyx_t_3 = NULL;

#line 463 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {

#line 463 "re2.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);

#line 463 "re2.pyx"
    if (likely(__pyx_t_3)) {

#line 463 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 463 "re2.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 463 "re2.pyx"
      __Pyx_INCREF(function);

#line 463 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_1, function);

#line 463 "re2.pyx"
    }

#line 463 "re2.pyx"
  }

#line 463 "re2.pyx"
  if (__pyx_t_3) {

#line 463 "re2.pyx"
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)

#line 463 "re2.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 463 "re2.pyx"
  } else {

#line 463 "re2.pyx"
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)

#line 463 "re2.pyx"
  }

#line 463 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 463 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 463 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":459
 *         return self._search(string, pos, endpos, _re2.ANCHOR_START)
 * 
 *     cdef _print_pattern(self):             # <<<<<<<<<<<<<<
 *         cdef const _re2.cpp_string * s
 *         s = _re2.addressof(self.re_pattern.pattern())
 */

#line 459 "re2.pyx"


#line 459 "re2.pyx"
  /* function exit code */

#line 459 "re2.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 459 "re2.pyx"
  goto __pyx_L0;

#line 459 "re2.pyx"
  __pyx_L1_error:;

#line 459 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 459 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 459 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 459 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern._print_pattern", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 459 "re2.pyx"
  __pyx_r = 0;

#line 459 "re2.pyx"
  __pyx_L0:;

#line 459 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 459 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 459 "re2.pyx"
  return __pyx_r;

#line 459 "re2.pyx"
}

/* "re2.pyx":466
 * 
 * 
 *     cdef _finditer(self, object string, int pos=0, int endpos=-1, int as_match=0):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t size
 *         cdef int result
 */

#line 466 "re2.pyx"


#line 466 "re2.pyx"
static PyObject *__pyx_f_3re2_7Pattern__finditer(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, struct __pyx_opt_args_3re2_7Pattern__finditer *__pyx_optional_args) {

#line 466 "re2.pyx"
  int __pyx_v_pos = ((int)0);

#line 466 "re2.pyx"
  int __pyx_v_endpos = ((int)-1);

#line 466 "re2.pyx"
  int __pyx_v_as_match = ((int)0);
  Py_ssize_t __pyx_v_size
#line 466 "re2.pyx"
;
  int __pyx_v_result
#line 466 "re2.pyx"
;
  char *__pyx_v_cstring
#line 466 "re2.pyx"
;
  re2::StringPiece *__pyx_v_sp
#line 466 "re2.pyx"
;
  struct __pyx_obj_3re2_Match *__pyx_v_m = 0
#line 466 "re2.pyx"
;
  PyObject *__pyx_v_resultlist = 0
#line 466 "re2.pyx"
;
  int __pyx_v_encoded
#line 466 "re2.pyx"
;

#line 466 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 466 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 466 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 466 "re2.pyx"
  int __pyx_t_2;

#line 466 "re2.pyx"
  int __pyx_t_3;

#line 466 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 466 "re2.pyx"
  Py_ssize_t __pyx_t_5;

#line 466 "re2.pyx"
  int __pyx_t_6;

#line 466 "re2.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 466 "re2.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 466 "re2.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 466 "re2.pyx"
  __Pyx_RefNannySetupContext("_finditer", 0);

#line 466 "re2.pyx"
  if (__pyx_optional_args) {

#line 466 "re2.pyx"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 466 "re2.pyx"
      __pyx_v_pos = __pyx_optional_args->pos;

#line 466 "re2.pyx"
      if (__pyx_optional_args->__pyx_n > 1) {

#line 466 "re2.pyx"
        __pyx_v_endpos = __pyx_optional_args->endpos;

#line 466 "re2.pyx"
        if (__pyx_optional_args->__pyx_n > 2) {

#line 466 "re2.pyx"
          __pyx_v_as_match = __pyx_optional_args->as_match;

#line 466 "re2.pyx"
        }

#line 466 "re2.pyx"
      }

#line 466 "re2.pyx"
    }

#line 466 "re2.pyx"
  }

#line 466 "re2.pyx"
  __Pyx_INCREF(__pyx_v_string);

  /* "re2.pyx":472
 *         cdef _re2.StringPiece * sp
 *         cdef Match m
 *         cdef list resultlist = []             # <<<<<<<<<<<<<<
 *         cdef int encoded = 0
 * 
 */

#line 472 "re2.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)

#line 472 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 472 "re2.pyx"
  __pyx_v_resultlist = ((PyObject*)__pyx_t_1);

#line 472 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":473
 *         cdef Match m
 *         cdef list resultlist = []
 *         cdef int encoded = 0             # <<<<<<<<<<<<<<
 * 
 *         string = unicode_to_bytestring(string, &encoded)
 */

#line 473 "re2.pyx"
  __pyx_v_encoded = 0;

  /* "re2.pyx":475
 *         cdef int encoded = 0
 * 
 *         string = unicode_to_bytestring(string, &encoded)             # <<<<<<<<<<<<<<
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")
 */

#line 475 "re2.pyx"
  __pyx_t_1 = __pyx_f_3re2_unicode_to_bytestring(__pyx_v_string, (&__pyx_v_encoded)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)

#line 475 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 475 "re2.pyx"
  __Pyx_DECREF_SET(__pyx_v_string, __pyx_t_1);

#line 475 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":476
 * 
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError("expected string or buffer")
 *         encoded = <bint>encoded
 */

#line 476 "re2.pyx"
  __pyx_t_2 = ((__pyx_f_3re2_pystring_to_bytestring(__pyx_v_string, (&__pyx_v_cstring), (&__pyx_v_size)) == -1L) != 0);

#line 476 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":477
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 *         encoded = <bint>encoded
 * 
 */

#line 477 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L1_error)

#line 477 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 477 "re2.pyx"
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 477 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 477 "re2.pyx"
    __PYX_ERR(0, 477, __pyx_L1_error)

    /* "re2.pyx":476
 * 
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError("expected string or buffer")
 *         encoded = <bint>encoded
 */

#line 476 "re2.pyx"
  }

  /* "re2.pyx":478
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")
 *         encoded = <bint>encoded             # <<<<<<<<<<<<<<
 * 
 *         if endpos != -1 and endpos < size:
 */

#line 478 "re2.pyx"
  __pyx_v_encoded = (__pyx_v_encoded != 0);

  /* "re2.pyx":480
 *         encoded = <bint>encoded
 * 
 *         if endpos != -1 and endpos < size:             # <<<<<<<<<<<<<<
 *             size = endpos
 * 
 */

#line 480 "re2.pyx"
  __pyx_t_3 = ((__pyx_v_endpos != -1L) != 0);

#line 480 "re2.pyx"
  if (__pyx_t_3) {

#line 480 "re2.pyx"
  } else {

#line 480 "re2.pyx"
    __pyx_t_2 = __pyx_t_3;

#line 480 "re2.pyx"
    goto __pyx_L5_bool_binop_done;

#line 480 "re2.pyx"
  }

#line 480 "re2.pyx"
  __pyx_t_3 = ((__pyx_v_endpos < __pyx_v_size) != 0);

#line 480 "re2.pyx"
  __pyx_t_2 = __pyx_t_3;

#line 480 "re2.pyx"
  __pyx_L5_bool_binop_done:;

#line 480 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":481
 * 
 *         if endpos != -1 and endpos < size:
 *             size = endpos             # <<<<<<<<<<<<<<
 * 
 *         sp = new _re2.StringPiece(cstring, size)
 */

#line 481 "re2.pyx"
    __pyx_v_size = __pyx_v_endpos;

    /* "re2.pyx":480
 *         encoded = <bint>encoded
 * 
 *         if endpos != -1 and endpos < size:             # <<<<<<<<<<<<<<
 *             size = endpos
 * 
 */

#line 480 "re2.pyx"
  }

  /* "re2.pyx":483
 *             size = endpos
 * 
 *         sp = new _re2.StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */

#line 483 "re2.pyx"
  __pyx_v_sp = new re2::StringPiece(__pyx_v_cstring, __pyx_v_size);

  /* "re2.pyx":485
 *         sp = new _re2.StringPiece(cstring, size)
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             m = Match(self, self.ngroups + 1)
 *             with nogil:
 */

#line 485 "re2.pyx"
  while (1) {

    /* "re2.pyx":486
 * 
 *         while True:
 *             m = Match(self, self.ngroups + 1)             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)
 */

#line 486 "re2.pyx"
    __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_self->ngroups + 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)

#line 486 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 486 "re2.pyx"
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 486, __pyx_L1_error)

#line 486 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 486 "re2.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_self));

#line 486 "re2.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));

#line 486 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_self));

#line 486 "re2.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 486 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);

#line 486 "re2.pyx"
    __pyx_t_1 = 0;

#line 486 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3re2_Match), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)

#line 486 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 486 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 486 "re2.pyx"
    __Pyx_XDECREF_SET(__pyx_v_m, ((struct __pyx_obj_3re2_Match *)__pyx_t_1));

#line 486 "re2.pyx"
    __pyx_t_1 = 0;

    /* "re2.pyx":487
 *         while True:
 *             m = Match(self, self.ngroups + 1)
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)
 *             if result == 0:
 */

#line 487 "re2.pyx"
    {

#line 487 "re2.pyx"
        #ifdef WITH_THREAD

#line 487 "re2.pyx"
        PyThreadState *_save;

#line 487 "re2.pyx"
        Py_UNBLOCK_THREADS

#line 487 "re2.pyx"
        #endif

#line 487 "re2.pyx"
        /*try:*/ {

          /* "re2.pyx":488
 *             m = Match(self, self.ngroups + 1)
 *             with nogil:
 *                 result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)             # <<<<<<<<<<<<<<
 *             if result == 0:
 *                 break
 */

#line 488 "re2.pyx"
          __pyx_v_result = __pyx_v_self->re_pattern->Match((__pyx_v_sp[0]), ((int)__pyx_v_pos), ((int)__pyx_v_size), RE2::UNANCHORED, __pyx_v_m->matches, (__pyx_v_self->ngroups + 1));

#line 488 "re2.pyx"
        }

        /* "re2.pyx":487
 *         while True:
 *             m = Match(self, self.ngroups + 1)
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)
 *             if result == 0:
 */

#line 487 "re2.pyx"
        /*finally:*/ {

#line 487 "re2.pyx"
          /*normal exit:*/{

#line 487 "re2.pyx"
            #ifdef WITH_THREAD

#line 487 "re2.pyx"
            Py_BLOCK_THREADS

#line 487 "re2.pyx"
            #endif

#line 487 "re2.pyx"
            goto __pyx_L13;

#line 487 "re2.pyx"
          }

#line 487 "re2.pyx"
          __pyx_L13:;

#line 487 "re2.pyx"
        }

#line 487 "re2.pyx"
    }

    /* "re2.pyx":489
 *             with nogil:
 *                 result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)
 *             if result == 0:             # <<<<<<<<<<<<<<
 *                 break
 *             m.encoded = encoded
 */

#line 489 "re2.pyx"
    __pyx_t_2 = ((__pyx_v_result == 0) != 0);

#line 489 "re2.pyx"
    if (__pyx_t_2) {

      /* "re2.pyx":490
 *                 result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)
 *             if result == 0:
 *                 break             # <<<<<<<<<<<<<<
 *             m.encoded = encoded
 *             m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 */

#line 490 "re2.pyx"
      goto __pyx_L8_break;

      /* "re2.pyx":489
 *             with nogil:
 *                 result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)
 *             if result == 0:             # <<<<<<<<<<<<<<
 *                 break
 *             m.encoded = encoded
 */

#line 489 "re2.pyx"
    }

    /* "re2.pyx":491
 *             if result == 0:
 *                 break
 *             m.encoded = encoded             # <<<<<<<<<<<<<<
 *             m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 *             m.nmatches = self.ngroups + 1
 */

#line 491 "re2.pyx"
    __pyx_v_m->encoded = __pyx_v_encoded;

    /* "re2.pyx":492
 *                 break
 *             m.encoded = encoded
 *             m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())             # <<<<<<<<<<<<<<
 *             m.nmatches = self.ngroups + 1
 *             m.match_string = string
 */

#line 492 "re2.pyx"
    __pyx_v_m->named_groups = cymacros::addressof<const std::map<std::string,int> &>(__pyx_v_self->re_pattern->NamedCapturingGroups());

    /* "re2.pyx":493
 *             m.encoded = encoded
 *             m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 *             m.nmatches = self.ngroups + 1             # <<<<<<<<<<<<<<
 *             m.match_string = string
 *             m._pos = pos
 */

#line 493 "re2.pyx"
    __pyx_v_m->nmatches = (__pyx_v_self->ngroups + 1);

    /* "re2.pyx":494
 *             m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 *             m.nmatches = self.ngroups + 1
 *             m.match_string = string             # <<<<<<<<<<<<<<
 *             m._pos = pos
 *             if endpos == -1:
 */

#line 494 "re2.pyx"
    __Pyx_INCREF(__pyx_v_string);

#line 494 "re2.pyx"
    __Pyx_GIVEREF(__pyx_v_string);

#line 494 "re2.pyx"
    __Pyx_GOTREF(__pyx_v_m->match_string);

#line 494 "re2.pyx"
    __Pyx_DECREF(__pyx_v_m->match_string);

#line 494 "re2.pyx"
    __pyx_v_m->match_string = __pyx_v_string;

    /* "re2.pyx":495
 *             m.nmatches = self.ngroups + 1
 *             m.match_string = string
 *             m._pos = pos             # <<<<<<<<<<<<<<
 *             if endpos == -1:
 *                 m._endpos = len(string)
 */

#line 495 "re2.pyx"
    __pyx_v_m->_pos = __pyx_v_pos;

    /* "re2.pyx":496
 *             m.match_string = string
 *             m._pos = pos
 *             if endpos == -1:             # <<<<<<<<<<<<<<
 *                 m._endpos = len(string)
 *             else:
 */

#line 496 "re2.pyx"
    __pyx_t_2 = ((__pyx_v_endpos == -1L) != 0);

#line 496 "re2.pyx"
    if (__pyx_t_2) {

      /* "re2.pyx":497
 *             m._pos = pos
 *             if endpos == -1:
 *                 m._endpos = len(string)             # <<<<<<<<<<<<<<
 *             else:
 *                 m._endpos = endpos
 */

#line 497 "re2.pyx"
      __pyx_t_5 = PyObject_Length(__pyx_v_string); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 497, __pyx_L1_error)

#line 497 "re2.pyx"
      __pyx_v_m->_endpos = __pyx_t_5;

      /* "re2.pyx":496
 *             m.match_string = string
 *             m._pos = pos
 *             if endpos == -1:             # <<<<<<<<<<<<<<
 *                 m._endpos = len(string)
 *             else:
 */

#line 496 "re2.pyx"
      goto __pyx_L15;

#line 496 "re2.pyx"
    }

    /* "re2.pyx":499
 *                 m._endpos = len(string)
 *             else:
 *                 m._endpos = endpos             # <<<<<<<<<<<<<<
 *             if as_match:
 *                 if self.ngroups > 1:
 */

#line 499 "re2.pyx"
    /*else*/ {

#line 499 "re2.pyx"
      __pyx_v_m->_endpos = __pyx_v_endpos;

#line 499 "re2.pyx"
    }

#line 499 "re2.pyx"
    __pyx_L15:;

    /* "re2.pyx":500
 *             else:
 *                 m._endpos = endpos
 *             if as_match:             # <<<<<<<<<<<<<<
 *                 if self.ngroups > 1:
 *                     resultlist.append(m.groups(""))
 */

#line 500 "re2.pyx"
    __pyx_t_2 = (__pyx_v_as_match != 0);

#line 500 "re2.pyx"
    if (__pyx_t_2) {

      /* "re2.pyx":501
 *                 m._endpos = endpos
 *             if as_match:
 *                 if self.ngroups > 1:             # <<<<<<<<<<<<<<
 *                     resultlist.append(m.groups(""))
 *                 else:
 */

#line 501 "re2.pyx"
      __pyx_t_2 = ((__pyx_v_self->ngroups > 1) != 0);

#line 501 "re2.pyx"
      if (__pyx_t_2) {

        /* "re2.pyx":502
 *             if as_match:
 *                 if self.ngroups > 1:
 *                     resultlist.append(m.groups(""))             # <<<<<<<<<<<<<<
 *                 else:
 *                     resultlist.append(m.group(self.ngroups))
 */

#line 502 "re2.pyx"
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_m), __pyx_n_s_groups); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)

#line 502 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 502 "re2.pyx"
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 502, __pyx_L1_error)

#line 502 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 502 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 502 "re2.pyx"
        __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_4); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 502, __pyx_L1_error)

#line 502 "re2.pyx"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "re2.pyx":501
 *                 m._endpos = endpos
 *             if as_match:
 *                 if self.ngroups > 1:             # <<<<<<<<<<<<<<
 *                     resultlist.append(m.groups(""))
 *                 else:
 */

#line 501 "re2.pyx"
        goto __pyx_L17;

#line 501 "re2.pyx"
      }

      /* "re2.pyx":504
 *                     resultlist.append(m.groups(""))
 *                 else:
 *                     resultlist.append(m.group(self.ngroups))             # <<<<<<<<<<<<<<
 *             else:
 *                 resultlist.append(m)
 */

#line 504 "re2.pyx"
      /*else*/ {

#line 504 "re2.pyx"
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_m), __pyx_n_s_group); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)

#line 504 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 504 "re2.pyx"
        __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->ngroups); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 504, __pyx_L1_error)

#line 504 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 504 "re2.pyx"
        __pyx_t_8 = NULL;

#line 504 "re2.pyx"
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {

#line 504 "re2.pyx"
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);

#line 504 "re2.pyx"
          if (likely(__pyx_t_8)) {

#line 504 "re2.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 504 "re2.pyx"
            __Pyx_INCREF(__pyx_t_8);

#line 504 "re2.pyx"
            __Pyx_INCREF(function);

#line 504 "re2.pyx"
            __Pyx_DECREF_SET(__pyx_t_1, function);

#line 504 "re2.pyx"
          }

#line 504 "re2.pyx"
        }

#line 504 "re2.pyx"
        if (!__pyx_t_8) {

#line 504 "re2.pyx"
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 504, __pyx_L1_error)

#line 504 "re2.pyx"
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 504 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 504 "re2.pyx"
        } else {

#line 504 "re2.pyx"
          #if CYTHON_FAST_PYCALL

#line 504 "re2.pyx"
          if (PyFunction_Check(__pyx_t_1)) {

#line 504 "re2.pyx"
            PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};

#line 504 "re2.pyx"
            __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 504, __pyx_L1_error)

#line 504 "re2.pyx"
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 504 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_4);

#line 504 "re2.pyx"
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 504 "re2.pyx"
          } else

#line 504 "re2.pyx"
          #endif

#line 504 "re2.pyx"
          #if CYTHON_FAST_PYCCALL

#line 504 "re2.pyx"
          if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {

#line 504 "re2.pyx"
            PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};

#line 504 "re2.pyx"
            __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 504, __pyx_L1_error)

#line 504 "re2.pyx"
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 504 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_4);

#line 504 "re2.pyx"
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 504 "re2.pyx"
          } else

#line 504 "re2.pyx"
          #endif

#line 504 "re2.pyx"
          {

#line 504 "re2.pyx"
            __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 504, __pyx_L1_error)

#line 504 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 504 "re2.pyx"
            __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;

#line 504 "re2.pyx"
            __Pyx_GIVEREF(__pyx_t_7);

#line 504 "re2.pyx"
            PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_7);

#line 504 "re2.pyx"
            __pyx_t_7 = 0;

#line 504 "re2.pyx"
            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 504, __pyx_L1_error)

#line 504 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_4);

#line 504 "re2.pyx"
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 504 "re2.pyx"
          }

#line 504 "re2.pyx"
        }

#line 504 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 504 "re2.pyx"
        __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_4); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 504, __pyx_L1_error)

#line 504 "re2.pyx"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 504 "re2.pyx"
      }

#line 504 "re2.pyx"
      __pyx_L17:;

      /* "re2.pyx":500
 *             else:
 *                 m._endpos = endpos
 *             if as_match:             # <<<<<<<<<<<<<<
 *                 if self.ngroups > 1:
 *                     resultlist.append(m.groups(""))
 */

#line 500 "re2.pyx"
      goto __pyx_L16;

#line 500 "re2.pyx"
    }

    /* "re2.pyx":506
 *                     resultlist.append(m.group(self.ngroups))
 *             else:
 *                 resultlist.append(m)             # <<<<<<<<<<<<<<
 *             if pos == size:
 *                 break
 */

#line 506 "re2.pyx"
    /*else*/ {

#line 506 "re2.pyx"
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_resultlist, ((PyObject *)__pyx_v_m)); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 506, __pyx_L1_error)

#line 506 "re2.pyx"
    }

#line 506 "re2.pyx"
    __pyx_L16:;

    /* "re2.pyx":507
 *             else:
 *                 resultlist.append(m)
 *             if pos == size:             # <<<<<<<<<<<<<<
 *                 break
 *             # offset the pos to move to the next point
 */

#line 507 "re2.pyx"
    __pyx_t_2 = ((__pyx_v_pos == __pyx_v_size) != 0);

#line 507 "re2.pyx"
    if (__pyx_t_2) {

      /* "re2.pyx":508
 *                 resultlist.append(m)
 *             if pos == size:
 *                 break             # <<<<<<<<<<<<<<
 *             # offset the pos to move to the next point
 *             if m.matches[0].length() == 0:
 */

#line 508 "re2.pyx"
      goto __pyx_L8_break;

      /* "re2.pyx":507
 *             else:
 *                 resultlist.append(m)
 *             if pos == size:             # <<<<<<<<<<<<<<
 *                 break
 *             # offset the pos to move to the next point
 */

#line 507 "re2.pyx"
    }

    /* "re2.pyx":510
 *                 break
 *             # offset the pos to move to the next point
 *             if m.matches[0].length() == 0:             # <<<<<<<<<<<<<<
 *                 pos += 1
 *             else:
 */

#line 510 "re2.pyx"
    __pyx_t_2 = (((__pyx_v_m->matches[0]).length() == 0) != 0);

#line 510 "re2.pyx"
    if (__pyx_t_2) {

      /* "re2.pyx":511
 *             # offset the pos to move to the next point
 *             if m.matches[0].length() == 0:
 *                 pos += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 pos = m.matches[0].data() - cstring + m.matches[0].length()
 */

#line 511 "re2.pyx"
      __pyx_v_pos = (__pyx_v_pos + 1);

      /* "re2.pyx":510
 *                 break
 *             # offset the pos to move to the next point
 *             if m.matches[0].length() == 0:             # <<<<<<<<<<<<<<
 *                 pos += 1
 *             else:
 */

#line 510 "re2.pyx"
      goto __pyx_L19;

#line 510 "re2.pyx"
    }

    /* "re2.pyx":513
 *                 pos += 1
 *             else:
 *                 pos = m.matches[0].data() - cstring + m.matches[0].length()             # <<<<<<<<<<<<<<
 *         del sp
 *         return resultlist
 */

#line 513 "re2.pyx"
    /*else*/ {

#line 513 "re2.pyx"
      __pyx_v_pos = (((__pyx_v_m->matches[0]).data() - __pyx_v_cstring) + (__pyx_v_m->matches[0]).length());

#line 513 "re2.pyx"
    }

#line 513 "re2.pyx"
    __pyx_L19:;

#line 513 "re2.pyx"
  }

#line 513 "re2.pyx"
  __pyx_L8_break:;

  /* "re2.pyx":514
 *             else:
 *                 pos = m.matches[0].data() - cstring + m.matches[0].length()
 *         del sp             # <<<<<<<<<<<<<<
 *         return resultlist
 * 
 */

#line 514 "re2.pyx"
  delete __pyx_v_sp;

  /* "re2.pyx":515
 *                 pos = m.matches[0].data() - cstring + m.matches[0].length()
 *         del sp
 *         return resultlist             # <<<<<<<<<<<<<<
 * 
 *     def finditer(self, object string, int pos=0, int endpos=-1):
 */

#line 515 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 515 "re2.pyx"
  __Pyx_INCREF(__pyx_v_resultlist);

#line 515 "re2.pyx"
  __pyx_r = __pyx_v_resultlist;

#line 515 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":466
 * 
 * 
 *     cdef _finditer(self, object string, int pos=0, int endpos=-1, int as_match=0):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t size
 *         cdef int result
 */

#line 466 "re2.pyx"


#line 466 "re2.pyx"
  /* function exit code */

#line 466 "re2.pyx"
  __pyx_L1_error:;

#line 466 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 466 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 466 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 466 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 466 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 466 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern._finditer", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 466 "re2.pyx"
  __pyx_r = 0;

#line 466 "re2.pyx"
  __pyx_L0:;

#line 466 "re2.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_m);

#line 466 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_resultlist);

#line 466 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_string);

#line 466 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 466 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 466 "re2.pyx"
  return __pyx_r;

#line 466 "re2.pyx"
}

/* "re2.pyx":517
 *         return resultlist
 * 
 *     def finditer(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """
 *         Return all non-overlapping matches of pattern in string as a list
 */

#line 517 "re2.pyx"


#line 517 "re2.pyx"
/* Python wrapper */

#line 517 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_7finditer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 517 "re2.pyx"
static char __pyx_doc_3re2_7Pattern_6finditer[] = "File: re2.pyx (starting at line 517)\n\n        Return all non-overlapping matches of pattern in string as a list\n        of match objects.\n        ";

#line 517 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_7finditer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0
#line 517 "re2.pyx"
;
  int __pyx_v_pos
#line 517 "re2.pyx"
;
  int __pyx_v_endpos
#line 517 "re2.pyx"
;

#line 517 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 517 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 517 "re2.pyx"
  __Pyx_RefNannySetupContext("finditer (wrapper)", 0);

#line 517 "re2.pyx"
  {

#line 517 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};

#line 517 "re2.pyx"
    PyObject* values[3] = {0,0,0};

#line 517 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 517 "re2.pyx"
      Py_ssize_t kw_args;

#line 517 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 517 "re2.pyx"
      switch (pos_args) {
        case  3: 
#line 517 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 517 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 517 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 517 "re2.pyx"
        case  0: break;
        default: 
#line 517 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 517 "re2.pyx"
      }

#line 517 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 517 "re2.pyx"
      switch (pos_args) {

#line 517 "re2.pyx"
        case  0:

#line 517 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else 
#line 517 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 517 "re2.pyx"
        case  1:

#line 517 "re2.pyx"
        if (kw_args > 0) {

#line 517 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pos);

#line 517 "re2.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 517 "re2.pyx"
        }

#line 517 "re2.pyx"
        case  2:

#line 517 "re2.pyx"
        if (kw_args > 0) {

#line 517 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_endpos);

#line 517 "re2.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 517 "re2.pyx"
        }

#line 517 "re2.pyx"
      }

#line 517 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 517 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "finditer") < 0)) __PYX_ERR(0, 517, __pyx_L3_error)

#line 517 "re2.pyx"
      }

#line 517 "re2.pyx"
    } else {

#line 517 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 517 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 517 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 517 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 517 "re2.pyx"
        break;
        default: 
#line 517 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 517 "re2.pyx"
      }

#line 517 "re2.pyx"
    }

#line 517 "re2.pyx"
    __pyx_v_string = values[0];

#line 517 "re2.pyx"
    if (values[1]) {

#line 517 "re2.pyx"
      __pyx_v_pos = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 517, __pyx_L3_error)

#line 517 "re2.pyx"
    } else {

#line 517 "re2.pyx"
      __pyx_v_pos = ((int)0);

#line 517 "re2.pyx"
    }

#line 517 "re2.pyx"
    if (values[2]) {

#line 517 "re2.pyx"
      __pyx_v_endpos = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 517, __pyx_L3_error)

#line 517 "re2.pyx"
    } else {

#line 517 "re2.pyx"
      __pyx_v_endpos = ((int)-1);

#line 517 "re2.pyx"
    }

#line 517 "re2.pyx"
  }

#line 517 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 517 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("finditer", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 517 "re2.pyx"
__PYX_ERR(0, 517, __pyx_L3_error)

#line 517 "re2.pyx"
  __pyx_L3_error:;

#line 517 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern.finditer", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 517 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 517 "re2.pyx"
  return NULL;

#line 517 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 517 "re2.pyx"
__pyx_pf_3re2_7Pattern_6finditer(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

#line 517 "re2.pyx"


#line 517 "re2.pyx"
  /* function exit code */

#line 517 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 517 "re2.pyx"
  return __pyx_r;

#line 517 "re2.pyx"
}

#line 517 "re2.pyx"


#line 517 "re2.pyx"
static PyObject *__pyx_pf_3re2_7Pattern_6finditer(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos) {

#line 517 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 517 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 517 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 517 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 517 "re2.pyx"
  struct __pyx_opt_args_3re2_7Pattern__finditer __pyx_t_3;

#line 517 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 517 "re2.pyx"
  __Pyx_RefNannySetupContext("finditer", 0);

  /* "re2.pyx":523
 *         """
 *         # TODO This builds a list and returns its iterator. Probably could be more memory efficient
 *         return self._finditer(string, pos, endpos, 0).__iter__()             # <<<<<<<<<<<<<<
 * 
 *     def findall(self, object string, int pos=0, int endpos=-1):
 */

#line 523 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 523 "re2.pyx"
  __pyx_t_3.__pyx_n = 3;

#line 523 "re2.pyx"
  __pyx_t_3.pos = __pyx_v_pos;

#line 523 "re2.pyx"
  __pyx_t_3.endpos = __pyx_v_endpos;

#line 523 "re2.pyx"
  __pyx_t_3.as_match = 0;

#line 523 "re2.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_3re2_Pattern *)__pyx_v_self->__pyx_vtab)->_finditer(__pyx_v_self, __pyx_v_string, &__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 523, __pyx_L1_error)

#line 523 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 523 "re2.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_iter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 523, __pyx_L1_error)

#line 523 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 523 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 523 "re2.pyx"
  __pyx_t_2 = NULL;

#line 523 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 523 "re2.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);

#line 523 "re2.pyx"
    if (likely(__pyx_t_2)) {

#line 523 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 523 "re2.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 523 "re2.pyx"
      __Pyx_INCREF(function);

#line 523 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_4, function);

#line 523 "re2.pyx"
    }

#line 523 "re2.pyx"
  }

#line 523 "re2.pyx"
  if (__pyx_t_2) {

#line 523 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)

#line 523 "re2.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 523 "re2.pyx"
  } else {

#line 523 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)

#line 523 "re2.pyx"
  }

#line 523 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 523 "re2.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 523 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 523 "re2.pyx"
  __pyx_t_1 = 0;

#line 523 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":517
 *         return resultlist
 * 
 *     def finditer(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """
 *         Return all non-overlapping matches of pattern in string as a list
 */

#line 517 "re2.pyx"


#line 517 "re2.pyx"
  /* function exit code */

#line 517 "re2.pyx"
  __pyx_L1_error:;

#line 517 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 517 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 517 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 517 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern.finditer", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 517 "re2.pyx"
  __pyx_r = NULL;

#line 517 "re2.pyx"
  __pyx_L0:;

#line 517 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 517 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 517 "re2.pyx"
  return __pyx_r;

#line 517 "re2.pyx"
}

/* "re2.pyx":525
 *         return self._finditer(string, pos, endpos, 0).__iter__()
 * 
 *     def findall(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """
 *         Return all non-overlapping matches of pattern in string as a list
 */

#line 525 "re2.pyx"


#line 525 "re2.pyx"
/* Python wrapper */

#line 525 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_9findall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 525 "re2.pyx"
static char __pyx_doc_3re2_7Pattern_8findall[] = "File: re2.pyx (starting at line 525)\n\n        Return all non-overlapping matches of pattern in string as a list\n        of strings.\n        ";

#line 525 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_9findall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0
#line 525 "re2.pyx"
;
  int __pyx_v_pos
#line 525 "re2.pyx"
;
  int __pyx_v_endpos
#line 525 "re2.pyx"
;

#line 525 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 525 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 525 "re2.pyx"
  __Pyx_RefNannySetupContext("findall (wrapper)", 0);

#line 525 "re2.pyx"
  {

#line 525 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_string,&__pyx_n_s_pos,&__pyx_n_s_endpos,0};

#line 525 "re2.pyx"
    PyObject* values[3] = {0,0,0};

#line 525 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 525 "re2.pyx"
      Py_ssize_t kw_args;

#line 525 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 525 "re2.pyx"
      switch (pos_args) {
        case  3: 
#line 525 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 525 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 525 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 525 "re2.pyx"
        case  0: break;
        default: 
#line 525 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 525 "re2.pyx"
      }

#line 525 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 525 "re2.pyx"
      switch (pos_args) {

#line 525 "re2.pyx"
        case  0:

#line 525 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else 
#line 525 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 525 "re2.pyx"
        case  1:

#line 525 "re2.pyx"
        if (kw_args > 0) {

#line 525 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pos);

#line 525 "re2.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 525 "re2.pyx"
        }

#line 525 "re2.pyx"
        case  2:

#line 525 "re2.pyx"
        if (kw_args > 0) {

#line 525 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_endpos);

#line 525 "re2.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 525 "re2.pyx"
        }

#line 525 "re2.pyx"
      }

#line 525 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 525 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "findall") < 0)) __PYX_ERR(0, 525, __pyx_L3_error)

#line 525 "re2.pyx"
      }

#line 525 "re2.pyx"
    } else {

#line 525 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 525 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 525 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 525 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 525 "re2.pyx"
        break;
        default: 
#line 525 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 525 "re2.pyx"
      }

#line 525 "re2.pyx"
    }

#line 525 "re2.pyx"
    __pyx_v_string = values[0];

#line 525 "re2.pyx"
    if (values[1]) {

#line 525 "re2.pyx"
      __pyx_v_pos = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_pos == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 525, __pyx_L3_error)

#line 525 "re2.pyx"
    } else {

#line 525 "re2.pyx"
      __pyx_v_pos = ((int)0);

#line 525 "re2.pyx"
    }

#line 525 "re2.pyx"
    if (values[2]) {

#line 525 "re2.pyx"
      __pyx_v_endpos = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_endpos == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 525, __pyx_L3_error)

#line 525 "re2.pyx"
    } else {

#line 525 "re2.pyx"
      __pyx_v_endpos = ((int)-1);

#line 525 "re2.pyx"
    }

#line 525 "re2.pyx"
  }

#line 525 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 525 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findall", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 525 "re2.pyx"
__PYX_ERR(0, 525, __pyx_L3_error)

#line 525 "re2.pyx"
  __pyx_L3_error:;

#line 525 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern.findall", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 525 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 525 "re2.pyx"
  return NULL;

#line 525 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 525 "re2.pyx"
__pyx_pf_3re2_7Pattern_8findall(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_string, __pyx_v_pos, __pyx_v_endpos);

#line 525 "re2.pyx"


#line 525 "re2.pyx"
  /* function exit code */

#line 525 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 525 "re2.pyx"
  return __pyx_r;

#line 525 "re2.pyx"
}

#line 525 "re2.pyx"


#line 525 "re2.pyx"
static PyObject *__pyx_pf_3re2_7Pattern_8findall(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_pos, int __pyx_v_endpos) {

#line 525 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 525 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 525 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 525 "re2.pyx"
  struct __pyx_opt_args_3re2_7Pattern__finditer __pyx_t_2;

#line 525 "re2.pyx"
  __Pyx_RefNannySetupContext("findall", 0);

  /* "re2.pyx":530
 *         of strings.
 *         """
 *         return self._finditer(string, pos, endpos, 1)             # <<<<<<<<<<<<<<
 * 
 *     def split(self, string, int maxsplit=0):
 */

#line 530 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 530 "re2.pyx"
  __pyx_t_2.__pyx_n = 3;

#line 530 "re2.pyx"
  __pyx_t_2.pos = __pyx_v_pos;

#line 530 "re2.pyx"
  __pyx_t_2.endpos = __pyx_v_endpos;

#line 530 "re2.pyx"
  __pyx_t_2.as_match = 1;

#line 530 "re2.pyx"
  __pyx_t_1 = ((struct __pyx_vtabstruct_3re2_Pattern *)__pyx_v_self->__pyx_vtab)->_finditer(__pyx_v_self, __pyx_v_string, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)

#line 530 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 530 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 530 "re2.pyx"
  __pyx_t_1 = 0;

#line 530 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":525
 *         return self._finditer(string, pos, endpos, 0).__iter__()
 * 
 *     def findall(self, object string, int pos=0, int endpos=-1):             # <<<<<<<<<<<<<<
 *         """
 *         Return all non-overlapping matches of pattern in string as a list
 */

#line 525 "re2.pyx"


#line 525 "re2.pyx"
  /* function exit code */

#line 525 "re2.pyx"
  __pyx_L1_error:;

#line 525 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 525 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern.findall", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 525 "re2.pyx"
  __pyx_r = NULL;

#line 525 "re2.pyx"
  __pyx_L0:;

#line 525 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 525 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 525 "re2.pyx"
  return __pyx_r;

#line 525 "re2.pyx"
}

/* "re2.pyx":532
 *         return self._finditer(string, pos, endpos, 1)
 * 
 *     def split(self, string, int maxsplit=0):             # <<<<<<<<<<<<<<
 *         """
 *         split(string[, maxsplit = 0]) --> list
 */

#line 532 "re2.pyx"


#line 532 "re2.pyx"
/* Python wrapper */

#line 532 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_11split(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 532 "re2.pyx"
static char __pyx_doc_3re2_7Pattern_10split[] = "File: re2.pyx (starting at line 532)\n\n        split(string[, maxsplit = 0]) --> list\n        Split a string by the occurances of the pattern.\n        ";

#line 532 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_11split(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_string = 0
#line 532 "re2.pyx"
;
  int __pyx_v_maxsplit
#line 532 "re2.pyx"
;

#line 532 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 532 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 532 "re2.pyx"
  __Pyx_RefNannySetupContext("split (wrapper)", 0);

#line 532 "re2.pyx"
  {

#line 532 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_string,&__pyx_n_s_maxsplit,0};

#line 532 "re2.pyx"
    PyObject* values[2] = {0,0};

#line 532 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 532 "re2.pyx"
      Py_ssize_t kw_args;

#line 532 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 532 "re2.pyx"
      switch (pos_args) {
        case  2: 
#line 532 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 532 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 532 "re2.pyx"
        case  0: break;
        default: 
#line 532 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 532 "re2.pyx"
      }

#line 532 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 532 "re2.pyx"
      switch (pos_args) {

#line 532 "re2.pyx"
        case  0:

#line 532 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;
        else 
#line 532 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 532 "re2.pyx"
        case  1:

#line 532 "re2.pyx"
        if (kw_args > 0) {

#line 532 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxsplit);

#line 532 "re2.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 532 "re2.pyx"
        }

#line 532 "re2.pyx"
      }

#line 532 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 532 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "split") < 0)) __PYX_ERR(0, 532, __pyx_L3_error)

#line 532 "re2.pyx"
      }

#line 532 "re2.pyx"
    } else {

#line 532 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: 
#line 532 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 532 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 532 "re2.pyx"
        break;
        default: 
#line 532 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 532 "re2.pyx"
      }

#line 532 "re2.pyx"
    }

#line 532 "re2.pyx"
    __pyx_v_string = values[0];

#line 532 "re2.pyx"
    if (values[1]) {

#line 532 "re2.pyx"
      __pyx_v_maxsplit = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_maxsplit == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 532, __pyx_L3_error)

#line 532 "re2.pyx"
    } else {

#line 532 "re2.pyx"
      __pyx_v_maxsplit = ((int)0);

#line 532 "re2.pyx"
    }

#line 532 "re2.pyx"
  }

#line 532 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 532 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("split", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 532 "re2.pyx"
__PYX_ERR(0, 532, __pyx_L3_error)

#line 532 "re2.pyx"
  __pyx_L3_error:;

#line 532 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern.split", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 532 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 532 "re2.pyx"
  return NULL;

#line 532 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 532 "re2.pyx"
__pyx_pf_3re2_7Pattern_10split(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_string, __pyx_v_maxsplit);

#line 532 "re2.pyx"


#line 532 "re2.pyx"
  /* function exit code */

#line 532 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 532 "re2.pyx"
  return __pyx_r;

#line 532 "re2.pyx"
}

#line 532 "re2.pyx"


#line 532 "re2.pyx"
static PyObject *__pyx_pf_3re2_7Pattern_10split(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_string, int __pyx_v_maxsplit) {
  Py_ssize_t __pyx_v_size
#line 532 "re2.pyx"
;
  CYTHON_UNUSED int __pyx_v_num_groups
#line 532 "re2.pyx"
;
  int __pyx_v_result
#line 532 "re2.pyx"
;
  int __pyx_v_pos
#line 532 "re2.pyx"
;
  int __pyx_v_lookahead
#line 532 "re2.pyx"
;
  int __pyx_v_num_split
#line 532 "re2.pyx"
;
  char *__pyx_v_cstring
#line 532 "re2.pyx"
;
  re2::StringPiece *__pyx_v_sp
#line 532 "re2.pyx"
;
  re2::StringPiece *__pyx_v_matches
#line 532 "re2.pyx"
;
  PyObject *__pyx_v_resultlist = 0
#line 532 "re2.pyx"
;
  int __pyx_v_encoded
#line 532 "re2.pyx"
;
  PyObject *__pyx_v_match_start = NULL
#line 532 "re2.pyx"
;
  PyObject *__pyx_v_match_end = NULL
#line 532 "re2.pyx"
;
  PyObject *__pyx_v_group = NULL
#line 532 "re2.pyx"
;

#line 532 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 532 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 532 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 532 "re2.pyx"
  int __pyx_t_2;

#line 532 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 532 "re2.pyx"
  int __pyx_t_4;

#line 532 "re2.pyx"
  int __pyx_t_5;

#line 532 "re2.pyx"
  Py_ssize_t __pyx_t_6;

#line 532 "re2.pyx"
  PyObject *(*__pyx_t_7)(PyObject *);

#line 532 "re2.pyx"
  Py_ssize_t __pyx_t_8;

#line 532 "re2.pyx"
  Py_ssize_t __pyx_t_9;

#line 532 "re2.pyx"
  int __pyx_t_10;

#line 532 "re2.pyx"
  __Pyx_RefNannySetupContext("split", 0);

#line 532 "re2.pyx"
  __Pyx_INCREF(__pyx_v_string);

  /* "re2.pyx":538
 *         """
 *         cdef Py_ssize_t size
 *         cdef int num_groups = 1             # <<<<<<<<<<<<<<
 *         cdef int result
 *         cdef int endpos
 */

#line 538 "re2.pyx"
  __pyx_v_num_groups = 1;

  /* "re2.pyx":541
 *         cdef int result
 *         cdef int endpos
 *         cdef int pos = 0             # <<<<<<<<<<<<<<
 *         cdef int lookahead = 0
 *         cdef int num_split = 0
 */

#line 541 "re2.pyx"
  __pyx_v_pos = 0;

  /* "re2.pyx":542
 *         cdef int endpos
 *         cdef int pos = 0
 *         cdef int lookahead = 0             # <<<<<<<<<<<<<<
 *         cdef int num_split = 0
 *         cdef char * cstring
 */

#line 542 "re2.pyx"
  __pyx_v_lookahead = 0;

  /* "re2.pyx":543
 *         cdef int pos = 0
 *         cdef int lookahead = 0
 *         cdef int num_split = 0             # <<<<<<<<<<<<<<
 *         cdef char * cstring
 *         cdef _re2.StringPiece * sp
 */

#line 543 "re2.pyx"
  __pyx_v_num_split = 0;

  /* "re2.pyx":548
 *         cdef _re2.StringPiece * matches
 *         cdef Match m
 *         cdef list resultlist = []             # <<<<<<<<<<<<<<
 *         cdef int encoded = 0
 * 
 */

#line 548 "re2.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 548, __pyx_L1_error)

#line 548 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 548 "re2.pyx"
  __pyx_v_resultlist = ((PyObject*)__pyx_t_1);

#line 548 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":549
 *         cdef Match m
 *         cdef list resultlist = []
 *         cdef int encoded = 0             # <<<<<<<<<<<<<<
 * 
 *         if maxsplit < 0:
 */

#line 549 "re2.pyx"
  __pyx_v_encoded = 0;

  /* "re2.pyx":551
 *         cdef int encoded = 0
 * 
 *         if maxsplit < 0:             # <<<<<<<<<<<<<<
 *             maxsplit = 0
 * 
 */

#line 551 "re2.pyx"
  __pyx_t_2 = ((__pyx_v_maxsplit < 0) != 0);

#line 551 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":552
 * 
 *         if maxsplit < 0:
 *             maxsplit = 0             # <<<<<<<<<<<<<<
 * 
 *         string = unicode_to_bytestring(string, &encoded)
 */

#line 552 "re2.pyx"
    __pyx_v_maxsplit = 0;

    /* "re2.pyx":551
 *         cdef int encoded = 0
 * 
 *         if maxsplit < 0:             # <<<<<<<<<<<<<<
 *             maxsplit = 0
 * 
 */

#line 551 "re2.pyx"
  }

  /* "re2.pyx":554
 *             maxsplit = 0
 * 
 *         string = unicode_to_bytestring(string, &encoded)             # <<<<<<<<<<<<<<
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")
 */

#line 554 "re2.pyx"
  __pyx_t_1 = __pyx_f_3re2_unicode_to_bytestring(__pyx_v_string, (&__pyx_v_encoded)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)

#line 554 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 554 "re2.pyx"
  __Pyx_DECREF_SET(__pyx_v_string, __pyx_t_1);

#line 554 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":555
 * 
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError("expected string or buffer")
 * 
 */

#line 555 "re2.pyx"
  __pyx_t_2 = ((__pyx_f_3re2_pystring_to_bytestring(__pyx_v_string, (&__pyx_v_cstring), (&__pyx_v_size)) == -1L) != 0);

#line 555 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":556
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 * 
 *         encoded = <bint>encoded
 */

#line 556 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)

#line 556 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 556 "re2.pyx"
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 556 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 556 "re2.pyx"
    __PYX_ERR(0, 556, __pyx_L1_error)

    /* "re2.pyx":555
 * 
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError("expected string or buffer")
 * 
 */

#line 555 "re2.pyx"
  }

  /* "re2.pyx":558
 *             raise TypeError("expected string or buffer")
 * 
 *         encoded = <bint>encoded             # <<<<<<<<<<<<<<
 * 
 *         matches = _re2.new_StringPiece_array(self.ngroups + 1)
 */

#line 558 "re2.pyx"
  __pyx_v_encoded = (__pyx_v_encoded != 0);

  /* "re2.pyx":560
 *         encoded = <bint>encoded
 * 
 *         matches = _re2.new_StringPiece_array(self.ngroups + 1)             # <<<<<<<<<<<<<<
 *         sp = new _re2.StringPiece(cstring, size)
 * 
 */

#line 560 "re2.pyx"
  __pyx_v_matches = new_StringPiece_array((__pyx_v_self->ngroups + 1));

  /* "re2.pyx":561
 * 
 *         matches = _re2.new_StringPiece_array(self.ngroups + 1)
 *         sp = new _re2.StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */

#line 561 "re2.pyx"
  __pyx_v_sp = new re2::StringPiece(__pyx_v_cstring, __pyx_v_size);

  /* "re2.pyx":563
 *         sp = new _re2.StringPiece(cstring, size)
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 result = self.re_pattern.Match(sp[0], <int>(pos + lookahead), <int>size, _re2.UNANCHORED, matches, self.ngroups + 1)
 */

#line 563 "re2.pyx"
  while (1) {

    /* "re2.pyx":564
 * 
 *         while True:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 result = self.re_pattern.Match(sp[0], <int>(pos + lookahead), <int>size, _re2.UNANCHORED, matches, self.ngroups + 1)
 *             if result == 0:
 */

#line 564 "re2.pyx"
    {

#line 564 "re2.pyx"
        #ifdef WITH_THREAD

#line 564 "re2.pyx"
        PyThreadState *_save;

#line 564 "re2.pyx"
        Py_UNBLOCK_THREADS

#line 564 "re2.pyx"
        #endif

#line 564 "re2.pyx"
        /*try:*/ {

          /* "re2.pyx":565
 *         while True:
 *             with nogil:
 *                 result = self.re_pattern.Match(sp[0], <int>(pos + lookahead), <int>size, _re2.UNANCHORED, matches, self.ngroups + 1)             # <<<<<<<<<<<<<<
 *             if result == 0:
 *                 break
 */

#line 565 "re2.pyx"
          __pyx_v_result = __pyx_v_self->re_pattern->Match((__pyx_v_sp[0]), ((int)(__pyx_v_pos + __pyx_v_lookahead)), ((int)__pyx_v_size), RE2::UNANCHORED, __pyx_v_matches, (__pyx_v_self->ngroups + 1));

#line 565 "re2.pyx"
        }

        /* "re2.pyx":564
 * 
 *         while True:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 result = self.re_pattern.Match(sp[0], <int>(pos + lookahead), <int>size, _re2.UNANCHORED, matches, self.ngroups + 1)
 *             if result == 0:
 */

#line 564 "re2.pyx"
        /*finally:*/ {

#line 564 "re2.pyx"
          /*normal exit:*/{

#line 564 "re2.pyx"
            #ifdef WITH_THREAD

#line 564 "re2.pyx"
            Py_BLOCK_THREADS

#line 564 "re2.pyx"
            #endif

#line 564 "re2.pyx"
            goto __pyx_L11;

#line 564 "re2.pyx"
          }

#line 564 "re2.pyx"
          __pyx_L11:;

#line 564 "re2.pyx"
        }

#line 564 "re2.pyx"
    }

    /* "re2.pyx":566
 *             with nogil:
 *                 result = self.re_pattern.Match(sp[0], <int>(pos + lookahead), <int>size, _re2.UNANCHORED, matches, self.ngroups + 1)
 *             if result == 0:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */

#line 566 "re2.pyx"
    __pyx_t_2 = ((__pyx_v_result == 0) != 0);

#line 566 "re2.pyx"
    if (__pyx_t_2) {

      /* "re2.pyx":567
 *                 result = self.re_pattern.Match(sp[0], <int>(pos + lookahead), <int>size, _re2.UNANCHORED, matches, self.ngroups + 1)
 *             if result == 0:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             match_start = matches[0].data() - cstring
 */

#line 567 "re2.pyx"
      goto __pyx_L6_break;

      /* "re2.pyx":566
 *             with nogil:
 *                 result = self.re_pattern.Match(sp[0], <int>(pos + lookahead), <int>size, _re2.UNANCHORED, matches, self.ngroups + 1)
 *             if result == 0:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */

#line 566 "re2.pyx"
    }

    /* "re2.pyx":569
 *                 break
 * 
 *             match_start = matches[0].data() - cstring             # <<<<<<<<<<<<<<
 *             match_end = match_start + matches[0].length()
 * 
 */

#line 569 "re2.pyx"
    __pyx_t_1 = __Pyx_PyInt_From_ptrdiff_t(((__pyx_v_matches[0]).data() - __pyx_v_cstring)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)

#line 569 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 569 "re2.pyx"
    __Pyx_XDECREF_SET(__pyx_v_match_start, __pyx_t_1);

#line 569 "re2.pyx"
    __pyx_t_1 = 0;

    /* "re2.pyx":570
 * 
 *             match_start = matches[0].data() - cstring
 *             match_end = match_start + matches[0].length()             # <<<<<<<<<<<<<<
 * 
 *             # If an empty match, just look ahead until you find something
 */

#line 570 "re2.pyx"
    __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_matches[0]).length()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)

#line 570 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 570 "re2.pyx"
    __pyx_t_3 = PyNumber_Add(__pyx_v_match_start, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 570, __pyx_L1_error)

#line 570 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 570 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 570 "re2.pyx"
    __Pyx_XDECREF_SET(__pyx_v_match_end, __pyx_t_3);

#line 570 "re2.pyx"
    __pyx_t_3 = 0;

    /* "re2.pyx":573
 * 
 *             # If an empty match, just look ahead until you find something
 *             if match_start == match_end:             # <<<<<<<<<<<<<<
 *                 if pos + lookahead == size:
 *                     break
 */

#line 573 "re2.pyx"
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_match_start, __pyx_v_match_end, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 573, __pyx_L1_error)

#line 573 "re2.pyx"
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 573, __pyx_L1_error)

#line 573 "re2.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 573 "re2.pyx"
    if (__pyx_t_2) {

      /* "re2.pyx":574
 *             # If an empty match, just look ahead until you find something
 *             if match_start == match_end:
 *                 if pos + lookahead == size:             # <<<<<<<<<<<<<<
 *                     break
 *                 lookahead += 1
 */

#line 574 "re2.pyx"
      __pyx_t_2 = (((__pyx_v_pos + __pyx_v_lookahead) == __pyx_v_size) != 0);

#line 574 "re2.pyx"
      if (__pyx_t_2) {

        /* "re2.pyx":575
 *             if match_start == match_end:
 *                 if pos + lookahead == size:
 *                     break             # <<<<<<<<<<<<<<
 *                 lookahead += 1
 *                 continue
 */

#line 575 "re2.pyx"
        goto __pyx_L6_break;

        /* "re2.pyx":574
 *             # If an empty match, just look ahead until you find something
 *             if match_start == match_end:
 *                 if pos + lookahead == size:             # <<<<<<<<<<<<<<
 *                     break
 *                 lookahead += 1
 */

#line 574 "re2.pyx"
      }

      /* "re2.pyx":576
 *                 if pos + lookahead == size:
 *                     break
 *                 lookahead += 1             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */

#line 576 "re2.pyx"
      __pyx_v_lookahead = (__pyx_v_lookahead + 1);

      /* "re2.pyx":577
 *                     break
 *                 lookahead += 1
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             if encoded:
 */

#line 577 "re2.pyx"
      goto __pyx_L5_continue;

      /* "re2.pyx":573
 * 
 *             # If an empty match, just look ahead until you find something
 *             if match_start == match_end:             # <<<<<<<<<<<<<<
 *                 if pos + lookahead == size:
 *                     break
 */

#line 573 "re2.pyx"
    }

    /* "re2.pyx":579
 *                 continue
 * 
 *             if encoded:             # <<<<<<<<<<<<<<
 *                 resultlist.append(char_to_utf8(&sp.data()[pos], match_start - pos))
 *             else:
 */

#line 579 "re2.pyx"
    __pyx_t_2 = (__pyx_v_encoded != 0);

#line 579 "re2.pyx"
    if (__pyx_t_2) {

      /* "re2.pyx":580
 * 
 *             if encoded:
 *                 resultlist.append(char_to_utf8(&sp.data()[pos], match_start - pos))             # <<<<<<<<<<<<<<
 *             else:
 *                 resultlist.append(sp.data()[pos:match_start])
 */

#line 580 "re2.pyx"
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_pos); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 580, __pyx_L1_error)

#line 580 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 580 "re2.pyx"
      __pyx_t_1 = PyNumber_Subtract(__pyx_v_match_start, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 580, __pyx_L1_error)

#line 580 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 580 "re2.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 580 "re2.pyx"
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 580, __pyx_L1_error)

#line 580 "re2.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 580 "re2.pyx"
      __pyx_t_1 = __pyx_f_3re2_char_to_utf8((&(__pyx_v_sp->data()[__pyx_v_pos])), __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 580, __pyx_L1_error)

#line 580 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 580 "re2.pyx"
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 580, __pyx_L1_error)

#line 580 "re2.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "re2.pyx":579
 *                 continue
 * 
 *             if encoded:             # <<<<<<<<<<<<<<
 *                 resultlist.append(char_to_utf8(&sp.data()[pos], match_start - pos))
 *             else:
 */

#line 579 "re2.pyx"
      goto __pyx_L15;

#line 579 "re2.pyx"
    }

    /* "re2.pyx":582
 *                 resultlist.append(char_to_utf8(&sp.data()[pos], match_start - pos))
 *             else:
 *                 resultlist.append(sp.data()[pos:match_start])             # <<<<<<<<<<<<<<
 *             if self.ngroups > 0:
 *                 for group in range(self.ngroups):
 */

#line 582 "re2.pyx"
    /*else*/ {

#line 582 "re2.pyx"
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_match_start); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 582, __pyx_L1_error)

#line 582 "re2.pyx"
      __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_sp->data()) + __pyx_v_pos, __pyx_t_6 - __pyx_v_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)

#line 582 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 582 "re2.pyx"
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 582, __pyx_L1_error)

#line 582 "re2.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 582 "re2.pyx"
    }

#line 582 "re2.pyx"
    __pyx_L15:;

    /* "re2.pyx":583
 *             else:
 *                 resultlist.append(sp.data()[pos:match_start])
 *             if self.ngroups > 0:             # <<<<<<<<<<<<<<
 *                 for group in range(self.ngroups):
 *                     if matches[group + 1].data() == NULL:
 */

#line 583 "re2.pyx"
    __pyx_t_2 = ((__pyx_v_self->ngroups > 0) != 0);

#line 583 "re2.pyx"
    if (__pyx_t_2) {

      /* "re2.pyx":584
 *                 resultlist.append(sp.data()[pos:match_start])
 *             if self.ngroups > 0:
 *                 for group in range(self.ngroups):             # <<<<<<<<<<<<<<
 *                     if matches[group + 1].data() == NULL:
 *                         resultlist.append(None)
 */

#line 584 "re2.pyx"
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->ngroups); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)

#line 584 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 584 "re2.pyx"
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 584, __pyx_L1_error)

#line 584 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 584 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_1);

#line 584 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 584 "re2.pyx"
      __pyx_t_1 = 0;

#line 584 "re2.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)

#line 584 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 584 "re2.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 584 "re2.pyx"
      if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {

#line 584 "re2.pyx"
        __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;

#line 584 "re2.pyx"
        __pyx_t_7 = NULL;

#line 584 "re2.pyx"
      } else {
        __pyx_t_6 = -1; 
#line 584 "re2.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 584, __pyx_L1_error)

#line 584 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 584 "re2.pyx"
        __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 584, __pyx_L1_error)

#line 584 "re2.pyx"
      }

#line 584 "re2.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 584 "re2.pyx"
      for (;;) {

#line 584 "re2.pyx"
        if (likely(!__pyx_t_7)) {

#line 584 "re2.pyx"
          if (likely(PyList_CheckExact(__pyx_t_3))) {

#line 584 "re2.pyx"
            if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 584 "re2.pyx"
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 584 "re2.pyx"
            __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 584, __pyx_L1_error)

#line 584 "re2.pyx"
            #else

#line 584 "re2.pyx"
            __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)

#line 584 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 584 "re2.pyx"
            #endif

#line 584 "re2.pyx"
          } else {

#line 584 "re2.pyx"
            if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 584 "re2.pyx"
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 584 "re2.pyx"
            __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 584, __pyx_L1_error)

#line 584 "re2.pyx"
            #else

#line 584 "re2.pyx"
            __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)

#line 584 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 584 "re2.pyx"
            #endif

#line 584 "re2.pyx"
          }
        } else 
#line 584 "re2.pyx"
{

#line 584 "re2.pyx"
          __pyx_t_1 = __pyx_t_7(__pyx_t_3);

#line 584 "re2.pyx"
          if (unlikely(!__pyx_t_1)) {

#line 584 "re2.pyx"
            PyObject* exc_type = PyErr_Occurred();

#line 584 "re2.pyx"
            if (exc_type) {

#line 584 "re2.pyx"
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 584 "re2.pyx"
              else __PYX_ERR(0, 584, __pyx_L1_error)

#line 584 "re2.pyx"
            }

#line 584 "re2.pyx"
            break;

#line 584 "re2.pyx"
          }

#line 584 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 584 "re2.pyx"
        }

#line 584 "re2.pyx"
        __Pyx_XDECREF_SET(__pyx_v_group, __pyx_t_1);

#line 584 "re2.pyx"
        __pyx_t_1 = 0;

        /* "re2.pyx":585
 *             if self.ngroups > 0:
 *                 for group in range(self.ngroups):
 *                     if matches[group + 1].data() == NULL:             # <<<<<<<<<<<<<<
 *                         resultlist.append(None)
 *                     else:
 */

#line 585 "re2.pyx"
        __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_group, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L1_error)

#line 585 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 585 "re2.pyx"
        __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L1_error)

#line 585 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 585 "re2.pyx"
        __pyx_t_2 = (((__pyx_v_matches[__pyx_t_8]).data() == NULL) != 0);

#line 585 "re2.pyx"
        if (__pyx_t_2) {

          /* "re2.pyx":586
 *                 for group in range(self.ngroups):
 *                     if matches[group + 1].data() == NULL:
 *                         resultlist.append(None)             # <<<<<<<<<<<<<<
 *                     else:
 *                         if encoded:
 */

#line 586 "re2.pyx"
          __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_resultlist, Py_None); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 586, __pyx_L1_error)

          /* "re2.pyx":585
 *             if self.ngroups > 0:
 *                 for group in range(self.ngroups):
 *                     if matches[group + 1].data() == NULL:             # <<<<<<<<<<<<<<
 *                         resultlist.append(None)
 *                     else:
 */

#line 585 "re2.pyx"
          goto __pyx_L19;

#line 585 "re2.pyx"
        }

        /* "re2.pyx":588
 *                         resultlist.append(None)
 *                     else:
 *                         if encoded:             # <<<<<<<<<<<<<<
 *                             resultlist.append(char_to_utf8(matches[group + 1].data(), matches[group + 1].length()))
 *                         else:
 */

#line 588 "re2.pyx"
        /*else*/ {

#line 588 "re2.pyx"
          __pyx_t_2 = (__pyx_v_encoded != 0);

#line 588 "re2.pyx"
          if (__pyx_t_2) {

            /* "re2.pyx":589
 *                     else:
 *                         if encoded:
 *                             resultlist.append(char_to_utf8(matches[group + 1].data(), matches[group + 1].length()))             # <<<<<<<<<<<<<<
 *                         else:
 *                             resultlist.append(matches[group + 1].data()[:matches[group + 1].length()])
 */

#line 589 "re2.pyx"
            __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_group, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 589, __pyx_L1_error)

#line 589 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 589 "re2.pyx"
            __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 589, __pyx_L1_error)

#line 589 "re2.pyx"
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 589 "re2.pyx"
            __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_group, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 589, __pyx_L1_error)

#line 589 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 589 "re2.pyx"
            __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 589, __pyx_L1_error)

#line 589 "re2.pyx"
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 589 "re2.pyx"
            __pyx_t_1 = __pyx_f_3re2_char_to_utf8((__pyx_v_matches[__pyx_t_8]).data(), (__pyx_v_matches[__pyx_t_9]).length()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 589, __pyx_L1_error)

#line 589 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 589 "re2.pyx"
            __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 589, __pyx_L1_error)

#line 589 "re2.pyx"
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "re2.pyx":588
 *                         resultlist.append(None)
 *                     else:
 *                         if encoded:             # <<<<<<<<<<<<<<
 *                             resultlist.append(char_to_utf8(matches[group + 1].data(), matches[group + 1].length()))
 *                         else:
 */

#line 588 "re2.pyx"
            goto __pyx_L20;

#line 588 "re2.pyx"
          }

          /* "re2.pyx":591
 *                             resultlist.append(char_to_utf8(matches[group + 1].data(), matches[group + 1].length()))
 *                         else:
 *                             resultlist.append(matches[group + 1].data()[:matches[group + 1].length()])             # <<<<<<<<<<<<<<
 * 
 *             # offset the pos to move to the next point
 */

#line 591 "re2.pyx"
          /*else*/ {

#line 591 "re2.pyx"
            __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_group, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)

#line 591 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 591 "re2.pyx"
            __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 591, __pyx_L1_error)

#line 591 "re2.pyx"
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 591 "re2.pyx"
            __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_group, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)

#line 591 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 591 "re2.pyx"
            __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 591, __pyx_L1_error)

#line 591 "re2.pyx"
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 591 "re2.pyx"
            __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(((const char*)(__pyx_v_matches[__pyx_t_9]).data()) + 0, (__pyx_v_matches[__pyx_t_8]).length() - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)

#line 591 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 591 "re2.pyx"
            __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 591, __pyx_L1_error)

#line 591 "re2.pyx"
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 591 "re2.pyx"
          }

#line 591 "re2.pyx"
          __pyx_L20:;

#line 591 "re2.pyx"
        }

#line 591 "re2.pyx"
        __pyx_L19:;

        /* "re2.pyx":584
 *                 resultlist.append(sp.data()[pos:match_start])
 *             if self.ngroups > 0:
 *                 for group in range(self.ngroups):             # <<<<<<<<<<<<<<
 *                     if matches[group + 1].data() == NULL:
 *                         resultlist.append(None)
 */

#line 584 "re2.pyx"
      }

#line 584 "re2.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "re2.pyx":583
 *             else:
 *                 resultlist.append(sp.data()[pos:match_start])
 *             if self.ngroups > 0:             # <<<<<<<<<<<<<<
 *                 for group in range(self.ngroups):
 *                     if matches[group + 1].data() == NULL:
 */

#line 583 "re2.pyx"
    }

    /* "re2.pyx":594
 * 
 *             # offset the pos to move to the next point
 *             pos = match_end             # <<<<<<<<<<<<<<
 *             lookahead = 0
 * 
 */

#line 594 "re2.pyx"
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_match_end); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 594, __pyx_L1_error)

#line 594 "re2.pyx"
    __pyx_v_pos = __pyx_t_4;

    /* "re2.pyx":595
 *             # offset the pos to move to the next point
 *             pos = match_end
 *             lookahead = 0             # <<<<<<<<<<<<<<
 * 
 *             num_split += 1
 */

#line 595 "re2.pyx"
    __pyx_v_lookahead = 0;

    /* "re2.pyx":597
 *             lookahead = 0
 * 
 *             num_split += 1             # <<<<<<<<<<<<<<
 *             if maxsplit and num_split >= maxsplit:
 *                 break
 */

#line 597 "re2.pyx"
    __pyx_v_num_split = (__pyx_v_num_split + 1);

    /* "re2.pyx":598
 * 
 *             num_split += 1
 *             if maxsplit and num_split >= maxsplit:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */

#line 598 "re2.pyx"
    __pyx_t_10 = (__pyx_v_maxsplit != 0);

#line 598 "re2.pyx"
    if (__pyx_t_10) {

#line 598 "re2.pyx"
    } else {

#line 598 "re2.pyx"
      __pyx_t_2 = __pyx_t_10;

#line 598 "re2.pyx"
      goto __pyx_L22_bool_binop_done;

#line 598 "re2.pyx"
    }

#line 598 "re2.pyx"
    __pyx_t_10 = ((__pyx_v_num_split >= __pyx_v_maxsplit) != 0);

#line 598 "re2.pyx"
    __pyx_t_2 = __pyx_t_10;

#line 598 "re2.pyx"
    __pyx_L22_bool_binop_done:;

#line 598 "re2.pyx"
    if (__pyx_t_2) {

      /* "re2.pyx":599
 *             num_split += 1
 *             if maxsplit and num_split >= maxsplit:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         if encoded:
 */

#line 599 "re2.pyx"
      goto __pyx_L6_break;

      /* "re2.pyx":598
 * 
 *             num_split += 1
 *             if maxsplit and num_split >= maxsplit:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */

#line 598 "re2.pyx"
    }

#line 598 "re2.pyx"
    __pyx_L5_continue:;

#line 598 "re2.pyx"
  }

#line 598 "re2.pyx"
  __pyx_L6_break:;

  /* "re2.pyx":601
 *                 break
 * 
 *         if encoded:             # <<<<<<<<<<<<<<
 *             resultlist.append(char_to_utf8(&sp.data()[pos], sp.length() - pos))
 *         else:
 */

#line 601 "re2.pyx"
  __pyx_t_2 = (__pyx_v_encoded != 0);

#line 601 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":602
 * 
 *         if encoded:
 *             resultlist.append(char_to_utf8(&sp.data()[pos], sp.length() - pos))             # <<<<<<<<<<<<<<
 *         else:
 *             resultlist.append(sp.data()[pos:])
 */

#line 602 "re2.pyx"
    __pyx_t_3 = __pyx_f_3re2_char_to_utf8((&(__pyx_v_sp->data()[__pyx_v_pos])), (__pyx_v_sp->length() - __pyx_v_pos)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 602, __pyx_L1_error)

#line 602 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 602 "re2.pyx"
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_3); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 602, __pyx_L1_error)

#line 602 "re2.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "re2.pyx":601
 *                 break
 * 
 *         if encoded:             # <<<<<<<<<<<<<<
 *             resultlist.append(char_to_utf8(&sp.data()[pos], sp.length() - pos))
 *         else:
 */

#line 601 "re2.pyx"
    goto __pyx_L24;

#line 601 "re2.pyx"
  }

  /* "re2.pyx":604
 *             resultlist.append(char_to_utf8(&sp.data()[pos], sp.length() - pos))
 *         else:
 *             resultlist.append(sp.data()[pos:])             # <<<<<<<<<<<<<<
 *         _re2.delete_StringPiece_array(matches)
 *         del sp
 */

#line 604 "re2.pyx"
  /*else*/ {

#line 604 "re2.pyx"
    __pyx_t_3 = __Pyx_PyBytes_FromString(((const char*)__pyx_v_sp->data()) + __pyx_v_pos); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 604, __pyx_L1_error)

#line 604 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 604 "re2.pyx"
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_3); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 604, __pyx_L1_error)

#line 604 "re2.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 604 "re2.pyx"
  }

#line 604 "re2.pyx"
  __pyx_L24:;

  /* "re2.pyx":605
 *         else:
 *             resultlist.append(sp.data()[pos:])
 *         _re2.delete_StringPiece_array(matches)             # <<<<<<<<<<<<<<
 *         del sp
 *         return resultlist
 */

#line 605 "re2.pyx"
  delete_StringPiece_array(__pyx_v_matches);

  /* "re2.pyx":606
 *             resultlist.append(sp.data()[pos:])
 *         _re2.delete_StringPiece_array(matches)
 *         del sp             # <<<<<<<<<<<<<<
 *         return resultlist
 * 
 */

#line 606 "re2.pyx"
  delete __pyx_v_sp;

  /* "re2.pyx":607
 *         _re2.delete_StringPiece_array(matches)
 *         del sp
 *         return resultlist             # <<<<<<<<<<<<<<
 * 
 *     def sub(self, repl, string, int count=0):
 */

#line 607 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 607 "re2.pyx"
  __Pyx_INCREF(__pyx_v_resultlist);

#line 607 "re2.pyx"
  __pyx_r = __pyx_v_resultlist;

#line 607 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":532
 *         return self._finditer(string, pos, endpos, 1)
 * 
 *     def split(self, string, int maxsplit=0):             # <<<<<<<<<<<<<<
 *         """
 *         split(string[, maxsplit = 0]) --> list
 */

#line 532 "re2.pyx"


#line 532 "re2.pyx"
  /* function exit code */

#line 532 "re2.pyx"
  __pyx_L1_error:;

#line 532 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 532 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 532 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern.split", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 532 "re2.pyx"
  __pyx_r = NULL;

#line 532 "re2.pyx"
  __pyx_L0:;

#line 532 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_resultlist);

#line 532 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_match_start);

#line 532 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_match_end);

#line 532 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_group);

#line 532 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_string);

#line 532 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 532 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 532 "re2.pyx"
  return __pyx_r;

#line 532 "re2.pyx"
}

/* "re2.pyx":609
 *         return resultlist
 * 
 *     def sub(self, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *         """
 *         sub(repl, string[, count = 0]) --> newstring
 */

#line 609 "re2.pyx"


#line 609 "re2.pyx"
/* Python wrapper */

#line 609 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_13sub(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 609 "re2.pyx"
static char __pyx_doc_3re2_7Pattern_12sub[] = "File: re2.pyx (starting at line 609)\n\n        sub(repl, string[, count = 0]) --> newstring\n        Return the string obtained by replacing the leftmost non-overlapping\n        occurrences of pattern in string by the replacement repl.\n        ";

#line 609 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_13sub(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_repl = 0
#line 609 "re2.pyx"
;
  PyObject *__pyx_v_string = 0
#line 609 "re2.pyx"
;
  int __pyx_v_count
#line 609 "re2.pyx"
;

#line 609 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 609 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 609 "re2.pyx"
  __Pyx_RefNannySetupContext("sub (wrapper)", 0);

#line 609 "re2.pyx"
  {

#line 609 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_repl,&__pyx_n_s_string,&__pyx_n_s_count,0};

#line 609 "re2.pyx"
    PyObject* values[3] = {0,0,0};

#line 609 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 609 "re2.pyx"
      Py_ssize_t kw_args;

#line 609 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 609 "re2.pyx"
      switch (pos_args) {
        case  3: 
#line 609 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 609 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 609 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 609 "re2.pyx"
        case  0: break;
        default: 
#line 609 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 609 "re2.pyx"
      }

#line 609 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 609 "re2.pyx"
      switch (pos_args) {

#line 609 "re2.pyx"
        case  0:

#line 609 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_repl)) != 0)) kw_args--;
        else 
#line 609 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 609 "re2.pyx"
        case  1:

#line 609 "re2.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;

#line 609 "re2.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sub", 0, 2, 3, 1); 
#line 609 "re2.pyx"
__PYX_ERR(0, 609, __pyx_L3_error)

#line 609 "re2.pyx"
        }

#line 609 "re2.pyx"
        case  2:

#line 609 "re2.pyx"
        if (kw_args > 0) {

#line 609 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_count);

#line 609 "re2.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 609 "re2.pyx"
        }

#line 609 "re2.pyx"
      }

#line 609 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 609 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sub") < 0)) __PYX_ERR(0, 609, __pyx_L3_error)

#line 609 "re2.pyx"
      }

#line 609 "re2.pyx"
    } else {

#line 609 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 609 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 609 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 609 "re2.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 609 "re2.pyx"
        break;
        default: 
#line 609 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 609 "re2.pyx"
      }

#line 609 "re2.pyx"
    }

#line 609 "re2.pyx"
    __pyx_v_repl = values[0];

#line 609 "re2.pyx"
    __pyx_v_string = values[1];

#line 609 "re2.pyx"
    if (values[2]) {

#line 609 "re2.pyx"
      __pyx_v_count = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 609, __pyx_L3_error)

#line 609 "re2.pyx"
    } else {

#line 609 "re2.pyx"
      __pyx_v_count = ((int)0);

#line 609 "re2.pyx"
    }

#line 609 "re2.pyx"
  }

#line 609 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 609 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sub", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 609 "re2.pyx"
__PYX_ERR(0, 609, __pyx_L3_error)

#line 609 "re2.pyx"
  __pyx_L3_error:;

#line 609 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern.sub", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 609 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 609 "re2.pyx"
  return NULL;

#line 609 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 609 "re2.pyx"
__pyx_pf_3re2_7Pattern_12sub(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_repl, __pyx_v_string, __pyx_v_count);

#line 609 "re2.pyx"


#line 609 "re2.pyx"
  /* function exit code */

#line 609 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 609 "re2.pyx"
  return __pyx_r;

#line 609 "re2.pyx"
}

#line 609 "re2.pyx"


#line 609 "re2.pyx"
static PyObject *__pyx_pf_3re2_7Pattern_12sub(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count) {

#line 609 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 609 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 609 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 609 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 609 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 609 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 609 "re2.pyx"
  int __pyx_t_5;

#line 609 "re2.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 609 "re2.pyx"
  __Pyx_RefNannySetupContext("sub", 0);

  /* "re2.pyx":615
 *         occurrences of pattern in string by the replacement repl.
 *         """
 *         return self.subn(repl, string, count)[0]             # <<<<<<<<<<<<<<
 * 
 *     def subn(self, repl, istring, int count=0):
 */

#line 615 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 615 "re2.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_subn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 615, __pyx_L1_error)

#line 615 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 615 "re2.pyx"
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_count); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 615, __pyx_L1_error)

#line 615 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 615 "re2.pyx"
  __pyx_t_4 = NULL;

#line 615 "re2.pyx"
  __pyx_t_5 = 0;

#line 615 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 615 "re2.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);

#line 615 "re2.pyx"
    if (likely(__pyx_t_4)) {

#line 615 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 615 "re2.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 615 "re2.pyx"
      __Pyx_INCREF(function);

#line 615 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 615 "re2.pyx"
      __pyx_t_5 = 1;

#line 615 "re2.pyx"
    }

#line 615 "re2.pyx"
  }

#line 615 "re2.pyx"
  #if CYTHON_FAST_PYCALL

#line 615 "re2.pyx"
  if (PyFunction_Check(__pyx_t_2)) {

#line 615 "re2.pyx"
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_repl, __pyx_v_string, __pyx_t_3};

#line 615 "re2.pyx"
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 615, __pyx_L1_error)

#line 615 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 615 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 615 "re2.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 615 "re2.pyx"
  } else

#line 615 "re2.pyx"
  #endif

#line 615 "re2.pyx"
  #if CYTHON_FAST_PYCCALL

#line 615 "re2.pyx"
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {

#line 615 "re2.pyx"
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_repl, __pyx_v_string, __pyx_t_3};

#line 615 "re2.pyx"
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 615, __pyx_L1_error)

#line 615 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 615 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 615 "re2.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 615 "re2.pyx"
  } else

#line 615 "re2.pyx"
  #endif

#line 615 "re2.pyx"
  {

#line 615 "re2.pyx"
    __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 615, __pyx_L1_error)

#line 615 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 615 "re2.pyx"
    if (__pyx_t_4) {

#line 615 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 615 "re2.pyx"
    }

#line 615 "re2.pyx"
    __Pyx_INCREF(__pyx_v_repl);

#line 615 "re2.pyx"
    __Pyx_GIVEREF(__pyx_v_repl);

#line 615 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_repl);

#line 615 "re2.pyx"
    __Pyx_INCREF(__pyx_v_string);

#line 615 "re2.pyx"
    __Pyx_GIVEREF(__pyx_v_string);

#line 615 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_string);

#line 615 "re2.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 615 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_t_3);

#line 615 "re2.pyx"
    __pyx_t_3 = 0;

#line 615 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 615, __pyx_L1_error)

#line 615 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 615 "re2.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 615 "re2.pyx"
  }

#line 615 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 615 "re2.pyx"
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 615, __pyx_L1_error)

#line 615 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 615 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 615 "re2.pyx"
  __pyx_r = __pyx_t_2;

#line 615 "re2.pyx"
  __pyx_t_2 = 0;

#line 615 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":609
 *         return resultlist
 * 
 *     def sub(self, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *         """
 *         sub(repl, string[, count = 0]) --> newstring
 */

#line 609 "re2.pyx"


#line 609 "re2.pyx"
  /* function exit code */

#line 609 "re2.pyx"
  __pyx_L1_error:;

#line 609 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 609 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 609 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 609 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 609 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 609 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern.sub", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 609 "re2.pyx"
  __pyx_r = NULL;

#line 609 "re2.pyx"
  __pyx_L0:;

#line 609 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 609 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 609 "re2.pyx"
  return __pyx_r;

#line 609 "re2.pyx"
}

/* "re2.pyx":617
 *         return self.subn(repl, string, count)[0]
 * 
 *     def subn(self, repl, istring, int count=0):             # <<<<<<<<<<<<<<
 *         """
 *         subn(repl, string[, count = 0]) --> (newstring, number of subs)
 */

#line 617 "re2.pyx"


#line 617 "re2.pyx"
/* Python wrapper */

#line 617 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_15subn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 617 "re2.pyx"
static char __pyx_doc_3re2_7Pattern_14subn[] = "File: re2.pyx (starting at line 617)\n\n        subn(repl, string[, count = 0]) --> (newstring, number of subs)\n        Return the tuple (new_string, number_of_subs_made) found by replacing\n        the leftmost non-overlapping occurrences of pattern with the\n        replacement repl.\n        ";

#line 617 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_15subn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_repl = 0
#line 617 "re2.pyx"
;
  PyObject *__pyx_v_istring = 0
#line 617 "re2.pyx"
;
  int __pyx_v_count
#line 617 "re2.pyx"
;

#line 617 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 617 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 617 "re2.pyx"
  __Pyx_RefNannySetupContext("subn (wrapper)", 0);

#line 617 "re2.pyx"
  {

#line 617 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_repl,&__pyx_n_s_istring,&__pyx_n_s_count,0};

#line 617 "re2.pyx"
    PyObject* values[3] = {0,0,0};

#line 617 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 617 "re2.pyx"
      Py_ssize_t kw_args;

#line 617 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 617 "re2.pyx"
      switch (pos_args) {
        case  3: 
#line 617 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 617 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 617 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 617 "re2.pyx"
        case  0: break;
        default: 
#line 617 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 617 "re2.pyx"
      }

#line 617 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 617 "re2.pyx"
      switch (pos_args) {

#line 617 "re2.pyx"
        case  0:

#line 617 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_repl)) != 0)) kw_args--;
        else 
#line 617 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 617 "re2.pyx"
        case  1:

#line 617 "re2.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_istring)) != 0)) kw_args--;

#line 617 "re2.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("subn", 0, 2, 3, 1); 
#line 617 "re2.pyx"
__PYX_ERR(0, 617, __pyx_L3_error)

#line 617 "re2.pyx"
        }

#line 617 "re2.pyx"
        case  2:

#line 617 "re2.pyx"
        if (kw_args > 0) {

#line 617 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_count);

#line 617 "re2.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 617 "re2.pyx"
        }

#line 617 "re2.pyx"
      }

#line 617 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 617 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "subn") < 0)) __PYX_ERR(0, 617, __pyx_L3_error)

#line 617 "re2.pyx"
      }

#line 617 "re2.pyx"
    } else {

#line 617 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 617 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 617 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 617 "re2.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 617 "re2.pyx"
        break;
        default: 
#line 617 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 617 "re2.pyx"
      }

#line 617 "re2.pyx"
    }

#line 617 "re2.pyx"
    __pyx_v_repl = values[0];

#line 617 "re2.pyx"
    __pyx_v_istring = values[1];

#line 617 "re2.pyx"
    if (values[2]) {

#line 617 "re2.pyx"
      __pyx_v_count = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 617, __pyx_L3_error)

#line 617 "re2.pyx"
    } else {

#line 617 "re2.pyx"
      __pyx_v_count = ((int)0);

#line 617 "re2.pyx"
    }

#line 617 "re2.pyx"
  }

#line 617 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 617 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("subn", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 617 "re2.pyx"
__PYX_ERR(0, 617, __pyx_L3_error)

#line 617 "re2.pyx"
  __pyx_L3_error:;

#line 617 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern.subn", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 617 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 617 "re2.pyx"
  return NULL;

#line 617 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 617 "re2.pyx"
__pyx_pf_3re2_7Pattern_14subn(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_repl, __pyx_v_istring, __pyx_v_count);

#line 617 "re2.pyx"


#line 617 "re2.pyx"
  /* function exit code */

#line 617 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 617 "re2.pyx"
  return __pyx_r;

#line 617 "re2.pyx"
}

#line 617 "re2.pyx"


#line 617 "re2.pyx"
static PyObject *__pyx_pf_3re2_7Pattern_14subn(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_repl, PyObject *__pyx_v_istring, int __pyx_v_count) {
  Py_ssize_t __pyx_v_size
#line 617 "re2.pyx"
;
  char *__pyx_v_cstring
#line 617 "re2.pyx"
;
  std::string *__pyx_v_fixed_repl
#line 617 "re2.pyx"
;
  re2::StringPiece *__pyx_v_sp
#line 617 "re2.pyx"
;
  std::string *__pyx_v_input_str
#line 617 "re2.pyx"
;
  PyObject *__pyx_v_total_replacements = 0
#line 617 "re2.pyx"
;
  int __pyx_v_string_encoded
#line 617 "re2.pyx"
;
  int __pyx_v_repl_encoded
#line 617 "re2.pyx"
;
  CYTHON_UNUSED int __pyx_v_encoded
#line 617 "re2.pyx"
;
  CYTHON_UNUSED PyObject *__pyx_v_string = NULL
#line 617 "re2.pyx"
;
  const char* __pyx_v_s
#line 617 "re2.pyx"
;
  const char* __pyx_v_end
#line 617 "re2.pyx"
;
  int __pyx_v_c
#line 617 "re2.pyx"
;
  PyObject *__pyx_v_result = NULL
#line 617 "re2.pyx"
;

#line 617 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 617 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 617 "re2.pyx"
  int __pyx_t_1;

#line 617 "re2.pyx"
  int __pyx_t_2;

#line 617 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 617 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 617 "re2.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 617 "re2.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 617 "re2.pyx"
  int __pyx_t_7;

#line 617 "re2.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 617 "re2.pyx"
  std::string *__pyx_t_9;

#line 617 "re2.pyx"
  const char* __pyx_t_10;

#line 617 "re2.pyx"
  __Pyx_RefNannySetupContext("subn", 0);

#line 617 "re2.pyx"
  __Pyx_INCREF(__pyx_v_repl);

  /* "re2.pyx":629
 *         cdef _re2.StringPiece * sp
 *         cdef _re2.cpp_string * input_str
 *         cdef total_replacements = 0             # <<<<<<<<<<<<<<
 *         cdef int string_encoded = 0
 *         cdef int repl_encoded = 0
 */

#line 629 "re2.pyx"
  __Pyx_INCREF(__pyx_int_0);

#line 629 "re2.pyx"
  __pyx_v_total_replacements = __pyx_int_0;

  /* "re2.pyx":630
 *         cdef _re2.cpp_string * input_str
 *         cdef total_replacements = 0
 *         cdef int string_encoded = 0             # <<<<<<<<<<<<<<
 *         cdef int repl_encoded = 0
 *         cdef int encoded = 0
 */

#line 630 "re2.pyx"
  __pyx_v_string_encoded = 0;

  /* "re2.pyx":631
 *         cdef total_replacements = 0
 *         cdef int string_encoded = 0
 *         cdef int repl_encoded = 0             # <<<<<<<<<<<<<<
 *         cdef int encoded = 0
 * 
 */

#line 631 "re2.pyx"
  __pyx_v_repl_encoded = 0;

  /* "re2.pyx":632
 *         cdef int string_encoded = 0
 *         cdef int repl_encoded = 0
 *         cdef int encoded = 0             # <<<<<<<<<<<<<<
 * 
 *         if callable(repl):
 */

#line 632 "re2.pyx"
  __pyx_v_encoded = 0;

  /* "re2.pyx":634
 *         cdef int encoded = 0
 * 
 *         if callable(repl):             # <<<<<<<<<<<<<<
 *             # This is a callback, so let's use the custom function
 *             return self._subn_callback(repl, istring, count)
 */

#line 634 "re2.pyx"
  __pyx_t_1 = __Pyx_PyCallable_Check(__pyx_v_repl); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 634, __pyx_L1_error)

#line 634 "re2.pyx"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 634 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":636
 *         if callable(repl):
 *             # This is a callback, so let's use the custom function
 *             return self._subn_callback(repl, istring, count)             # <<<<<<<<<<<<<<
 * 
 *         string = unicode_to_bytestring(istring, &string_encoded)
 */

#line 636 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 636 "re2.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_subn_callback); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 636, __pyx_L1_error)

#line 636 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 636 "re2.pyx"
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_count); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 636, __pyx_L1_error)

#line 636 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 636 "re2.pyx"
    __pyx_t_6 = NULL;

#line 636 "re2.pyx"
    __pyx_t_7 = 0;

#line 636 "re2.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 636 "re2.pyx"
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);

#line 636 "re2.pyx"
      if (likely(__pyx_t_6)) {

#line 636 "re2.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 636 "re2.pyx"
        __Pyx_INCREF(__pyx_t_6);

#line 636 "re2.pyx"
        __Pyx_INCREF(function);

#line 636 "re2.pyx"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 636 "re2.pyx"
        __pyx_t_7 = 1;

#line 636 "re2.pyx"
      }

#line 636 "re2.pyx"
    }

#line 636 "re2.pyx"
    #if CYTHON_FAST_PYCALL

#line 636 "re2.pyx"
    if (PyFunction_Check(__pyx_t_4)) {

#line 636 "re2.pyx"
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_repl, __pyx_v_istring, __pyx_t_5};

#line 636 "re2.pyx"
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 636, __pyx_L1_error)

#line 636 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 636 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 636 "re2.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 636 "re2.pyx"
    } else

#line 636 "re2.pyx"
    #endif

#line 636 "re2.pyx"
    #if CYTHON_FAST_PYCCALL

#line 636 "re2.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {

#line 636 "re2.pyx"
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_repl, __pyx_v_istring, __pyx_t_5};

#line 636 "re2.pyx"
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 636, __pyx_L1_error)

#line 636 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 636 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 636 "re2.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 636 "re2.pyx"
    } else

#line 636 "re2.pyx"
    #endif

#line 636 "re2.pyx"
    {

#line 636 "re2.pyx"
      __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 636, __pyx_L1_error)

#line 636 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 636 "re2.pyx"
      if (__pyx_t_6) {

#line 636 "re2.pyx"
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;

#line 636 "re2.pyx"
      }

#line 636 "re2.pyx"
      __Pyx_INCREF(__pyx_v_repl);

#line 636 "re2.pyx"
      __Pyx_GIVEREF(__pyx_v_repl);

#line 636 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_repl);

#line 636 "re2.pyx"
      __Pyx_INCREF(__pyx_v_istring);

#line 636 "re2.pyx"
      __Pyx_GIVEREF(__pyx_v_istring);

#line 636 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_istring);

#line 636 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_5);

#line 636 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_t_5);

#line 636 "re2.pyx"
      __pyx_t_5 = 0;

#line 636 "re2.pyx"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 636, __pyx_L1_error)

#line 636 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 636 "re2.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 636 "re2.pyx"
    }

#line 636 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 636 "re2.pyx"
    __pyx_r = __pyx_t_3;

#line 636 "re2.pyx"
    __pyx_t_3 = 0;

#line 636 "re2.pyx"
    goto __pyx_L0;

    /* "re2.pyx":634
 *         cdef int encoded = 0
 * 
 *         if callable(repl):             # <<<<<<<<<<<<<<
 *             # This is a callback, so let's use the custom function
 *             return self._subn_callback(repl, istring, count)
 */

#line 634 "re2.pyx"
  }

  /* "re2.pyx":638
 *             return self._subn_callback(repl, istring, count)
 * 
 *         string = unicode_to_bytestring(istring, &string_encoded)             # <<<<<<<<<<<<<<
 *         repl = unicode_to_bytestring(repl, &repl_encoded)
 *         if pystring_to_bytestring(repl, &cstring, &size) == -1:
 */

#line 638 "re2.pyx"
  __pyx_t_3 = __pyx_f_3re2_unicode_to_bytestring(__pyx_v_istring, (&__pyx_v_string_encoded)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 638, __pyx_L1_error)

#line 638 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 638 "re2.pyx"
  __pyx_v_string = __pyx_t_3;

#line 638 "re2.pyx"
  __pyx_t_3 = 0;

  /* "re2.pyx":639
 * 
 *         string = unicode_to_bytestring(istring, &string_encoded)
 *         repl = unicode_to_bytestring(repl, &repl_encoded)             # <<<<<<<<<<<<<<
 *         if pystring_to_bytestring(repl, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")
 */

#line 639 "re2.pyx"
  __pyx_t_3 = __pyx_f_3re2_unicode_to_bytestring(__pyx_v_repl, (&__pyx_v_repl_encoded)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 639, __pyx_L1_error)

#line 639 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 639 "re2.pyx"
  __Pyx_DECREF_SET(__pyx_v_repl, __pyx_t_3);

#line 639 "re2.pyx"
  __pyx_t_3 = 0;

  /* "re2.pyx":640
 *         string = unicode_to_bytestring(istring, &string_encoded)
 *         repl = unicode_to_bytestring(repl, &repl_encoded)
 *         if pystring_to_bytestring(repl, &cstring, &size) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError("expected string or buffer")
 * 
 */

#line 640 "re2.pyx"
  __pyx_t_2 = ((__pyx_f_3re2_pystring_to_bytestring(__pyx_v_repl, (&__pyx_v_cstring), (&__pyx_v_size)) == -1L) != 0);

#line 640 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":641
 *         repl = unicode_to_bytestring(repl, &repl_encoded)
 *         if pystring_to_bytestring(repl, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 * 
 *         fixed_repl = NULL
 */

#line 641 "re2.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 641, __pyx_L1_error)

#line 641 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 641 "re2.pyx"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 641 "re2.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 641 "re2.pyx"
    __PYX_ERR(0, 641, __pyx_L1_error)

    /* "re2.pyx":640
 *         string = unicode_to_bytestring(istring, &string_encoded)
 *         repl = unicode_to_bytestring(repl, &repl_encoded)
 *         if pystring_to_bytestring(repl, &cstring, &size) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError("expected string or buffer")
 * 
 */

#line 640 "re2.pyx"
  }

  /* "re2.pyx":643
 *             raise TypeError("expected string or buffer")
 * 
 *         fixed_repl = NULL             # <<<<<<<<<<<<<<
 *         cdef _re2.const_char_ptr s = cstring
 *         cdef _re2.const_char_ptr end = s + size
 */

#line 643 "re2.pyx"
  __pyx_v_fixed_repl = NULL;

  /* "re2.pyx":644
 * 
 *         fixed_repl = NULL
 *         cdef _re2.const_char_ptr s = cstring             # <<<<<<<<<<<<<<
 *         cdef _re2.const_char_ptr end = s + size
 *         cdef int c = 0
 */

#line 644 "re2.pyx"
  __pyx_v_s = __pyx_v_cstring;

  /* "re2.pyx":645
 *         fixed_repl = NULL
 *         cdef _re2.const_char_ptr s = cstring
 *         cdef _re2.const_char_ptr end = s + size             # <<<<<<<<<<<<<<
 *         cdef int c = 0
 *         while s < end:
 */

#line 645 "re2.pyx"
  __pyx_v_end = (__pyx_v_s + __pyx_v_size);

  /* "re2.pyx":646
 *         cdef _re2.const_char_ptr s = cstring
 *         cdef _re2.const_char_ptr end = s + size
 *         cdef int c = 0             # <<<<<<<<<<<<<<
 *         while s < end:
 *             c = s[0]
 */

#line 646 "re2.pyx"
  __pyx_v_c = 0;

  /* "re2.pyx":647
 *         cdef _re2.const_char_ptr end = s + size
 *         cdef int c = 0
 *         while s < end:             # <<<<<<<<<<<<<<
 *             c = s[0]
 *             if (c == '\\'):
 */

#line 647 "re2.pyx"
  while (1) {

#line 647 "re2.pyx"
    __pyx_t_2 = ((__pyx_v_s < __pyx_v_end) != 0);

#line 647 "re2.pyx"
    if (!__pyx_t_2) break;

    /* "re2.pyx":648
 *         cdef int c = 0
 *         while s < end:
 *             c = s[0]             # <<<<<<<<<<<<<<
 *             if (c == '\\'):
 *                 s += 1
 */

#line 648 "re2.pyx"
    __pyx_v_c = (__pyx_v_s[0]);

    /* "re2.pyx":649
 *         while s < end:
 *             c = s[0]
 *             if (c == '\\'):             # <<<<<<<<<<<<<<
 *                 s += 1
 *                 if s == end:
 */

#line 649 "re2.pyx"
    __pyx_t_2 = ((__pyx_v_c == '\\') != 0);

#line 649 "re2.pyx"
    if (__pyx_t_2) {

      /* "re2.pyx":650
 *             c = s[0]
 *             if (c == '\\'):
 *                 s += 1             # <<<<<<<<<<<<<<
 *                 if s == end:
 *                     raise RegexError("Invalid rewrite pattern")
 */

#line 650 "re2.pyx"
      __pyx_v_s = (__pyx_v_s + 1);

      /* "re2.pyx":651
 *             if (c == '\\'):
 *                 s += 1
 *                 if s == end:             # <<<<<<<<<<<<<<
 *                     raise RegexError("Invalid rewrite pattern")
 *                 c = s[0]
 */

#line 651 "re2.pyx"
      __pyx_t_2 = ((__pyx_v_s == __pyx_v_end) != 0);

#line 651 "re2.pyx"
      if (__pyx_t_2) {

        /* "re2.pyx":652
 *                 s += 1
 *                 if s == end:
 *                     raise RegexError("Invalid rewrite pattern")             # <<<<<<<<<<<<<<
 *                 c = s[0]
 *                 if c == '\\' or (c >= '0' and c <= '9'):
 */

#line 652 "re2.pyx"
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_RegexError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 652, __pyx_L1_error)

#line 652 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 652 "re2.pyx"
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 652, __pyx_L1_error)

#line 652 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 652 "re2.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 652 "re2.pyx"
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 652 "re2.pyx"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 652 "re2.pyx"
        __PYX_ERR(0, 652, __pyx_L1_error)

        /* "re2.pyx":651
 *             if (c == '\\'):
 *                 s += 1
 *                 if s == end:             # <<<<<<<<<<<<<<
 *                     raise RegexError("Invalid rewrite pattern")
 *                 c = s[0]
 */

#line 651 "re2.pyx"
      }

      /* "re2.pyx":653
 *                 if s == end:
 *                     raise RegexError("Invalid rewrite pattern")
 *                 c = s[0]             # <<<<<<<<<<<<<<
 *                 if c == '\\' or (c >= '0' and c <= '9'):
 *                     if fixed_repl != NULL:
 */

#line 653 "re2.pyx"
      __pyx_v_c = (__pyx_v_s[0]);

      /* "re2.pyx":654
 *                     raise RegexError("Invalid rewrite pattern")
 *                 c = s[0]
 *                 if c == '\\' or (c >= '0' and c <= '9'):             # <<<<<<<<<<<<<<
 *                     if fixed_repl != NULL:
 *                         fixed_repl.push_back('\\')
 */

#line 654 "re2.pyx"
      __pyx_t_1 = ((__pyx_v_c == '\\') != 0);

#line 654 "re2.pyx"
      if (!__pyx_t_1) {

#line 654 "re2.pyx"
      } else {

#line 654 "re2.pyx"
        __pyx_t_2 = __pyx_t_1;

#line 654 "re2.pyx"
        goto __pyx_L10_bool_binop_done;

#line 654 "re2.pyx"
      }

#line 654 "re2.pyx"
      __pyx_t_1 = ((__pyx_v_c >= '0') != 0);

#line 654 "re2.pyx"
      if (__pyx_t_1) {

#line 654 "re2.pyx"
      } else {

#line 654 "re2.pyx"
        __pyx_t_2 = __pyx_t_1;

#line 654 "re2.pyx"
        goto __pyx_L10_bool_binop_done;

#line 654 "re2.pyx"
      }

#line 654 "re2.pyx"
      __pyx_t_1 = ((__pyx_v_c <= '9') != 0);

#line 654 "re2.pyx"
      __pyx_t_2 = __pyx_t_1;

#line 654 "re2.pyx"
      __pyx_L10_bool_binop_done:;

#line 654 "re2.pyx"
      if (__pyx_t_2) {

        /* "re2.pyx":655
 *                 c = s[0]
 *                 if c == '\\' or (c >= '0' and c <= '9'):
 *                     if fixed_repl != NULL:             # <<<<<<<<<<<<<<
 *                         fixed_repl.push_back('\\')
 *                         fixed_repl.push_back(c)
 */

#line 655 "re2.pyx"
        __pyx_t_2 = ((__pyx_v_fixed_repl != NULL) != 0);

#line 655 "re2.pyx"
        if (__pyx_t_2) {

          /* "re2.pyx":656
 *                 if c == '\\' or (c >= '0' and c <= '9'):
 *                     if fixed_repl != NULL:
 *                         fixed_repl.push_back('\\')             # <<<<<<<<<<<<<<
 *                         fixed_repl.push_back(c)
 *                 else:
 */

#line 656 "re2.pyx"
          __pyx_v_fixed_repl->push_back('\\');

          /* "re2.pyx":657
 *                     if fixed_repl != NULL:
 *                         fixed_repl.push_back('\\')
 *                         fixed_repl.push_back(c)             # <<<<<<<<<<<<<<
 *                 else:
 *                     if fixed_repl == NULL:
 */

#line 657 "re2.pyx"
          __pyx_v_fixed_repl->push_back(__pyx_v_c);

          /* "re2.pyx":655
 *                 c = s[0]
 *                 if c == '\\' or (c >= '0' and c <= '9'):
 *                     if fixed_repl != NULL:             # <<<<<<<<<<<<<<
 *                         fixed_repl.push_back('\\')
 *                         fixed_repl.push_back(c)
 */

#line 655 "re2.pyx"
        }

        /* "re2.pyx":654
 *                     raise RegexError("Invalid rewrite pattern")
 *                 c = s[0]
 *                 if c == '\\' or (c >= '0' and c <= '9'):             # <<<<<<<<<<<<<<
 *                     if fixed_repl != NULL:
 *                         fixed_repl.push_back('\\')
 */

#line 654 "re2.pyx"
        goto __pyx_L9;

#line 654 "re2.pyx"
      }

      /* "re2.pyx":659
 *                         fixed_repl.push_back(c)
 *                 else:
 *                     if fixed_repl == NULL:             # <<<<<<<<<<<<<<
 *                         fixed_repl = new _re2.cpp_string(cstring, s - cstring - 1)
 *                     if c == 'n':
 */

#line 659 "re2.pyx"
      /*else*/ {

#line 659 "re2.pyx"
        __pyx_t_2 = ((__pyx_v_fixed_repl == NULL) != 0);

#line 659 "re2.pyx"
        if (__pyx_t_2) {

          /* "re2.pyx":660
 *                 else:
 *                     if fixed_repl == NULL:
 *                         fixed_repl = new _re2.cpp_string(cstring, s - cstring - 1)             # <<<<<<<<<<<<<<
 *                     if c == 'n':
 *                         fixed_repl.push_back('\n')
 */

#line 660 "re2.pyx"
          try {

#line 660 "re2.pyx"
            __pyx_t_9 = new std::string(__pyx_v_cstring, ((__pyx_v_s - __pyx_v_cstring) - 1));

#line 660 "re2.pyx"
          } catch(...) {

#line 660 "re2.pyx"
            __Pyx_CppExn2PyErr();

#line 660 "re2.pyx"
            __PYX_ERR(0, 660, __pyx_L1_error)

#line 660 "re2.pyx"
          }

#line 660 "re2.pyx"
          __pyx_v_fixed_repl = __pyx_t_9;

          /* "re2.pyx":659
 *                         fixed_repl.push_back(c)
 *                 else:
 *                     if fixed_repl == NULL:             # <<<<<<<<<<<<<<
 *                         fixed_repl = new _re2.cpp_string(cstring, s - cstring - 1)
 *                     if c == 'n':
 */

#line 659 "re2.pyx"
        }

        /* "re2.pyx":661
 *                     if fixed_repl == NULL:
 *                         fixed_repl = new _re2.cpp_string(cstring, s - cstring - 1)
 *                     if c == 'n':             # <<<<<<<<<<<<<<
 *                         fixed_repl.push_back('\n')
 *                     else:
 */

#line 661 "re2.pyx"
        __pyx_t_2 = ((__pyx_v_c == 'n') != 0);

#line 661 "re2.pyx"
        if (__pyx_t_2) {

          /* "re2.pyx":662
 *                         fixed_repl = new _re2.cpp_string(cstring, s - cstring - 1)
 *                     if c == 'n':
 *                         fixed_repl.push_back('\n')             # <<<<<<<<<<<<<<
 *                     else:
 *                         fixed_repl.push_back('\\')
 */

#line 662 "re2.pyx"
          __pyx_v_fixed_repl->push_back('\n');

          /* "re2.pyx":661
 *                     if fixed_repl == NULL:
 *                         fixed_repl = new _re2.cpp_string(cstring, s - cstring - 1)
 *                     if c == 'n':             # <<<<<<<<<<<<<<
 *                         fixed_repl.push_back('\n')
 *                     else:
 */

#line 661 "re2.pyx"
          goto __pyx_L15;

#line 661 "re2.pyx"
        }

        /* "re2.pyx":664
 *                         fixed_repl.push_back('\n')
 *                     else:
 *                         fixed_repl.push_back('\\')             # <<<<<<<<<<<<<<
 *                         fixed_repl.push_back('\\')
 *                         fixed_repl.push_back(c)
 */

#line 664 "re2.pyx"
        /*else*/ {

#line 664 "re2.pyx"
          __pyx_v_fixed_repl->push_back('\\');

          /* "re2.pyx":665
 *                     else:
 *                         fixed_repl.push_back('\\')
 *                         fixed_repl.push_back('\\')             # <<<<<<<<<<<<<<
 *                         fixed_repl.push_back(c)
 *             else:
 */

#line 665 "re2.pyx"
          __pyx_v_fixed_repl->push_back('\\');

          /* "re2.pyx":666
 *                         fixed_repl.push_back('\\')
 *                         fixed_repl.push_back('\\')
 *                         fixed_repl.push_back(c)             # <<<<<<<<<<<<<<
 *             else:
 *                 if fixed_repl != NULL:
 */

#line 666 "re2.pyx"
          __pyx_v_fixed_repl->push_back(__pyx_v_c);

#line 666 "re2.pyx"
        }

#line 666 "re2.pyx"
        __pyx_L15:;

#line 666 "re2.pyx"
      }

#line 666 "re2.pyx"
      __pyx_L9:;

      /* "re2.pyx":649
 *         while s < end:
 *             c = s[0]
 *             if (c == '\\'):             # <<<<<<<<<<<<<<
 *                 s += 1
 *                 if s == end:
 */

#line 649 "re2.pyx"
      goto __pyx_L7;

#line 649 "re2.pyx"
    }

    /* "re2.pyx":668
 *                         fixed_repl.push_back(c)
 *             else:
 *                 if fixed_repl != NULL:             # <<<<<<<<<<<<<<
 *                     fixed_repl.push_back(c)
 * 
 */

#line 668 "re2.pyx"
    /*else*/ {

#line 668 "re2.pyx"
      __pyx_t_2 = ((__pyx_v_fixed_repl != NULL) != 0);

#line 668 "re2.pyx"
      if (__pyx_t_2) {

        /* "re2.pyx":669
 *             else:
 *                 if fixed_repl != NULL:
 *                     fixed_repl.push_back(c)             # <<<<<<<<<<<<<<
 * 
 *             s += 1
 */

#line 669 "re2.pyx"
        __pyx_v_fixed_repl->push_back(__pyx_v_c);

        /* "re2.pyx":668
 *                         fixed_repl.push_back(c)
 *             else:
 *                 if fixed_repl != NULL:             # <<<<<<<<<<<<<<
 *                     fixed_repl.push_back(c)
 * 
 */

#line 668 "re2.pyx"
      }

#line 668 "re2.pyx"
    }

#line 668 "re2.pyx"
    __pyx_L7:;

    /* "re2.pyx":671
 *                     fixed_repl.push_back(c)
 * 
 *             s += 1             # <<<<<<<<<<<<<<
 *         if fixed_repl != NULL:
 *             sp = new _re2.StringPiece(fixed_repl.c_str())
 */

#line 671 "re2.pyx"
    __pyx_v_s = (__pyx_v_s + 1);

#line 671 "re2.pyx"
  }

  /* "re2.pyx":672
 * 
 *             s += 1
 *         if fixed_repl != NULL:             # <<<<<<<<<<<<<<
 *             sp = new _re2.StringPiece(fixed_repl.c_str())
 *         else:
 */

#line 672 "re2.pyx"
  __pyx_t_2 = ((__pyx_v_fixed_repl != NULL) != 0);

#line 672 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":673
 *             s += 1
 *         if fixed_repl != NULL:
 *             sp = new _re2.StringPiece(fixed_repl.c_str())             # <<<<<<<<<<<<<<
 *         else:
 *             sp = new _re2.StringPiece(cstring, size)
 */

#line 673 "re2.pyx"
    __pyx_v_sp = new re2::StringPiece(__pyx_v_fixed_repl->c_str());

    /* "re2.pyx":672
 * 
 *             s += 1
 *         if fixed_repl != NULL:             # <<<<<<<<<<<<<<
 *             sp = new _re2.StringPiece(fixed_repl.c_str())
 *         else:
 */

#line 672 "re2.pyx"
    goto __pyx_L17;

#line 672 "re2.pyx"
  }

  /* "re2.pyx":675
 *             sp = new _re2.StringPiece(fixed_repl.c_str())
 *         else:
 *             sp = new _re2.StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 * 
 *         input_str = new _re2.cpp_string(<_re2.const_char_ptr>istring)
 */

#line 675 "re2.pyx"
  /*else*/ {

#line 675 "re2.pyx"
    __pyx_v_sp = new re2::StringPiece(__pyx_v_cstring, __pyx_v_size);

#line 675 "re2.pyx"
  }

#line 675 "re2.pyx"
  __pyx_L17:;

  /* "re2.pyx":677
 *             sp = new _re2.StringPiece(cstring, size)
 * 
 *         input_str = new _re2.cpp_string(<_re2.const_char_ptr>istring)             # <<<<<<<<<<<<<<
 *         if not count:
 *             total_replacements = _re2.pattern_GlobalReplace(input_str,
 */

#line 677 "re2.pyx"
  __pyx_t_10 = __Pyx_PyObject_AsString(__pyx_v_istring); if (unlikely((__pyx_t_10 == ((const char*)NULL)) && PyErr_Occurred())) __PYX_ERR(0, 677, __pyx_L1_error)

#line 677 "re2.pyx"
  try {

#line 677 "re2.pyx"
    __pyx_t_9 = new std::string(((const char*)__pyx_t_10));

#line 677 "re2.pyx"
  } catch(...) {

#line 677 "re2.pyx"
    __Pyx_CppExn2PyErr();

#line 677 "re2.pyx"
    __PYX_ERR(0, 677, __pyx_L1_error)

#line 677 "re2.pyx"
  }

#line 677 "re2.pyx"
  __pyx_v_input_str = __pyx_t_9;

  /* "re2.pyx":678
 * 
 *         input_str = new _re2.cpp_string(<_re2.const_char_ptr>istring)
 *         if not count:             # <<<<<<<<<<<<<<
 *             total_replacements = _re2.pattern_GlobalReplace(input_str,
 *                                                             self.re_pattern[0],
 */

#line 678 "re2.pyx"
  __pyx_t_2 = ((!(__pyx_v_count != 0)) != 0);

#line 678 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":679
 *         input_str = new _re2.cpp_string(<_re2.const_char_ptr>istring)
 *         if not count:
 *             total_replacements = _re2.pattern_GlobalReplace(input_str,             # <<<<<<<<<<<<<<
 *                                                             self.re_pattern[0],
 *                                                             sp[0])
 */

#line 679 "re2.pyx"
    __pyx_t_4 = __Pyx_PyInt_From_int(pattern_GlobalReplace(__pyx_v_input_str, (__pyx_v_self->re_pattern[0]), (__pyx_v_sp[0]))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 679, __pyx_L1_error)

#line 679 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 679 "re2.pyx"
    __Pyx_DECREF_SET(__pyx_v_total_replacements, __pyx_t_4);

#line 679 "re2.pyx"
    __pyx_t_4 = 0;

    /* "re2.pyx":678
 * 
 *         input_str = new _re2.cpp_string(<_re2.const_char_ptr>istring)
 *         if not count:             # <<<<<<<<<<<<<<
 *             total_replacements = _re2.pattern_GlobalReplace(input_str,
 *                                                             self.re_pattern[0],
 */

#line 678 "re2.pyx"
    goto __pyx_L18;

#line 678 "re2.pyx"
  }

  /* "re2.pyx":682
 *                                                             self.re_pattern[0],
 *                                                             sp[0])
 *         elif count == 1:             # <<<<<<<<<<<<<<
 *             total_replacements = _re2.pattern_Replace(input_str,
 *                                                       self.re_pattern[0],
 */

#line 682 "re2.pyx"
  __pyx_t_2 = ((__pyx_v_count == 1) != 0);

#line 682 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":683
 *                                                             sp[0])
 *         elif count == 1:
 *             total_replacements = _re2.pattern_Replace(input_str,             # <<<<<<<<<<<<<<
 *                                                       self.re_pattern[0],
 *                                                       sp[0])
 */

#line 683 "re2.pyx"
    __pyx_t_4 = __Pyx_PyInt_From_int(pattern_Replace(__pyx_v_input_str, (__pyx_v_self->re_pattern[0]), (__pyx_v_sp[0]))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 683, __pyx_L1_error)

#line 683 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 683 "re2.pyx"
    __Pyx_DECREF_SET(__pyx_v_total_replacements, __pyx_t_4);

#line 683 "re2.pyx"
    __pyx_t_4 = 0;

    /* "re2.pyx":682
 *                                                             self.re_pattern[0],
 *                                                             sp[0])
 *         elif count == 1:             # <<<<<<<<<<<<<<
 *             total_replacements = _re2.pattern_Replace(input_str,
 *                                                       self.re_pattern[0],
 */

#line 682 "re2.pyx"
    goto __pyx_L18;

#line 682 "re2.pyx"
  }

  /* "re2.pyx":687
 *                                                       sp[0])
 *         else:
 *             del fixed_repl             # <<<<<<<<<<<<<<
 *             del input_str
 *             del sp
 */

#line 687 "re2.pyx"
  /*else*/ {

#line 687 "re2.pyx"
    delete __pyx_v_fixed_repl;

    /* "re2.pyx":688
 *         else:
 *             del fixed_repl
 *             del input_str             # <<<<<<<<<<<<<<
 *             del sp
 *             raise NotImplementedError("So far pyre2 does not support custom replacement counts")
 */

#line 688 "re2.pyx"
    delete __pyx_v_input_str;

    /* "re2.pyx":689
 *             del fixed_repl
 *             del input_str
 *             del sp             # <<<<<<<<<<<<<<
 *             raise NotImplementedError("So far pyre2 does not support custom replacement counts")
 * 
 */

#line 689 "re2.pyx"
    delete __pyx_v_sp;

    /* "re2.pyx":690
 *             del input_str
 *             del sp
 *             raise NotImplementedError("So far pyre2 does not support custom replacement counts")             # <<<<<<<<<<<<<<
 * 
 *         if string_encoded or (repl_encoded and total_replacements > 0):
 */

#line 690 "re2.pyx"
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 690, __pyx_L1_error)

#line 690 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 690 "re2.pyx"
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 690 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 690 "re2.pyx"
    __PYX_ERR(0, 690, __pyx_L1_error)

#line 690 "re2.pyx"
  }

#line 690 "re2.pyx"
  __pyx_L18:;

  /* "re2.pyx":692
 *             raise NotImplementedError("So far pyre2 does not support custom replacement counts")
 * 
 *         if string_encoded or (repl_encoded and total_replacements > 0):             # <<<<<<<<<<<<<<
 *             result = cpp_to_utf8(input_str[0])
 *         else:
 */

#line 692 "re2.pyx"
  __pyx_t_1 = (__pyx_v_string_encoded != 0);

#line 692 "re2.pyx"
  if (!__pyx_t_1) {

#line 692 "re2.pyx"
  } else {

#line 692 "re2.pyx"
    __pyx_t_2 = __pyx_t_1;

#line 692 "re2.pyx"
    goto __pyx_L20_bool_binop_done;

#line 692 "re2.pyx"
  }

#line 692 "re2.pyx"
  __pyx_t_1 = (__pyx_v_repl_encoded != 0);

#line 692 "re2.pyx"
  if (__pyx_t_1) {

#line 692 "re2.pyx"
  } else {

#line 692 "re2.pyx"
    __pyx_t_2 = __pyx_t_1;

#line 692 "re2.pyx"
    goto __pyx_L20_bool_binop_done;

#line 692 "re2.pyx"
  }

#line 692 "re2.pyx"
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_total_replacements, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 692, __pyx_L1_error)

#line 692 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 692, __pyx_L1_error)

#line 692 "re2.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 692 "re2.pyx"
  __pyx_t_2 = __pyx_t_1;

#line 692 "re2.pyx"
  __pyx_L20_bool_binop_done:;

#line 692 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":693
 * 
 *         if string_encoded or (repl_encoded and total_replacements > 0):
 *             result = cpp_to_utf8(input_str[0])             # <<<<<<<<<<<<<<
 *         else:
 *             result = cpp_to_pystring(input_str[0])
 */

#line 693 "re2.pyx"
    __pyx_t_4 = __pyx_f_3re2_cpp_to_utf8((__pyx_v_input_str[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 693, __pyx_L1_error)

#line 693 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 693 "re2.pyx"
    __pyx_v_result = __pyx_t_4;

#line 693 "re2.pyx"
    __pyx_t_4 = 0;

    /* "re2.pyx":692
 *             raise NotImplementedError("So far pyre2 does not support custom replacement counts")
 * 
 *         if string_encoded or (repl_encoded and total_replacements > 0):             # <<<<<<<<<<<<<<
 *             result = cpp_to_utf8(input_str[0])
 *         else:
 */

#line 692 "re2.pyx"
    goto __pyx_L19;

#line 692 "re2.pyx"
  }

  /* "re2.pyx":695
 *             result = cpp_to_utf8(input_str[0])
 *         else:
 *             result = cpp_to_pystring(input_str[0])             # <<<<<<<<<<<<<<
 *         del fixed_repl
 *         del input_str
 */

#line 695 "re2.pyx"
  /*else*/ {

#line 695 "re2.pyx"
    __pyx_t_4 = __pyx_f_3re2_cpp_to_pystring((__pyx_v_input_str[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 695, __pyx_L1_error)

#line 695 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 695 "re2.pyx"
    __pyx_v_result = __pyx_t_4;

#line 695 "re2.pyx"
    __pyx_t_4 = 0;

#line 695 "re2.pyx"
  }

#line 695 "re2.pyx"
  __pyx_L19:;

  /* "re2.pyx":696
 *         else:
 *             result = cpp_to_pystring(input_str[0])
 *         del fixed_repl             # <<<<<<<<<<<<<<
 *         del input_str
 *         del sp
 */

#line 696 "re2.pyx"
  delete __pyx_v_fixed_repl;

  /* "re2.pyx":697
 *             result = cpp_to_pystring(input_str[0])
 *         del fixed_repl
 *         del input_str             # <<<<<<<<<<<<<<
 *         del sp
 *         return (result, total_replacements)
 */

#line 697 "re2.pyx"
  delete __pyx_v_input_str;

  /* "re2.pyx":698
 *         del fixed_repl
 *         del input_str
 *         del sp             # <<<<<<<<<<<<<<
 *         return (result, total_replacements)
 * 
 */

#line 698 "re2.pyx"
  delete __pyx_v_sp;

  /* "re2.pyx":699
 *         del input_str
 *         del sp
 *         return (result, total_replacements)             # <<<<<<<<<<<<<<
 * 
 *     def _subn_callback(self, callback, string, int count=0):
 */

#line 699 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 699 "re2.pyx"
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 699, __pyx_L1_error)

#line 699 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 699 "re2.pyx"
  __Pyx_INCREF(__pyx_v_result);

#line 699 "re2.pyx"
  __Pyx_GIVEREF(__pyx_v_result);

#line 699 "re2.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_result);

#line 699 "re2.pyx"
  __Pyx_INCREF(__pyx_v_total_replacements);

#line 699 "re2.pyx"
  __Pyx_GIVEREF(__pyx_v_total_replacements);

#line 699 "re2.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_total_replacements);

#line 699 "re2.pyx"
  __pyx_r = __pyx_t_4;

#line 699 "re2.pyx"
  __pyx_t_4 = 0;

#line 699 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":617
 *         return self.subn(repl, string, count)[0]
 * 
 *     def subn(self, repl, istring, int count=0):             # <<<<<<<<<<<<<<
 *         """
 *         subn(repl, string[, count = 0]) --> (newstring, number of subs)
 */

#line 617 "re2.pyx"


#line 617 "re2.pyx"
  /* function exit code */

#line 617 "re2.pyx"
  __pyx_L1_error:;

#line 617 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 617 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 617 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 617 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 617 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 617 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern.subn", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 617 "re2.pyx"
  __pyx_r = NULL;

#line 617 "re2.pyx"
  __pyx_L0:;

#line 617 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_total_replacements);

#line 617 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_string);

#line 617 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_result);

#line 617 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_repl);

#line 617 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 617 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 617 "re2.pyx"
  return __pyx_r;

#line 617 "re2.pyx"
}

/* "re2.pyx":701
 *         return (result, total_replacements)
 * 
 *     def _subn_callback(self, callback, string, int count=0):             # <<<<<<<<<<<<<<
 *         """
 *         This function is probably the hardest to implement correctly.
 */

#line 701 "re2.pyx"


#line 701 "re2.pyx"
/* Python wrapper */

#line 701 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_17_subn_callback(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 701 "re2.pyx"
static char __pyx_doc_3re2_7Pattern_16_subn_callback[] = "File: re2.pyx (starting at line 701)\n\n        This function is probably the hardest to implement correctly.\n        This is my first attempt, but if anybody has a better solution, please help out.\n        ";

#line 701 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_17_subn_callback(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_callback = 0
#line 701 "re2.pyx"
;
  PyObject *__pyx_v_string = 0
#line 701 "re2.pyx"
;
  int __pyx_v_count
#line 701 "re2.pyx"
;

#line 701 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 701 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 701 "re2.pyx"
  __Pyx_RefNannySetupContext("_subn_callback (wrapper)", 0);

#line 701 "re2.pyx"
  {

#line 701 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_callback,&__pyx_n_s_string,&__pyx_n_s_count,0};

#line 701 "re2.pyx"
    PyObject* values[3] = {0,0,0};

#line 701 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 701 "re2.pyx"
      Py_ssize_t kw_args;

#line 701 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 701 "re2.pyx"
      switch (pos_args) {
        case  3: 
#line 701 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 701 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 701 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 701 "re2.pyx"
        case  0: break;
        default: 
#line 701 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 701 "re2.pyx"
      }

#line 701 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 701 "re2.pyx"
      switch (pos_args) {

#line 701 "re2.pyx"
        case  0:

#line 701 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_callback)) != 0)) kw_args--;
        else 
#line 701 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 701 "re2.pyx"
        case  1:

#line 701 "re2.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;

#line 701 "re2.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_subn_callback", 0, 2, 3, 1); 
#line 701 "re2.pyx"
__PYX_ERR(0, 701, __pyx_L3_error)

#line 701 "re2.pyx"
        }

#line 701 "re2.pyx"
        case  2:

#line 701 "re2.pyx"
        if (kw_args > 0) {

#line 701 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_count);

#line 701 "re2.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 701 "re2.pyx"
        }

#line 701 "re2.pyx"
      }

#line 701 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 701 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_subn_callback") < 0)) __PYX_ERR(0, 701, __pyx_L3_error)

#line 701 "re2.pyx"
      }

#line 701 "re2.pyx"
    } else {

#line 701 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 701 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 701 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 701 "re2.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 701 "re2.pyx"
        break;
        default: 
#line 701 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 701 "re2.pyx"
      }

#line 701 "re2.pyx"
    }

#line 701 "re2.pyx"
    __pyx_v_callback = values[0];

#line 701 "re2.pyx"
    __pyx_v_string = values[1];

#line 701 "re2.pyx"
    if (values[2]) {

#line 701 "re2.pyx"
      __pyx_v_count = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 701, __pyx_L3_error)

#line 701 "re2.pyx"
    } else {

#line 701 "re2.pyx"
      __pyx_v_count = ((int)0);

#line 701 "re2.pyx"
    }

#line 701 "re2.pyx"
  }

#line 701 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 701 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_subn_callback", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 701 "re2.pyx"
__PYX_ERR(0, 701, __pyx_L3_error)

#line 701 "re2.pyx"
  __pyx_L3_error:;

#line 701 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern._subn_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 701 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 701 "re2.pyx"
  return NULL;

#line 701 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 701 "re2.pyx"
__pyx_pf_3re2_7Pattern_16_subn_callback(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), __pyx_v_callback, __pyx_v_string, __pyx_v_count);

#line 701 "re2.pyx"


#line 701 "re2.pyx"
  /* function exit code */

#line 701 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 701 "re2.pyx"
  return __pyx_r;

#line 701 "re2.pyx"
}

#line 701 "re2.pyx"


#line 701 "re2.pyx"
static PyObject *__pyx_pf_3re2_7Pattern_16_subn_callback(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_callback, PyObject *__pyx_v_string, int __pyx_v_count) {
  Py_ssize_t __pyx_v_size
#line 701 "re2.pyx"
;
  int __pyx_v_result
#line 701 "re2.pyx"
;
  int __pyx_v_endpos
#line 701 "re2.pyx"
;
  int __pyx_v_pos
#line 701 "re2.pyx"
;
  int __pyx_v_encoded
#line 701 "re2.pyx"
;
  int __pyx_v_num_repl
#line 701 "re2.pyx"
;
  char *__pyx_v_cstring
#line 701 "re2.pyx"
;
  re2::StringPiece *__pyx_v_sp
#line 701 "re2.pyx"
;
  struct __pyx_obj_3re2_Match *__pyx_v_m = 0
#line 701 "re2.pyx"
;
  PyObject *__pyx_v_resultlist = 0
#line 701 "re2.pyx"
;

#line 701 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 701 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 701 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 701 "re2.pyx"
  int __pyx_t_2;

#line 701 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 701 "re2.pyx"
  int __pyx_t_4;

#line 701 "re2.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 701 "re2.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 701 "re2.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 701 "re2.pyx"
  int __pyx_t_8;

#line 701 "re2.pyx"
  int __pyx_t_9;

#line 701 "re2.pyx"
  int __pyx_t_10;

#line 701 "re2.pyx"
  char const *__pyx_t_11;

#line 701 "re2.pyx"
  PyObject *__pyx_t_12 = NULL;

#line 701 "re2.pyx"
  PyObject *__pyx_t_13 = NULL;

#line 701 "re2.pyx"
  PyObject *__pyx_t_14 = NULL;

#line 701 "re2.pyx"
  PyObject *__pyx_t_15 = NULL;

#line 701 "re2.pyx"
  PyObject *__pyx_t_16 = NULL;

#line 701 "re2.pyx"
  PyObject *__pyx_t_17 = NULL;

#line 701 "re2.pyx"
  __Pyx_RefNannySetupContext("_subn_callback", 0);

#line 701 "re2.pyx"
  __Pyx_INCREF(__pyx_v_string);

  /* "re2.pyx":709
 *         cdef int result
 *         cdef int endpos
 *         cdef int pos = 0             # <<<<<<<<<<<<<<
 *         cdef int encoded = 0
 *         cdef int num_repl = 0
 */

#line 709 "re2.pyx"
  __pyx_v_pos = 0;

  /* "re2.pyx":710
 *         cdef int endpos
 *         cdef int pos = 0
 *         cdef int encoded = 0             # <<<<<<<<<<<<<<
 *         cdef int num_repl = 0
 *         cdef char * cstring
 */

#line 710 "re2.pyx"
  __pyx_v_encoded = 0;

  /* "re2.pyx":711
 *         cdef int pos = 0
 *         cdef int encoded = 0
 *         cdef int num_repl = 0             # <<<<<<<<<<<<<<
 *         cdef char * cstring
 *         cdef _re2.StringPiece * sp
 */

#line 711 "re2.pyx"
  __pyx_v_num_repl = 0;

  /* "re2.pyx":715
 *         cdef _re2.StringPiece * sp
 *         cdef Match m
 *         cdef list resultlist = []             # <<<<<<<<<<<<<<
 * 
 *         if count < 0:
 */

#line 715 "re2.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 715, __pyx_L1_error)

#line 715 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 715 "re2.pyx"
  __pyx_v_resultlist = ((PyObject*)__pyx_t_1);

#line 715 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":717
 *         cdef list resultlist = []
 * 
 *         if count < 0:             # <<<<<<<<<<<<<<
 *             count = 0
 * 
 */

#line 717 "re2.pyx"
  __pyx_t_2 = ((__pyx_v_count < 0) != 0);

#line 717 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":718
 * 
 *         if count < 0:
 *             count = 0             # <<<<<<<<<<<<<<
 * 
 *         string = unicode_to_bytestring(string, &encoded)
 */

#line 718 "re2.pyx"
    __pyx_v_count = 0;

    /* "re2.pyx":717
 *         cdef list resultlist = []
 * 
 *         if count < 0:             # <<<<<<<<<<<<<<
 *             count = 0
 * 
 */

#line 717 "re2.pyx"
  }

  /* "re2.pyx":720
 *             count = 0
 * 
 *         string = unicode_to_bytestring(string, &encoded)             # <<<<<<<<<<<<<<
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")
 */

#line 720 "re2.pyx"
  __pyx_t_1 = __pyx_f_3re2_unicode_to_bytestring(__pyx_v_string, (&__pyx_v_encoded)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 720, __pyx_L1_error)

#line 720 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 720 "re2.pyx"
  __Pyx_DECREF_SET(__pyx_v_string, __pyx_t_1);

#line 720 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":721
 * 
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError("expected string or buffer")
 *         encoded = <bint>encoded
 */

#line 721 "re2.pyx"
  __pyx_t_2 = ((__pyx_f_3re2_pystring_to_bytestring(__pyx_v_string, (&__pyx_v_cstring), (&__pyx_v_size)) == -1L) != 0);

#line 721 "re2.pyx"
  if (__pyx_t_2) {

    /* "re2.pyx":722
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 *         encoded = <bint>encoded
 * 
 */

#line 722 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 722, __pyx_L1_error)

#line 722 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 722 "re2.pyx"
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 722 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 722 "re2.pyx"
    __PYX_ERR(0, 722, __pyx_L1_error)

    /* "re2.pyx":721
 * 
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:             # <<<<<<<<<<<<<<
 *             raise TypeError("expected string or buffer")
 *         encoded = <bint>encoded
 */

#line 721 "re2.pyx"
  }

  /* "re2.pyx":723
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")
 *         encoded = <bint>encoded             # <<<<<<<<<<<<<<
 * 
 *         sp = new _re2.StringPiece(cstring, size)
 */

#line 723 "re2.pyx"
  __pyx_v_encoded = (__pyx_v_encoded != 0);

  /* "re2.pyx":725
 *         encoded = <bint>encoded
 * 
 *         sp = new _re2.StringPiece(cstring, size)             # <<<<<<<<<<<<<<
 * 
 *         try:
 */

#line 725 "re2.pyx"
  __pyx_v_sp = new re2::StringPiece(__pyx_v_cstring, __pyx_v_size);

  /* "re2.pyx":727
 *         sp = new _re2.StringPiece(cstring, size)
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             while True:
 *                 m = Match(self, self.ngroups + 1)
 */

#line 727 "re2.pyx"
  /*try:*/ {

    /* "re2.pyx":728
 * 
 *         try:
 *             while True:             # <<<<<<<<<<<<<<
 *                 m = Match(self, self.ngroups + 1)
 *                 with nogil:
 */

#line 728 "re2.pyx"
    while (1) {

      /* "re2.pyx":729
 *         try:
 *             while True:
 *                 m = Match(self, self.ngroups + 1)             # <<<<<<<<<<<<<<
 *                 with nogil:
 *                     result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)
 */

#line 729 "re2.pyx"
      __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_self->ngroups + 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 729, __pyx_L6_error)

#line 729 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 729 "re2.pyx"
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 729, __pyx_L6_error)

#line 729 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 729 "re2.pyx"
      __Pyx_INCREF(((PyObject *)__pyx_v_self));

#line 729 "re2.pyx"
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));

#line 729 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));

#line 729 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_1);

#line 729 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 729 "re2.pyx"
      __pyx_t_1 = 0;

#line 729 "re2.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3re2_Match), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 729, __pyx_L6_error)

#line 729 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 729 "re2.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 729 "re2.pyx"
      __Pyx_XDECREF_SET(__pyx_v_m, ((struct __pyx_obj_3re2_Match *)__pyx_t_1));

#line 729 "re2.pyx"
      __pyx_t_1 = 0;

      /* "re2.pyx":730
 *             while True:
 *                 m = Match(self, self.ngroups + 1)
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)
 *                 if result == 0:
 */

#line 730 "re2.pyx"
      {

#line 730 "re2.pyx"
          #ifdef WITH_THREAD

#line 730 "re2.pyx"
          PyThreadState *_save;

#line 730 "re2.pyx"
          Py_UNBLOCK_THREADS

#line 730 "re2.pyx"
          #endif

#line 730 "re2.pyx"
          /*try:*/ {

            /* "re2.pyx":731
 *                 m = Match(self, self.ngroups + 1)
 *                 with nogil:
 *                     result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)             # <<<<<<<<<<<<<<
 *                 if result == 0:
 *                     break
 */

#line 731 "re2.pyx"
            __pyx_v_result = __pyx_v_self->re_pattern->Match((__pyx_v_sp[0]), ((int)__pyx_v_pos), ((int)__pyx_v_size), RE2::UNANCHORED, __pyx_v_m->matches, (__pyx_v_self->ngroups + 1));

#line 731 "re2.pyx"
          }

          /* "re2.pyx":730
 *             while True:
 *                 m = Match(self, self.ngroups + 1)
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)
 *                 if result == 0:
 */

#line 730 "re2.pyx"
          /*finally:*/ {

#line 730 "re2.pyx"
            /*normal exit:*/{

#line 730 "re2.pyx"
              #ifdef WITH_THREAD

#line 730 "re2.pyx"
              Py_BLOCK_THREADS

#line 730 "re2.pyx"
              #endif

#line 730 "re2.pyx"
              goto __pyx_L14;

#line 730 "re2.pyx"
            }

#line 730 "re2.pyx"
            __pyx_L14:;

#line 730 "re2.pyx"
          }

#line 730 "re2.pyx"
      }

      /* "re2.pyx":732
 *                 with nogil:
 *                     result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)
 *                 if result == 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */

#line 732 "re2.pyx"
      __pyx_t_2 = ((__pyx_v_result == 0) != 0);

#line 732 "re2.pyx"
      if (__pyx_t_2) {

        /* "re2.pyx":733
 *                     result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)
 *                 if result == 0:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *                 endpos = m.matches[0].data() - cstring
 */

#line 733 "re2.pyx"
        goto __pyx_L9_break;

        /* "re2.pyx":732
 *                 with nogil:
 *                     result = self.re_pattern.Match(sp[0], <int>pos, <int>size, _re2.UNANCHORED, m.matches, self.ngroups + 1)
 *                 if result == 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */

#line 732 "re2.pyx"
      }

      /* "re2.pyx":735
 *                     break
 * 
 *                 endpos = m.matches[0].data() - cstring             # <<<<<<<<<<<<<<
 *                 if encoded:
 *                     resultlist.append(char_to_utf8(&sp.data()[pos], endpos - pos))
 */

#line 735 "re2.pyx"
      __pyx_v_endpos = ((__pyx_v_m->matches[0]).data() - __pyx_v_cstring);

      /* "re2.pyx":736
 * 
 *                 endpos = m.matches[0].data() - cstring
 *                 if encoded:             # <<<<<<<<<<<<<<
 *                     resultlist.append(char_to_utf8(&sp.data()[pos], endpos - pos))
 *                 else:
 */

#line 736 "re2.pyx"
      __pyx_t_2 = (__pyx_v_encoded != 0);

#line 736 "re2.pyx"
      if (__pyx_t_2) {

        /* "re2.pyx":737
 *                 endpos = m.matches[0].data() - cstring
 *                 if encoded:
 *                     resultlist.append(char_to_utf8(&sp.data()[pos], endpos - pos))             # <<<<<<<<<<<<<<
 *                 else:
 *                     resultlist.append(sp.data()[pos:endpos])
 */

#line 737 "re2.pyx"
        __pyx_t_1 = __pyx_f_3re2_char_to_utf8((&(__pyx_v_sp->data()[__pyx_v_pos])), (__pyx_v_endpos - __pyx_v_pos)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L6_error)

#line 737 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 737 "re2.pyx"
        __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 737, __pyx_L6_error)

#line 737 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "re2.pyx":736
 * 
 *                 endpos = m.matches[0].data() - cstring
 *                 if encoded:             # <<<<<<<<<<<<<<
 *                     resultlist.append(char_to_utf8(&sp.data()[pos], endpos - pos))
 *                 else:
 */

#line 736 "re2.pyx"
        goto __pyx_L16;

#line 736 "re2.pyx"
      }

      /* "re2.pyx":739
 *                     resultlist.append(char_to_utf8(&sp.data()[pos], endpos - pos))
 *                 else:
 *                     resultlist.append(sp.data()[pos:endpos])             # <<<<<<<<<<<<<<
 *                 pos = endpos + m.matches[0].length()
 * 
 */

#line 739 "re2.pyx"
      /*else*/ {

#line 739 "re2.pyx"
        __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_sp->data()) + __pyx_v_pos, __pyx_v_endpos - __pyx_v_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 739, __pyx_L6_error)

#line 739 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 739 "re2.pyx"
        __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 739, __pyx_L6_error)

#line 739 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 739 "re2.pyx"
      }

#line 739 "re2.pyx"
      __pyx_L16:;

      /* "re2.pyx":740
 *                 else:
 *                     resultlist.append(sp.data()[pos:endpos])
 *                 pos = endpos + m.matches[0].length()             # <<<<<<<<<<<<<<
 * 
 *                 m.encoded = encoded
 */

#line 740 "re2.pyx"
      __pyx_v_pos = (__pyx_v_endpos + (__pyx_v_m->matches[0]).length());

      /* "re2.pyx":742
 *                 pos = endpos + m.matches[0].length()
 * 
 *                 m.encoded = encoded             # <<<<<<<<<<<<<<
 *                 m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 *                 m.nmatches = self.ngroups + 1
 */

#line 742 "re2.pyx"
      __pyx_v_m->encoded = __pyx_v_encoded;

      /* "re2.pyx":743
 * 
 *                 m.encoded = encoded
 *                 m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())             # <<<<<<<<<<<<<<
 *                 m.nmatches = self.ngroups + 1
 *                 m.match_string = string
 */

#line 743 "re2.pyx"
      __pyx_v_m->named_groups = cymacros::addressof<const std::map<std::string,int> &>(__pyx_v_self->re_pattern->NamedCapturingGroups());

      /* "re2.pyx":744
 *                 m.encoded = encoded
 *                 m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 *                 m.nmatches = self.ngroups + 1             # <<<<<<<<<<<<<<
 *                 m.match_string = string
 *                 resultlist.append(callback(m) or '')
 */

#line 744 "re2.pyx"
      __pyx_v_m->nmatches = (__pyx_v_self->ngroups + 1);

      /* "re2.pyx":745
 *                 m.named_groups = _re2.addressof(self.re_pattern.NamedCapturingGroups())
 *                 m.nmatches = self.ngroups + 1
 *                 m.match_string = string             # <<<<<<<<<<<<<<
 *                 resultlist.append(callback(m) or '')
 * 
 */

#line 745 "re2.pyx"
      __Pyx_INCREF(__pyx_v_string);

#line 745 "re2.pyx"
      __Pyx_GIVEREF(__pyx_v_string);

#line 745 "re2.pyx"
      __Pyx_GOTREF(__pyx_v_m->match_string);

#line 745 "re2.pyx"
      __Pyx_DECREF(__pyx_v_m->match_string);

#line 745 "re2.pyx"
      __pyx_v_m->match_string = __pyx_v_string;

      /* "re2.pyx":746
 *                 m.nmatches = self.ngroups + 1
 *                 m.match_string = string
 *                 resultlist.append(callback(m) or '')             # <<<<<<<<<<<<<<
 * 
 *                 num_repl += 1
 */

#line 746 "re2.pyx"
      __Pyx_INCREF(__pyx_v_callback);
      __pyx_t_5 = __pyx_v_callback; 
#line 746 "re2.pyx"
__pyx_t_6 = NULL;

#line 746 "re2.pyx"
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {

#line 746 "re2.pyx"
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);

#line 746 "re2.pyx"
        if (likely(__pyx_t_6)) {

#line 746 "re2.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 746 "re2.pyx"
          __Pyx_INCREF(__pyx_t_6);

#line 746 "re2.pyx"
          __Pyx_INCREF(function);

#line 746 "re2.pyx"
          __Pyx_DECREF_SET(__pyx_t_5, function);

#line 746 "re2.pyx"
        }

#line 746 "re2.pyx"
      }

#line 746 "re2.pyx"
      if (!__pyx_t_6) {

#line 746 "re2.pyx"
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)__pyx_v_m)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 746, __pyx_L6_error)

#line 746 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 746 "re2.pyx"
      } else {

#line 746 "re2.pyx"
        #if CYTHON_FAST_PYCALL

#line 746 "re2.pyx"
        if (PyFunction_Check(__pyx_t_5)) {

#line 746 "re2.pyx"
          PyObject *__pyx_temp[2] = {__pyx_t_6, ((PyObject *)__pyx_v_m)};

#line 746 "re2.pyx"
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 746, __pyx_L6_error)

#line 746 "re2.pyx"
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 746 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 746 "re2.pyx"
        } else

#line 746 "re2.pyx"
        #endif

#line 746 "re2.pyx"
        #if CYTHON_FAST_PYCCALL

#line 746 "re2.pyx"
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {

#line 746 "re2.pyx"
          PyObject *__pyx_temp[2] = {__pyx_t_6, ((PyObject *)__pyx_v_m)};

#line 746 "re2.pyx"
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 746, __pyx_L6_error)

#line 746 "re2.pyx"
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 746 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 746 "re2.pyx"
        } else

#line 746 "re2.pyx"
        #endif

#line 746 "re2.pyx"
        {

#line 746 "re2.pyx"
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 746, __pyx_L6_error)

#line 746 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_7);

#line 746 "re2.pyx"
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;

#line 746 "re2.pyx"
          __Pyx_INCREF(((PyObject *)__pyx_v_m));

#line 746 "re2.pyx"
          __Pyx_GIVEREF(((PyObject *)__pyx_v_m));

#line 746 "re2.pyx"
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, ((PyObject *)__pyx_v_m));

#line 746 "re2.pyx"
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 746, __pyx_L6_error)

#line 746 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 746 "re2.pyx"
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 746 "re2.pyx"
        }

#line 746 "re2.pyx"
      }

#line 746 "re2.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 746 "re2.pyx"
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 746, __pyx_L6_error)

#line 746 "re2.pyx"
      if (!__pyx_t_2) {

#line 746 "re2.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 746 "re2.pyx"
      } else {

#line 746 "re2.pyx"
        __Pyx_INCREF(__pyx_t_3);

#line 746 "re2.pyx"
        __pyx_t_1 = __pyx_t_3;

#line 746 "re2.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 746 "re2.pyx"
        goto __pyx_L17_bool_binop_done;

#line 746 "re2.pyx"
      }

#line 746 "re2.pyx"
      __Pyx_INCREF(__pyx_kp_s__15);

#line 746 "re2.pyx"
      __pyx_t_1 = __pyx_kp_s__15;

#line 746 "re2.pyx"
      __pyx_L17_bool_binop_done:;

#line 746 "re2.pyx"
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 746, __pyx_L6_error)

#line 746 "re2.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "re2.pyx":748
 *                 resultlist.append(callback(m) or '')
 * 
 *                 num_repl += 1             # <<<<<<<<<<<<<<
 *                 if count and num_repl >= count:
 *                     break
 */

#line 748 "re2.pyx"
      __pyx_v_num_repl = (__pyx_v_num_repl + 1);

      /* "re2.pyx":749
 * 
 *                 num_repl += 1
 *                 if count and num_repl >= count:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */

#line 749 "re2.pyx"
      __pyx_t_8 = (__pyx_v_count != 0);

#line 749 "re2.pyx"
      if (__pyx_t_8) {

#line 749 "re2.pyx"
      } else {

#line 749 "re2.pyx"
        __pyx_t_2 = __pyx_t_8;

#line 749 "re2.pyx"
        goto __pyx_L20_bool_binop_done;

#line 749 "re2.pyx"
      }

#line 749 "re2.pyx"
      __pyx_t_8 = ((__pyx_v_num_repl >= __pyx_v_count) != 0);

#line 749 "re2.pyx"
      __pyx_t_2 = __pyx_t_8;

#line 749 "re2.pyx"
      __pyx_L20_bool_binop_done:;

#line 749 "re2.pyx"
      if (__pyx_t_2) {

        /* "re2.pyx":750
 *                 num_repl += 1
 *                 if count and num_repl >= count:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *             if encoded:
 */

#line 750 "re2.pyx"
        goto __pyx_L9_break;

        /* "re2.pyx":749
 * 
 *                 num_repl += 1
 *                 if count and num_repl >= count:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */

#line 749 "re2.pyx"
      }

#line 749 "re2.pyx"
    }

#line 749 "re2.pyx"
    __pyx_L9_break:;

    /* "re2.pyx":752
 *                     break
 * 
 *             if encoded:             # <<<<<<<<<<<<<<
 *                 resultlist.append(char_to_utf8(&sp.data()[pos], sp.length() - pos))
 *                 return (u''.join(resultlist), num_repl)
 */

#line 752 "re2.pyx"
    __pyx_t_2 = (__pyx_v_encoded != 0);

#line 752 "re2.pyx"
    if (__pyx_t_2) {

      /* "re2.pyx":753
 * 
 *             if encoded:
 *                 resultlist.append(char_to_utf8(&sp.data()[pos], sp.length() - pos))             # <<<<<<<<<<<<<<
 *                 return (u''.join(resultlist), num_repl)
 *             else:
 */

#line 753 "re2.pyx"
      __pyx_t_1 = __pyx_f_3re2_char_to_utf8((&(__pyx_v_sp->data()[__pyx_v_pos])), (__pyx_v_sp->length() - __pyx_v_pos)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 753, __pyx_L6_error)

#line 753 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 753 "re2.pyx"
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 753, __pyx_L6_error)

#line 753 "re2.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "re2.pyx":754
 *             if encoded:
 *                 resultlist.append(char_to_utf8(&sp.data()[pos], sp.length() - pos))
 *                 return (u''.join(resultlist), num_repl)             # <<<<<<<<<<<<<<
 *             else:
 *                 resultlist.append(sp.data()[pos:])
 */

#line 754 "re2.pyx"
      __Pyx_XDECREF(__pyx_r);

#line 754 "re2.pyx"
      __pyx_t_1 = PyUnicode_Join(__pyx_kp_u__15, __pyx_v_resultlist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 754, __pyx_L6_error)

#line 754 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 754 "re2.pyx"
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_num_repl); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 754, __pyx_L6_error)

#line 754 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 754 "re2.pyx"
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 754, __pyx_L6_error)

#line 754 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 754 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_1);

#line 754 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);

#line 754 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_3);

#line 754 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);

#line 754 "re2.pyx"
      __pyx_t_1 = 0;

#line 754 "re2.pyx"
      __pyx_t_3 = 0;

#line 754 "re2.pyx"
      __pyx_r = __pyx_t_5;

#line 754 "re2.pyx"
      __pyx_t_5 = 0;

#line 754 "re2.pyx"
      goto __pyx_L5_return;

      /* "re2.pyx":752
 *                     break
 * 
 *             if encoded:             # <<<<<<<<<<<<<<
 *                 resultlist.append(char_to_utf8(&sp.data()[pos], sp.length() - pos))
 *                 return (u''.join(resultlist), num_repl)
 */

#line 752 "re2.pyx"
    }

    /* "re2.pyx":756
 *                 return (u''.join(resultlist), num_repl)
 *             else:
 *                 resultlist.append(sp.data()[pos:])             # <<<<<<<<<<<<<<
 *                 return (''.join(resultlist), num_repl)
 *         finally:
 */

#line 756 "re2.pyx"
    /*else*/ {

#line 756 "re2.pyx"
      __pyx_t_5 = __Pyx_PyBytes_FromString(((const char*)__pyx_v_sp->data()) + __pyx_v_pos); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 756, __pyx_L6_error)

#line 756 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 756 "re2.pyx"
      __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_resultlist, __pyx_t_5); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 756, __pyx_L6_error)

#line 756 "re2.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "re2.pyx":757
 *             else:
 *                 resultlist.append(sp.data()[pos:])
 *                 return (''.join(resultlist), num_repl)             # <<<<<<<<<<<<<<
 *         finally:
 *             del sp
 */

#line 757 "re2.pyx"
      __Pyx_XDECREF(__pyx_r);

#line 757 "re2.pyx"
      __pyx_t_5 = __Pyx_PyString_Join(__pyx_kp_s__15, __pyx_v_resultlist); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 757, __pyx_L6_error)

#line 757 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 757 "re2.pyx"
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_num_repl); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 757, __pyx_L6_error)

#line 757 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 757 "re2.pyx"
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 757, __pyx_L6_error)

#line 757 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 757 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_5);

#line 757 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);

#line 757 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_3);

#line 757 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);

#line 757 "re2.pyx"
      __pyx_t_5 = 0;

#line 757 "re2.pyx"
      __pyx_t_3 = 0;

#line 757 "re2.pyx"
      __pyx_r = __pyx_t_1;

#line 757 "re2.pyx"
      __pyx_t_1 = 0;

#line 757 "re2.pyx"
      goto __pyx_L5_return;

#line 757 "re2.pyx"
    }

#line 757 "re2.pyx"
  }

  /* "re2.pyx":759
 *                 return (''.join(resultlist), num_repl)
 *         finally:
 *             del sp             # <<<<<<<<<<<<<<
 * 
 * _cache = {}
 */

#line 759 "re2.pyx"
  /*finally:*/ {

#line 759 "re2.pyx"
    /*exception exit:*/{

#line 759 "re2.pyx"
      __Pyx_PyThreadState_declare

#line 759 "re2.pyx"
      __pyx_L6_error:;

#line 759 "re2.pyx"
      __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;

#line 759 "re2.pyx"
      __Pyx_PyThreadState_assign

#line 759 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 759 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 759 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 759 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 759 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 759 "re2.pyx"
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);

#line 759 "re2.pyx"
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14) < 0)) __Pyx_ErrFetch(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);

#line 759 "re2.pyx"
      __Pyx_XGOTREF(__pyx_t_12);

#line 759 "re2.pyx"
      __Pyx_XGOTREF(__pyx_t_13);

#line 759 "re2.pyx"
      __Pyx_XGOTREF(__pyx_t_14);

#line 759 "re2.pyx"
      __Pyx_XGOTREF(__pyx_t_15);

#line 759 "re2.pyx"
      __Pyx_XGOTREF(__pyx_t_16);

#line 759 "re2.pyx"
      __Pyx_XGOTREF(__pyx_t_17);

#line 759 "re2.pyx"
      __pyx_t_9 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_11 = __pyx_filename;

#line 759 "re2.pyx"
      {

#line 759 "re2.pyx"
        delete __pyx_v_sp;

#line 759 "re2.pyx"
      }

#line 759 "re2.pyx"
      __Pyx_PyThreadState_assign

#line 759 "re2.pyx"
      if (PY_MAJOR_VERSION >= 3) {

#line 759 "re2.pyx"
        __Pyx_XGIVEREF(__pyx_t_15);

#line 759 "re2.pyx"
        __Pyx_XGIVEREF(__pyx_t_16);

#line 759 "re2.pyx"
        __Pyx_XGIVEREF(__pyx_t_17);

#line 759 "re2.pyx"
        __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);

#line 759 "re2.pyx"
      }

#line 759 "re2.pyx"
      __Pyx_XGIVEREF(__pyx_t_12);

#line 759 "re2.pyx"
      __Pyx_XGIVEREF(__pyx_t_13);

#line 759 "re2.pyx"
      __Pyx_XGIVEREF(__pyx_t_14);

#line 759 "re2.pyx"
      __Pyx_ErrRestore(__pyx_t_12, __pyx_t_13, __pyx_t_14);

#line 759 "re2.pyx"
      __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;

#line 759 "re2.pyx"
      __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_11;

#line 759 "re2.pyx"
      goto __pyx_L1_error;

#line 759 "re2.pyx"
    }
    __pyx_L5_return: 
#line 759 "re2.pyx"
{

#line 759 "re2.pyx"
      __pyx_t_17 = __pyx_r;

#line 759 "re2.pyx"
      __pyx_r = 0;

#line 759 "re2.pyx"
      delete __pyx_v_sp;

#line 759 "re2.pyx"
      __pyx_r = __pyx_t_17;

#line 759 "re2.pyx"
      __pyx_t_17 = 0;

#line 759 "re2.pyx"
      goto __pyx_L0;

#line 759 "re2.pyx"
    }

#line 759 "re2.pyx"
  }

  /* "re2.pyx":701
 *         return (result, total_replacements)
 * 
 *     def _subn_callback(self, callback, string, int count=0):             # <<<<<<<<<<<<<<
 *         """
 *         This function is probably the hardest to implement correctly.
 */

#line 701 "re2.pyx"


#line 701 "re2.pyx"
  /* function exit code */

#line 701 "re2.pyx"
  __pyx_L1_error:;

#line 701 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 701 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 701 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 701 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 701 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 701 "re2.pyx"
  __Pyx_AddTraceback("re2.Pattern._subn_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 701 "re2.pyx"
  __pyx_r = NULL;

#line 701 "re2.pyx"
  __pyx_L0:;

#line 701 "re2.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_m);

#line 701 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_resultlist);

#line 701 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_string);

#line 701 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 701 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 701 "re2.pyx"
  return __pyx_r;

#line 701 "re2.pyx"
}

/* "re2.pyx":383
 *     cdef bint encoded
 *     cdef int _flags
 *     cdef public object pattern             # <<<<<<<<<<<<<<
 *     cdef object __weakref__
 * 
 */

#line 383 "re2.pyx"


#line 383 "re2.pyx"
/* Python wrapper */

#line 383 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_7pattern_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 383 "re2.pyx"
static PyObject *__pyx_pw_3re2_7Pattern_7pattern_1__get__(PyObject *__pyx_v_self) {

#line 383 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 383 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 383 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 383 "re2.pyx"
__pyx_pf_3re2_7Pattern_7pattern___get__(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self));

#line 383 "re2.pyx"


#line 383 "re2.pyx"
  /* function exit code */

#line 383 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 383 "re2.pyx"
  return __pyx_r;

#line 383 "re2.pyx"
}

#line 383 "re2.pyx"


#line 383 "re2.pyx"
static PyObject *__pyx_pf_3re2_7Pattern_7pattern___get__(struct __pyx_obj_3re2_Pattern *__pyx_v_self) {

#line 383 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 383 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 383 "re2.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

#line 383 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 383 "re2.pyx"
  __Pyx_INCREF(__pyx_v_self->pattern);

#line 383 "re2.pyx"
  __pyx_r = __pyx_v_self->pattern;

#line 383 "re2.pyx"
  goto __pyx_L0;

#line 383 "re2.pyx"


#line 383 "re2.pyx"
  /* function exit code */

#line 383 "re2.pyx"
  __pyx_L0:;

#line 383 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 383 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 383 "re2.pyx"
  return __pyx_r;

#line 383 "re2.pyx"
}

#line 383 "re2.pyx"


#line 383 "re2.pyx"
/* Python wrapper */

#line 383 "re2.pyx"
static int __pyx_pw_3re2_7Pattern_7pattern_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/

#line 383 "re2.pyx"
static int __pyx_pw_3re2_7Pattern_7pattern_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {

#line 383 "re2.pyx"
  int __pyx_r;

#line 383 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 383 "re2.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 383 "re2.pyx"
__pyx_pf_3re2_7Pattern_7pattern_2__set__(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self), ((PyObject *)__pyx_v_value));

#line 383 "re2.pyx"


#line 383 "re2.pyx"
  /* function exit code */

#line 383 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 383 "re2.pyx"
  return __pyx_r;

#line 383 "re2.pyx"
}

#line 383 "re2.pyx"


#line 383 "re2.pyx"
static int __pyx_pf_3re2_7Pattern_7pattern_2__set__(struct __pyx_obj_3re2_Pattern *__pyx_v_self, PyObject *__pyx_v_value) {

#line 383 "re2.pyx"
  int __pyx_r;

#line 383 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 383 "re2.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

#line 383 "re2.pyx"
  __Pyx_INCREF(__pyx_v_value);

#line 383 "re2.pyx"
  __Pyx_GIVEREF(__pyx_v_value);

#line 383 "re2.pyx"
  __Pyx_GOTREF(__pyx_v_self->pattern);

#line 383 "re2.pyx"
  __Pyx_DECREF(__pyx_v_self->pattern);

#line 383 "re2.pyx"
  __pyx_v_self->pattern = __pyx_v_value;

#line 383 "re2.pyx"


#line 383 "re2.pyx"
  /* function exit code */

#line 383 "re2.pyx"
  __pyx_r = 0;

#line 383 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 383 "re2.pyx"
  return __pyx_r;

#line 383 "re2.pyx"
}

#line 383 "re2.pyx"


#line 383 "re2.pyx"
/* Python wrapper */

#line 383 "re2.pyx"
static int __pyx_pw_3re2_7Pattern_7pattern_5__del__(PyObject *__pyx_v_self); /*proto*/

#line 383 "re2.pyx"
static int __pyx_pw_3re2_7Pattern_7pattern_5__del__(PyObject *__pyx_v_self) {

#line 383 "re2.pyx"
  int __pyx_r;

#line 383 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 383 "re2.pyx"
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = 
#line 383 "re2.pyx"
__pyx_pf_3re2_7Pattern_7pattern_4__del__(((struct __pyx_obj_3re2_Pattern *)__pyx_v_self));

#line 383 "re2.pyx"


#line 383 "re2.pyx"
  /* function exit code */

#line 383 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 383 "re2.pyx"
  return __pyx_r;

#line 383 "re2.pyx"
}

#line 383 "re2.pyx"


#line 383 "re2.pyx"
static int __pyx_pf_3re2_7Pattern_7pattern_4__del__(struct __pyx_obj_3re2_Pattern *__pyx_v_self) {

#line 383 "re2.pyx"
  int __pyx_r;

#line 383 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 383 "re2.pyx"
  __Pyx_RefNannySetupContext("__del__", 0);

#line 383 "re2.pyx"
  __Pyx_INCREF(Py_None);

#line 383 "re2.pyx"
  __Pyx_GIVEREF(Py_None);

#line 383 "re2.pyx"
  __Pyx_GOTREF(__pyx_v_self->pattern);

#line 383 "re2.pyx"
  __Pyx_DECREF(__pyx_v_self->pattern);

#line 383 "re2.pyx"
  __pyx_v_self->pattern = Py_None;

#line 383 "re2.pyx"


#line 383 "re2.pyx"
  /* function exit code */

#line 383 "re2.pyx"
  __pyx_r = 0;

#line 383 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 383 "re2.pyx"
  return __pyx_r;

#line 383 "re2.pyx"
}

/* "re2.pyx":766
 * _MAXCACHE = 100
 * 
 * def compile(pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     cachekey = (type(pattern),) + (pattern, flags)
 *     p = _cache.get(cachekey)
 */

#line 766 "re2.pyx"


#line 766 "re2.pyx"
/* Python wrapper */

#line 766 "re2.pyx"
static PyObject *__pyx_pw_3re2_3compile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 766 "re2.pyx"
static char __pyx_doc_3re2_2compile[] = "File: re2.pyx (starting at line 766)";
static PyMethodDef __pyx_mdef_3re2_3compile = 
#line 766 "re2.pyx"
{"compile", (PyCFunction)__pyx_pw_3re2_3compile, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_2compile};

#line 766 "re2.pyx"
static PyObject *__pyx_pw_3re2_3compile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0
#line 766 "re2.pyx"
;
  int __pyx_v_flags
#line 766 "re2.pyx"
;
  int __pyx_v_max_mem
#line 766 "re2.pyx"
;

#line 766 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 766 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 766 "re2.pyx"
  __Pyx_RefNannySetupContext("compile (wrapper)", 0);

#line 766 "re2.pyx"
  {

#line 766 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_flags,&__pyx_n_s_max_mem,0};

#line 766 "re2.pyx"
    PyObject* values[3] = {0,0,0};

#line 766 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 766 "re2.pyx"
      Py_ssize_t kw_args;

#line 766 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 766 "re2.pyx"
      switch (pos_args) {
        case  3: 
#line 766 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 766 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 766 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 766 "re2.pyx"
        case  0: break;
        default: 
#line 766 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 766 "re2.pyx"
      }

#line 766 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 766 "re2.pyx"
      switch (pos_args) {

#line 766 "re2.pyx"
        case  0:

#line 766 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else 
#line 766 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 766 "re2.pyx"
        case  1:

#line 766 "re2.pyx"
        if (kw_args > 0) {

#line 766 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);

#line 766 "re2.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 766 "re2.pyx"
        }

#line 766 "re2.pyx"
        case  2:

#line 766 "re2.pyx"
        if (kw_args > 0) {

#line 766 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_mem);

#line 766 "re2.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 766 "re2.pyx"
        }

#line 766 "re2.pyx"
      }

#line 766 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 766 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compile") < 0)) __PYX_ERR(0, 766, __pyx_L3_error)

#line 766 "re2.pyx"
      }

#line 766 "re2.pyx"
    } else {

#line 766 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 766 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 766 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 766 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 766 "re2.pyx"
        break;
        default: 
#line 766 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 766 "re2.pyx"
      }

#line 766 "re2.pyx"
    }

#line 766 "re2.pyx"
    __pyx_v_pattern = values[0];

#line 766 "re2.pyx"
    if (values[1]) {

#line 766 "re2.pyx"
      __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 766, __pyx_L3_error)

#line 766 "re2.pyx"
    } else {

#line 766 "re2.pyx"
      __pyx_v_flags = ((int)0);

#line 766 "re2.pyx"
    }

#line 766 "re2.pyx"
    if (values[2]) {

#line 766 "re2.pyx"
      __pyx_v_max_mem = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_max_mem == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 766, __pyx_L3_error)

#line 766 "re2.pyx"
    } else {

#line 766 "re2.pyx"
      __pyx_v_max_mem = ((int)0x800000);

#line 766 "re2.pyx"
    }

#line 766 "re2.pyx"
  }

#line 766 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 766 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compile", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 766 "re2.pyx"
__PYX_ERR(0, 766, __pyx_L3_error)

#line 766 "re2.pyx"
  __pyx_L3_error:;

#line 766 "re2.pyx"
  __Pyx_AddTraceback("re2.compile", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 766 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 766 "re2.pyx"
  return NULL;

#line 766 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 766 "re2.pyx"
__pyx_pf_3re2_2compile(__pyx_self, __pyx_v_pattern, __pyx_v_flags, __pyx_v_max_mem);

#line 766 "re2.pyx"


#line 766 "re2.pyx"
  /* function exit code */

#line 766 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 766 "re2.pyx"
  return __pyx_r;

#line 766 "re2.pyx"
}

#line 766 "re2.pyx"


#line 766 "re2.pyx"
static PyObject *__pyx_pf_3re2_2compile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, int __pyx_v_flags, int __pyx_v_max_mem) {
  PyObject *__pyx_v_cachekey = NULL
#line 766 "re2.pyx"
;
  PyObject *__pyx_v_p = NULL
#line 766 "re2.pyx"
;

#line 766 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 766 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 766 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 766 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 766 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 766 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 766 "re2.pyx"
  int __pyx_t_5;

#line 766 "re2.pyx"
  int __pyx_t_6;

#line 766 "re2.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 766 "re2.pyx"
  int __pyx_t_8;

#line 766 "re2.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 766 "re2.pyx"
  Py_ssize_t __pyx_t_10;

#line 766 "re2.pyx"
  __Pyx_RefNannySetupContext("compile", 0);

  /* "re2.pyx":767
 * 
 * def compile(pattern, int flags=0, int max_mem=8388608):
 *     cachekey = (type(pattern),) + (pattern, flags)             # <<<<<<<<<<<<<<
 *     p = _cache.get(cachekey)
 *     if p is not None:
 */

#line 767 "re2.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 767, __pyx_L1_error)

#line 767 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 767 "re2.pyx"
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_pattern)));

#line 767 "re2.pyx"
  __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_pattern)));

#line 767 "re2.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(__pyx_v_pattern)));

#line 767 "re2.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 767, __pyx_L1_error)

#line 767 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 767 "re2.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 767, __pyx_L1_error)

#line 767 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 767 "re2.pyx"
  __Pyx_INCREF(__pyx_v_pattern);

#line 767 "re2.pyx"
  __Pyx_GIVEREF(__pyx_v_pattern);

#line 767 "re2.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_pattern);

#line 767 "re2.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 767 "re2.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);

#line 767 "re2.pyx"
  __pyx_t_2 = 0;

#line 767 "re2.pyx"
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 767, __pyx_L1_error)

#line 767 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 767 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 767 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 767 "re2.pyx"
  __pyx_v_cachekey = ((PyObject*)__pyx_t_2);

#line 767 "re2.pyx"
  __pyx_t_2 = 0;

  /* "re2.pyx":768
 * def compile(pattern, int flags=0, int max_mem=8388608):
 *     cachekey = (type(pattern),) + (pattern, flags)
 *     p = _cache.get(cachekey)             # <<<<<<<<<<<<<<
 *     if p is not None:
 *         return p
 */

#line 768 "re2.pyx"
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_cache); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 768, __pyx_L1_error)

#line 768 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 768 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 768, __pyx_L1_error)

#line 768 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 768 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 768 "re2.pyx"
  __pyx_t_3 = NULL;

#line 768 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {

#line 768 "re2.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);

#line 768 "re2.pyx"
    if (likely(__pyx_t_3)) {

#line 768 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 768 "re2.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 768 "re2.pyx"
      __Pyx_INCREF(function);

#line 768 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_1, function);

#line 768 "re2.pyx"
    }

#line 768 "re2.pyx"
  }

#line 768 "re2.pyx"
  if (!__pyx_t_3) {

#line 768 "re2.pyx"
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_cachekey); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)

#line 768 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 768 "re2.pyx"
  } else {

#line 768 "re2.pyx"
    #if CYTHON_FAST_PYCALL

#line 768 "re2.pyx"
    if (PyFunction_Check(__pyx_t_1)) {

#line 768 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_cachekey};

#line 768 "re2.pyx"
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)

#line 768 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 768 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 768 "re2.pyx"
    } else

#line 768 "re2.pyx"
    #endif

#line 768 "re2.pyx"
    #if CYTHON_FAST_PYCCALL

#line 768 "re2.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {

#line 768 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_cachekey};

#line 768 "re2.pyx"
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)

#line 768 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 768 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 768 "re2.pyx"
    } else

#line 768 "re2.pyx"
    #endif

#line 768 "re2.pyx"
    {

#line 768 "re2.pyx"
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 768, __pyx_L1_error)

#line 768 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 768 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;

#line 768 "re2.pyx"
      __Pyx_INCREF(__pyx_v_cachekey);

#line 768 "re2.pyx"
      __Pyx_GIVEREF(__pyx_v_cachekey);

#line 768 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_cachekey);

#line 768 "re2.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)

#line 768 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 768 "re2.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 768 "re2.pyx"
    }

#line 768 "re2.pyx"
  }

#line 768 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 768 "re2.pyx"
  __pyx_v_p = __pyx_t_2;

#line 768 "re2.pyx"
  __pyx_t_2 = 0;

  /* "re2.pyx":769
 *     cachekey = (type(pattern),) + (pattern, flags)
 *     p = _cache.get(cachekey)
 *     if p is not None:             # <<<<<<<<<<<<<<
 *         return p
 *     p = _compile(pattern, flags, max_mem)
 */

#line 769 "re2.pyx"
  __pyx_t_5 = (__pyx_v_p != Py_None);

#line 769 "re2.pyx"
  __pyx_t_6 = (__pyx_t_5 != 0);

#line 769 "re2.pyx"
  if (__pyx_t_6) {

    /* "re2.pyx":770
 *     p = _cache.get(cachekey)
 *     if p is not None:
 *         return p             # <<<<<<<<<<<<<<
 *     p = _compile(pattern, flags, max_mem)
 * 
 */

#line 770 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 770 "re2.pyx"
    __Pyx_INCREF(__pyx_v_p);

#line 770 "re2.pyx"
    __pyx_r = __pyx_v_p;

#line 770 "re2.pyx"
    goto __pyx_L0;

    /* "re2.pyx":769
 *     cachekey = (type(pattern),) + (pattern, flags)
 *     p = _cache.get(cachekey)
 *     if p is not None:             # <<<<<<<<<<<<<<
 *         return p
 *     p = _compile(pattern, flags, max_mem)
 */

#line 769 "re2.pyx"
  }

  /* "re2.pyx":771
 *     if p is not None:
 *         return p
 *     p = _compile(pattern, flags, max_mem)             # <<<<<<<<<<<<<<
 * 
 *     if len(_cache) >= _MAXCACHE:
 */

#line 771 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compile); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 771, __pyx_L1_error)

#line 771 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 771 "re2.pyx"
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 771, __pyx_L1_error)

#line 771 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 771 "re2.pyx"
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_max_mem); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 771, __pyx_L1_error)

#line 771 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 771 "re2.pyx"
  __pyx_t_7 = NULL;

#line 771 "re2.pyx"
  __pyx_t_8 = 0;

#line 771 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {

#line 771 "re2.pyx"
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);

#line 771 "re2.pyx"
    if (likely(__pyx_t_7)) {

#line 771 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 771 "re2.pyx"
      __Pyx_INCREF(__pyx_t_7);

#line 771 "re2.pyx"
      __Pyx_INCREF(function);

#line 771 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_1, function);

#line 771 "re2.pyx"
      __pyx_t_8 = 1;

#line 771 "re2.pyx"
    }

#line 771 "re2.pyx"
  }

#line 771 "re2.pyx"
  #if CYTHON_FAST_PYCALL

#line 771 "re2.pyx"
  if (PyFunction_Check(__pyx_t_1)) {

#line 771 "re2.pyx"
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_pattern, __pyx_t_4, __pyx_t_3};

#line 771 "re2.pyx"
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 771, __pyx_L1_error)

#line 771 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 771 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 771 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 771 "re2.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 771 "re2.pyx"
  } else

#line 771 "re2.pyx"
  #endif

#line 771 "re2.pyx"
  #if CYTHON_FAST_PYCCALL

#line 771 "re2.pyx"
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {

#line 771 "re2.pyx"
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_pattern, __pyx_t_4, __pyx_t_3};

#line 771 "re2.pyx"
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 771, __pyx_L1_error)

#line 771 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 771 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 771 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 771 "re2.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 771 "re2.pyx"
  } else

#line 771 "re2.pyx"
  #endif

#line 771 "re2.pyx"
  {

#line 771 "re2.pyx"
    __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 771, __pyx_L1_error)

#line 771 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_9);

#line 771 "re2.pyx"
    if (__pyx_t_7) {

#line 771 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;

#line 771 "re2.pyx"
    }

#line 771 "re2.pyx"
    __Pyx_INCREF(__pyx_v_pattern);

#line 771 "re2.pyx"
    __Pyx_GIVEREF(__pyx_v_pattern);

#line 771 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_v_pattern);

#line 771 "re2.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 771 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);

#line 771 "re2.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 771 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_3);

#line 771 "re2.pyx"
    __pyx_t_4 = 0;

#line 771 "re2.pyx"
    __pyx_t_3 = 0;

#line 771 "re2.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 771, __pyx_L1_error)

#line 771 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 771 "re2.pyx"
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 771 "re2.pyx"
  }

#line 771 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 771 "re2.pyx"
  __Pyx_DECREF_SET(__pyx_v_p, __pyx_t_2);

#line 771 "re2.pyx"
  __pyx_t_2 = 0;

  /* "re2.pyx":773
 *     p = _compile(pattern, flags, max_mem)
 * 
 *     if len(_cache) >= _MAXCACHE:             # <<<<<<<<<<<<<<
 *         _cache.clear()
 *     _cache[cachekey] = p
 */

#line 773 "re2.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_cache); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 773, __pyx_L1_error)

#line 773 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 773 "re2.pyx"
  __pyx_t_10 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 773, __pyx_L1_error)

#line 773 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 773 "re2.pyx"
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 773, __pyx_L1_error)

#line 773 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 773 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_MAXCACHE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 773, __pyx_L1_error)

#line 773 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 773 "re2.pyx"
  __pyx_t_9 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_GE); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 773, __pyx_L1_error)

#line 773 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 773 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 773 "re2.pyx"
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 773, __pyx_L1_error)

#line 773 "re2.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 773 "re2.pyx"
  if (__pyx_t_6) {

    /* "re2.pyx":774
 * 
 *     if len(_cache) >= _MAXCACHE:
 *         _cache.clear()             # <<<<<<<<<<<<<<
 *     _cache[cachekey] = p
 *     return p
 */

#line 774 "re2.pyx"
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_cache); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 774, __pyx_L1_error)

#line 774 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 774 "re2.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_clear); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 774, __pyx_L1_error)

#line 774 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 774 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 774 "re2.pyx"
    __pyx_t_1 = NULL;

#line 774 "re2.pyx"
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 774 "re2.pyx"
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);

#line 774 "re2.pyx"
      if (likely(__pyx_t_1)) {

#line 774 "re2.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 774 "re2.pyx"
        __Pyx_INCREF(__pyx_t_1);

#line 774 "re2.pyx"
        __Pyx_INCREF(function);

#line 774 "re2.pyx"
        __Pyx_DECREF_SET(__pyx_t_2, function);

#line 774 "re2.pyx"
      }

#line 774 "re2.pyx"
    }

#line 774 "re2.pyx"
    if (__pyx_t_1) {

#line 774 "re2.pyx"
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 774, __pyx_L1_error)

#line 774 "re2.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 774 "re2.pyx"
    } else {

#line 774 "re2.pyx"
      __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 774, __pyx_L1_error)

#line 774 "re2.pyx"
    }

#line 774 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_9);

#line 774 "re2.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 774 "re2.pyx"
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "re2.pyx":773
 *     p = _compile(pattern, flags, max_mem)
 * 
 *     if len(_cache) >= _MAXCACHE:             # <<<<<<<<<<<<<<
 *         _cache.clear()
 *     _cache[cachekey] = p
 */

#line 773 "re2.pyx"
  }

  /* "re2.pyx":775
 *     if len(_cache) >= _MAXCACHE:
 *         _cache.clear()
 *     _cache[cachekey] = p             # <<<<<<<<<<<<<<
 *     return p
 * 
 */

#line 775 "re2.pyx"
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_cache); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 775, __pyx_L1_error)

#line 775 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 775 "re2.pyx"
  if (unlikely(PyObject_SetItem(__pyx_t_9, __pyx_v_cachekey, __pyx_v_p) < 0)) __PYX_ERR(0, 775, __pyx_L1_error)

#line 775 "re2.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "re2.pyx":776
 *         _cache.clear()
 *     _cache[cachekey] = p
 *     return p             # <<<<<<<<<<<<<<
 * 
 * class BackreferencesException(Exception):
 */

#line 776 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 776 "re2.pyx"
  __Pyx_INCREF(__pyx_v_p);

#line 776 "re2.pyx"
  __pyx_r = __pyx_v_p;

#line 776 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":766
 * _MAXCACHE = 100
 * 
 * def compile(pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     cachekey = (type(pattern),) + (pattern, flags)
 *     p = _cache.get(cachekey)
 */

#line 766 "re2.pyx"


#line 766 "re2.pyx"
  /* function exit code */

#line 766 "re2.pyx"
  __pyx_L1_error:;

#line 766 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 766 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 766 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 766 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 766 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 766 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 766 "re2.pyx"
  __Pyx_AddTraceback("re2.compile", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 766 "re2.pyx"
  __pyx_r = NULL;

#line 766 "re2.pyx"
  __pyx_L0:;

#line 766 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_cachekey);

#line 766 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_p);

#line 766 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 766 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 766 "re2.pyx"
  return __pyx_r;

#line 766 "re2.pyx"
}

/* "re2.pyx":787
 * 
 * class Tokenizer:
 *     def __init__(self, string):             # <<<<<<<<<<<<<<
 *         self.string = string
 *         self.index = 0
 */

#line 787 "re2.pyx"


#line 787 "re2.pyx"
/* Python wrapper */

#line 787 "re2.pyx"
static PyObject *__pyx_pw_3re2_9Tokenizer_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 787 "re2.pyx"
static char __pyx_doc_3re2_9Tokenizer___init__[] = "File: re2.pyx (starting at line 787)";
static PyMethodDef __pyx_mdef_3re2_9Tokenizer_1__init__ = 
#line 787 "re2.pyx"
{"__init__", (PyCFunction)__pyx_pw_3re2_9Tokenizer_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_9Tokenizer___init__};

#line 787 "re2.pyx"
static PyObject *__pyx_pw_3re2_9Tokenizer_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0
#line 787 "re2.pyx"
;
  PyObject *__pyx_v_string = 0
#line 787 "re2.pyx"
;

#line 787 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 787 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 787 "re2.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 787 "re2.pyx"
  {

#line 787 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_string,0};

#line 787 "re2.pyx"
    PyObject* values[2] = {0,0};

#line 787 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 787 "re2.pyx"
      Py_ssize_t kw_args;

#line 787 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 787 "re2.pyx"
      switch (pos_args) {
        case  2: 
#line 787 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 787 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 787 "re2.pyx"
        case  0: break;
        default: 
#line 787 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 787 "re2.pyx"
      }

#line 787 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 787 "re2.pyx"
      switch (pos_args) {

#line 787 "re2.pyx"
        case  0:

#line 787 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else 
#line 787 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 787 "re2.pyx"
        case  1:

#line 787 "re2.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;

#line 787 "re2.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); 
#line 787 "re2.pyx"
__PYX_ERR(0, 787, __pyx_L3_error)

#line 787 "re2.pyx"
        }

#line 787 "re2.pyx"
      }

#line 787 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 787 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 787, __pyx_L3_error)

#line 787 "re2.pyx"
      }

#line 787 "re2.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 787 "re2.pyx"
      goto __pyx_L5_argtuple_error;

#line 787 "re2.pyx"
    } else {

#line 787 "re2.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 787 "re2.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 787 "re2.pyx"
    }

#line 787 "re2.pyx"
    __pyx_v_self = values[0];

#line 787 "re2.pyx"
    __pyx_v_string = values[1];

#line 787 "re2.pyx"
  }

#line 787 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 787 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 787 "re2.pyx"
__PYX_ERR(0, 787, __pyx_L3_error)

#line 787 "re2.pyx"
  __pyx_L3_error:;

#line 787 "re2.pyx"
  __Pyx_AddTraceback("re2.Tokenizer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 787 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 787 "re2.pyx"
  return NULL;

#line 787 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 787 "re2.pyx"
__pyx_pf_3re2_9Tokenizer___init__(__pyx_self, __pyx_v_self, __pyx_v_string);

#line 787 "re2.pyx"


#line 787 "re2.pyx"
  /* function exit code */

#line 787 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 787 "re2.pyx"
  return __pyx_r;

#line 787 "re2.pyx"
}

#line 787 "re2.pyx"


#line 787 "re2.pyx"
static PyObject *__pyx_pf_3re2_9Tokenizer___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_string) {

#line 787 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 787 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 787 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 787 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 787 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 787 "re2.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "re2.pyx":788
 * class Tokenizer:
 *     def __init__(self, string):
 *         self.string = string             # <<<<<<<<<<<<<<
 *         self.index = 0
 *         self.__next()
 */

#line 788 "re2.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_string, __pyx_v_string) < 0) __PYX_ERR(0, 788, __pyx_L1_error)

  /* "re2.pyx":789
 *     def __init__(self, string):
 *         self.string = string
 *         self.index = 0             # <<<<<<<<<<<<<<
 *         self.__next()
 *     def __next(self):
 */

#line 789 "re2.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_index, __pyx_int_0) < 0) __PYX_ERR(0, 789, __pyx_L1_error)

  /* "re2.pyx":790
 *         self.string = string
 *         self.index = 0
 *         self.__next()             # <<<<<<<<<<<<<<
 *     def __next(self):
 *         if self.index >= len(self.string):
 */

#line 790 "re2.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Tokenizer__next); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 790, __pyx_L1_error)

#line 790 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 790 "re2.pyx"
  __pyx_t_3 = NULL;

#line 790 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 790 "re2.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 790 "re2.pyx"
    if (likely(__pyx_t_3)) {

#line 790 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 790 "re2.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 790 "re2.pyx"
      __Pyx_INCREF(function);

#line 790 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 790 "re2.pyx"
    }

#line 790 "re2.pyx"
  }

#line 790 "re2.pyx"
  if (__pyx_t_3) {

#line 790 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L1_error)

#line 790 "re2.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 790 "re2.pyx"
  } else {

#line 790 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L1_error)

#line 790 "re2.pyx"
  }

#line 790 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 790 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 790 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":787
 * 
 * class Tokenizer:
 *     def __init__(self, string):             # <<<<<<<<<<<<<<
 *         self.string = string
 *         self.index = 0
 */

#line 787 "re2.pyx"


#line 787 "re2.pyx"
  /* function exit code */

#line 787 "re2.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 787 "re2.pyx"
  goto __pyx_L0;

#line 787 "re2.pyx"
  __pyx_L1_error:;

#line 787 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 787 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 787 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 787 "re2.pyx"
  __Pyx_AddTraceback("re2.Tokenizer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 787 "re2.pyx"
  __pyx_r = NULL;

#line 787 "re2.pyx"
  __pyx_L0:;

#line 787 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 787 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 787 "re2.pyx"
  return __pyx_r;

#line 787 "re2.pyx"
}

/* "re2.pyx":791
 *         self.index = 0
 *         self.__next()
 *     def __next(self):             # <<<<<<<<<<<<<<
 *         if self.index >= len(self.string):
 *             self.next = None
 */

#line 791 "re2.pyx"


#line 791 "re2.pyx"
/* Python wrapper */

#line 791 "re2.pyx"
static PyObject *__pyx_pw_3re2_9Tokenizer_3__next(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/

#line 791 "re2.pyx"
static char __pyx_doc_3re2_9Tokenizer_2__next[] = "File: re2.pyx (starting at line 791)";
static PyMethodDef __pyx_mdef_3re2_9Tokenizer_3__next = 
#line 791 "re2.pyx"
{"__next", (PyCFunction)__pyx_pw_3re2_9Tokenizer_3__next, METH_O, __pyx_doc_3re2_9Tokenizer_2__next};

#line 791 "re2.pyx"
static PyObject *__pyx_pw_3re2_9Tokenizer_3__next(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 791 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 791 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 791 "re2.pyx"
  __Pyx_RefNannySetupContext("__next (wrapper)", 0);
  __pyx_r = 
#line 791 "re2.pyx"
__pyx_pf_3re2_9Tokenizer_2__next(__pyx_self, ((PyObject *)__pyx_v_self));

#line 791 "re2.pyx"


#line 791 "re2.pyx"
  /* function exit code */

#line 791 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 791 "re2.pyx"
  return __pyx_r;

#line 791 "re2.pyx"
}

#line 791 "re2.pyx"


#line 791 "re2.pyx"
static PyObject *__pyx_pf_3re2_9Tokenizer_2__next(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_ch = NULL
#line 791 "re2.pyx"
;
  PyObject *__pyx_v_c = NULL
#line 791 "re2.pyx"
;

#line 791 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 791 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 791 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 791 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 791 "re2.pyx"
  Py_ssize_t __pyx_t_3;

#line 791 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 791 "re2.pyx"
  int __pyx_t_5;

#line 791 "re2.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 791 "re2.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 791 "re2.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 791 "re2.pyx"
  int __pyx_t_9;

#line 791 "re2.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 791 "re2.pyx"
  __Pyx_RefNannySetupContext("__next", 0);

  /* "re2.pyx":792
 *         self.__next()
 *     def __next(self):
 *         if self.index >= len(self.string):             # <<<<<<<<<<<<<<
 *             self.next = None
 *             return
 */

#line 792 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 792, __pyx_L1_error)

#line 792 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 792 "re2.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 792, __pyx_L1_error)

#line 792 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 792 "re2.pyx"
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 792, __pyx_L1_error)

#line 792 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 792 "re2.pyx"
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 792, __pyx_L1_error)

#line 792 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 792 "re2.pyx"
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 792, __pyx_L1_error)

#line 792 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 792 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 792 "re2.pyx"
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 792, __pyx_L1_error)

#line 792 "re2.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 792 "re2.pyx"
  if (__pyx_t_5) {

    /* "re2.pyx":793
 *     def __next(self):
 *         if self.index >= len(self.string):
 *             self.next = None             # <<<<<<<<<<<<<<
 *             return
 *         ch = self.string[self.index]
 */

#line 793 "re2.pyx"
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_next, Py_None) < 0) __PYX_ERR(0, 793, __pyx_L1_error)

    /* "re2.pyx":794
 *         if self.index >= len(self.string):
 *             self.next = None
 *             return             # <<<<<<<<<<<<<<
 *         ch = self.string[self.index]
 *         if ch[0] == "\\":
 */

#line 794 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 794 "re2.pyx"
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 794 "re2.pyx"
    goto __pyx_L0;

    /* "re2.pyx":792
 *         self.__next()
 *     def __next(self):
 *         if self.index >= len(self.string):             # <<<<<<<<<<<<<<
 *             self.next = None
 *             return
 */

#line 792 "re2.pyx"
  }

  /* "re2.pyx":795
 *             self.next = None
 *             return
 *         ch = self.string[self.index]             # <<<<<<<<<<<<<<
 *         if ch[0] == "\\":
 *             try:
 */

#line 795 "re2.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_string); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 795, __pyx_L1_error)

#line 795 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 795 "re2.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 795, __pyx_L1_error)

#line 795 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 795 "re2.pyx"
  __pyx_t_1 = PyObject_GetItem(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)

#line 795 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 795 "re2.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 795 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 795 "re2.pyx"
  __pyx_v_ch = __pyx_t_1;

#line 795 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":796
 *             return
 *         ch = self.string[self.index]
 *         if ch[0] == "\\":             # <<<<<<<<<<<<<<
 *             try:
 *                 c = self.string[self.index + 1]
 */

#line 796 "re2.pyx"
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_ch, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 796, __pyx_L1_error)

#line 796 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 796 "re2.pyx"
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s__5, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 796, __pyx_L1_error)

#line 796 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 796 "re2.pyx"
  if (__pyx_t_5) {

    /* "re2.pyx":797
 *         ch = self.string[self.index]
 *         if ch[0] == "\\":
 *             try:             # <<<<<<<<<<<<<<
 *                 c = self.string[self.index + 1]
 *             except IndexError:
 */

#line 797 "re2.pyx"
    {

#line 797 "re2.pyx"
      __Pyx_PyThreadState_declare

#line 797 "re2.pyx"
      __Pyx_PyThreadState_assign

#line 797 "re2.pyx"
      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);

#line 797 "re2.pyx"
      __Pyx_XGOTREF(__pyx_t_6);

#line 797 "re2.pyx"
      __Pyx_XGOTREF(__pyx_t_7);

#line 797 "re2.pyx"
      __Pyx_XGOTREF(__pyx_t_8);

#line 797 "re2.pyx"
      /*try:*/ {

        /* "re2.pyx":798
 *         if ch[0] == "\\":
 *             try:
 *                 c = self.string[self.index + 1]             # <<<<<<<<<<<<<<
 *             except IndexError:
 *                 raise RegexError, "bogus escape (end of line)"
 */

#line 798 "re2.pyx"
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_string); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 798, __pyx_L5_error)

#line 798 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 798 "re2.pyx"
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 798, __pyx_L5_error)

#line 798 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 798 "re2.pyx"
        __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 798, __pyx_L5_error)

#line 798 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 798 "re2.pyx"
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 798 "re2.pyx"
        __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 798, __pyx_L5_error)

#line 798 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 798 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 798 "re2.pyx"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 798 "re2.pyx"
        __pyx_v_c = __pyx_t_2;

#line 798 "re2.pyx"
        __pyx_t_2 = 0;

        /* "re2.pyx":797
 *         ch = self.string[self.index]
 *         if ch[0] == "\\":
 *             try:             # <<<<<<<<<<<<<<
 *                 c = self.string[self.index + 1]
 *             except IndexError:
 */

#line 797 "re2.pyx"
      }

#line 797 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 797 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 797 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 797 "re2.pyx"
      goto __pyx_L12_try_end;

#line 797 "re2.pyx"
      __pyx_L5_error:;

#line 797 "re2.pyx"
      __Pyx_PyThreadState_assign

#line 797 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 797 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 797 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "re2.pyx":799
 *             try:
 *                 c = self.string[self.index + 1]
 *             except IndexError:             # <<<<<<<<<<<<<<
 *                 raise RegexError, "bogus escape (end of line)"
 *             ch = ch + c
 */

#line 799 "re2.pyx"
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IndexError);

#line 799 "re2.pyx"
      if (__pyx_t_9) {

#line 799 "re2.pyx"
        __Pyx_AddTraceback("re2.Tokenizer.__next", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 799 "re2.pyx"
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_4, &__pyx_t_1) < 0) __PYX_ERR(0, 799, __pyx_L7_except_error)

#line 799 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 799 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 799 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

        /* "re2.pyx":800
 *                 c = self.string[self.index + 1]
 *             except IndexError:
 *                 raise RegexError, "bogus escape (end of line)"             # <<<<<<<<<<<<<<
 *             ch = ch + c
 *         self.index = self.index + len(ch)
 */

#line 800 "re2.pyx"
        __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_RegexError); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 800, __pyx_L7_except_error)

#line 800 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_10);

#line 800 "re2.pyx"
        __Pyx_Raise(__pyx_t_10, __pyx_kp_s_bogus_escape_end_of_line, 0, 0);

#line 800 "re2.pyx"
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 800 "re2.pyx"
        __PYX_ERR(0, 800, __pyx_L7_except_error)

#line 800 "re2.pyx"
      }

#line 800 "re2.pyx"
      goto __pyx_L7_except_error;

#line 800 "re2.pyx"
      __pyx_L7_except_error:;

      /* "re2.pyx":797
 *         ch = self.string[self.index]
 *         if ch[0] == "\\":
 *             try:             # <<<<<<<<<<<<<<
 *                 c = self.string[self.index + 1]
 *             except IndexError:
 */

#line 797 "re2.pyx"
      __Pyx_PyThreadState_assign

#line 797 "re2.pyx"
      __Pyx_XGIVEREF(__pyx_t_6);

#line 797 "re2.pyx"
      __Pyx_XGIVEREF(__pyx_t_7);

#line 797 "re2.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 797 "re2.pyx"
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);

#line 797 "re2.pyx"
      goto __pyx_L1_error;

#line 797 "re2.pyx"
      __pyx_L12_try_end:;

#line 797 "re2.pyx"
    }

    /* "re2.pyx":801
 *             except IndexError:
 *                 raise RegexError, "bogus escape (end of line)"
 *             ch = ch + c             # <<<<<<<<<<<<<<
 *         self.index = self.index + len(ch)
 *         self.next = ch
 */

#line 801 "re2.pyx"
    __pyx_t_1 = PyNumber_Add(__pyx_v_ch, __pyx_v_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L1_error)

#line 801 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 801 "re2.pyx"
    __Pyx_DECREF_SET(__pyx_v_ch, __pyx_t_1);

#line 801 "re2.pyx"
    __pyx_t_1 = 0;

    /* "re2.pyx":796
 *             return
 *         ch = self.string[self.index]
 *         if ch[0] == "\\":             # <<<<<<<<<<<<<<
 *             try:
 *                 c = self.string[self.index + 1]
 */

#line 796 "re2.pyx"
  }

  /* "re2.pyx":802
 *                 raise RegexError, "bogus escape (end of line)"
 *             ch = ch + c
 *         self.index = self.index + len(ch)             # <<<<<<<<<<<<<<
 *         self.next = ch
 *     def get(self):
 */

#line 802 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 802, __pyx_L1_error)

#line 802 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 802 "re2.pyx"
  __pyx_t_3 = PyObject_Length(__pyx_v_ch); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 802, __pyx_L1_error)

#line 802 "re2.pyx"
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 802, __pyx_L1_error)

#line 802 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 802 "re2.pyx"
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 802, __pyx_L1_error)

#line 802 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 802 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 802 "re2.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 802 "re2.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_index, __pyx_t_2) < 0) __PYX_ERR(0, 802, __pyx_L1_error)

#line 802 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":803
 *             ch = ch + c
 *         self.index = self.index + len(ch)
 *         self.next = ch             # <<<<<<<<<<<<<<
 *     def get(self):
 *         this = self.next
 */

#line 803 "re2.pyx"
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_next, __pyx_v_ch) < 0) __PYX_ERR(0, 803, __pyx_L1_error)

  /* "re2.pyx":791
 *         self.index = 0
 *         self.__next()
 *     def __next(self):             # <<<<<<<<<<<<<<
 *         if self.index >= len(self.string):
 *             self.next = None
 */

#line 791 "re2.pyx"


#line 791 "re2.pyx"
  /* function exit code */

#line 791 "re2.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 791 "re2.pyx"
  goto __pyx_L0;

#line 791 "re2.pyx"
  __pyx_L1_error:;

#line 791 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 791 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 791 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 791 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 791 "re2.pyx"
  __Pyx_AddTraceback("re2.Tokenizer.__next", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 791 "re2.pyx"
  __pyx_r = NULL;

#line 791 "re2.pyx"
  __pyx_L0:;

#line 791 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_ch);

#line 791 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_c);

#line 791 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 791 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 791 "re2.pyx"
  return __pyx_r;

#line 791 "re2.pyx"
}

/* "re2.pyx":804
 *         self.index = self.index + len(ch)
 *         self.next = ch
 *     def get(self):             # <<<<<<<<<<<<<<
 *         this = self.next
 *         self.__next()
 */

#line 804 "re2.pyx"


#line 804 "re2.pyx"
/* Python wrapper */

#line 804 "re2.pyx"
static PyObject *__pyx_pw_3re2_9Tokenizer_5get(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/

#line 804 "re2.pyx"
static char __pyx_doc_3re2_9Tokenizer_4get[] = "File: re2.pyx (starting at line 804)";
static PyMethodDef __pyx_mdef_3re2_9Tokenizer_5get = 
#line 804 "re2.pyx"
{"get", (PyCFunction)__pyx_pw_3re2_9Tokenizer_5get, METH_O, __pyx_doc_3re2_9Tokenizer_4get};

#line 804 "re2.pyx"
static PyObject *__pyx_pw_3re2_9Tokenizer_5get(PyObject *__pyx_self, PyObject *__pyx_v_self) {

#line 804 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 804 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 804 "re2.pyx"
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  __pyx_r = 
#line 804 "re2.pyx"
__pyx_pf_3re2_9Tokenizer_4get(__pyx_self, ((PyObject *)__pyx_v_self));

#line 804 "re2.pyx"


#line 804 "re2.pyx"
  /* function exit code */

#line 804 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 804 "re2.pyx"
  return __pyx_r;

#line 804 "re2.pyx"
}

#line 804 "re2.pyx"


#line 804 "re2.pyx"
static PyObject *__pyx_pf_3re2_9Tokenizer_4get(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_this = NULL
#line 804 "re2.pyx"
;

#line 804 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 804 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 804 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 804 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 804 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 804 "re2.pyx"
  __Pyx_RefNannySetupContext("get", 0);

  /* "re2.pyx":805
 *         self.next = ch
 *     def get(self):
 *         this = self.next             # <<<<<<<<<<<<<<
 *         self.__next()
 *         return this
 */

#line 805 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_next); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 805, __pyx_L1_error)

#line 805 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 805 "re2.pyx"
  __pyx_v_this = __pyx_t_1;

#line 805 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":806
 *     def get(self):
 *         this = self.next
 *         self.__next()             # <<<<<<<<<<<<<<
 *         return this
 * 
 */

#line 806 "re2.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Tokenizer__next); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 806, __pyx_L1_error)

#line 806 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 806 "re2.pyx"
  __pyx_t_3 = NULL;

#line 806 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 806 "re2.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 806 "re2.pyx"
    if (likely(__pyx_t_3)) {

#line 806 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 806 "re2.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 806 "re2.pyx"
      __Pyx_INCREF(function);

#line 806 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 806 "re2.pyx"
    }

#line 806 "re2.pyx"
  }

#line 806 "re2.pyx"
  if (__pyx_t_3) {

#line 806 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 806, __pyx_L1_error)

#line 806 "re2.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 806 "re2.pyx"
  } else {

#line 806 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 806, __pyx_L1_error)

#line 806 "re2.pyx"
  }

#line 806 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 806 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 806 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":807
 *         this = self.next
 *         self.__next()
 *         return this             # <<<<<<<<<<<<<<
 * 
 * def prepare_pattern(pattern, int flags):
 */

#line 807 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 807 "re2.pyx"
  __Pyx_INCREF(__pyx_v_this);

#line 807 "re2.pyx"
  __pyx_r = __pyx_v_this;

#line 807 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":804
 *         self.index = self.index + len(ch)
 *         self.next = ch
 *     def get(self):             # <<<<<<<<<<<<<<
 *         this = self.next
 *         self.__next()
 */

#line 804 "re2.pyx"


#line 804 "re2.pyx"
  /* function exit code */

#line 804 "re2.pyx"
  __pyx_L1_error:;

#line 804 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 804 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 804 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 804 "re2.pyx"
  __Pyx_AddTraceback("re2.Tokenizer.get", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 804 "re2.pyx"
  __pyx_r = NULL;

#line 804 "re2.pyx"
  __pyx_L0:;

#line 804 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_this);

#line 804 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 804 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 804 "re2.pyx"
  return __pyx_r;

#line 804 "re2.pyx"
}

/* "re2.pyx":809
 *         return this
 * 
 * def prepare_pattern(pattern, int flags):             # <<<<<<<<<<<<<<
 *     source = Tokenizer(pattern)
 *     new_pattern = []
 */

#line 809 "re2.pyx"


#line 809 "re2.pyx"
/* Python wrapper */

#line 809 "re2.pyx"
static PyObject *__pyx_pw_3re2_5prepare_pattern(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 809 "re2.pyx"
static char __pyx_doc_3re2_4prepare_pattern[] = "File: re2.pyx (starting at line 809)";
static PyMethodDef __pyx_mdef_3re2_5prepare_pattern = 
#line 809 "re2.pyx"
{"prepare_pattern", (PyCFunction)__pyx_pw_3re2_5prepare_pattern, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_4prepare_pattern};

#line 809 "re2.pyx"
static PyObject *__pyx_pw_3re2_5prepare_pattern(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0
#line 809 "re2.pyx"
;
  int __pyx_v_flags
#line 809 "re2.pyx"
;

#line 809 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 809 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 809 "re2.pyx"
  __Pyx_RefNannySetupContext("prepare_pattern (wrapper)", 0);

#line 809 "re2.pyx"
  {

#line 809 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_flags,0};

#line 809 "re2.pyx"
    PyObject* values[2] = {0,0};

#line 809 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 809 "re2.pyx"
      Py_ssize_t kw_args;

#line 809 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 809 "re2.pyx"
      switch (pos_args) {
        case  2: 
#line 809 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 809 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 809 "re2.pyx"
        case  0: break;
        default: 
#line 809 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 809 "re2.pyx"
      }

#line 809 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 809 "re2.pyx"
      switch (pos_args) {

#line 809 "re2.pyx"
        case  0:

#line 809 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else 
#line 809 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 809 "re2.pyx"
        case  1:

#line 809 "re2.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;

#line 809 "re2.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("prepare_pattern", 1, 2, 2, 1); 
#line 809 "re2.pyx"
__PYX_ERR(0, 809, __pyx_L3_error)

#line 809 "re2.pyx"
        }

#line 809 "re2.pyx"
      }

#line 809 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 809 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prepare_pattern") < 0)) __PYX_ERR(0, 809, __pyx_L3_error)

#line 809 "re2.pyx"
      }

#line 809 "re2.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 809 "re2.pyx"
      goto __pyx_L5_argtuple_error;

#line 809 "re2.pyx"
    } else {

#line 809 "re2.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 809 "re2.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 809 "re2.pyx"
    }

#line 809 "re2.pyx"
    __pyx_v_pattern = values[0];

#line 809 "re2.pyx"
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 809, __pyx_L3_error)

#line 809 "re2.pyx"
  }

#line 809 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 809 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prepare_pattern", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 809 "re2.pyx"
__PYX_ERR(0, 809, __pyx_L3_error)

#line 809 "re2.pyx"
  __pyx_L3_error:;

#line 809 "re2.pyx"
  __Pyx_AddTraceback("re2.prepare_pattern", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 809 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 809 "re2.pyx"
  return NULL;

#line 809 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 809 "re2.pyx"
__pyx_pf_3re2_4prepare_pattern(__pyx_self, __pyx_v_pattern, __pyx_v_flags);

#line 809 "re2.pyx"


#line 809 "re2.pyx"
  /* function exit code */

#line 809 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 809 "re2.pyx"
  return __pyx_r;

#line 809 "re2.pyx"
}

#line 809 "re2.pyx"


#line 809 "re2.pyx"
static PyObject *__pyx_pf_3re2_4prepare_pattern(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, int __pyx_v_flags) {
  PyObject *__pyx_v_source = NULL
#line 809 "re2.pyx"
;
  PyObject *__pyx_v_new_pattern = NULL
#line 809 "re2.pyx"
;
  PyObject *__pyx_v_strflags = 0
#line 809 "re2.pyx"
;
  PyObject *__pyx_v_this = NULL
#line 809 "re2.pyx"
;

#line 809 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 809 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 809 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 809 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 809 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 809 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 809 "re2.pyx"
  int __pyx_t_5;

#line 809 "re2.pyx"
  int __pyx_t_6;

#line 809 "re2.pyx"
  int __pyx_t_7;

#line 809 "re2.pyx"
  int __pyx_t_8;

#line 809 "re2.pyx"
  __Pyx_RefNannySetupContext("prepare_pattern", 0);

  /* "re2.pyx":810
 * 
 * def prepare_pattern(pattern, int flags):
 *     source = Tokenizer(pattern)             # <<<<<<<<<<<<<<
 *     new_pattern = []
 * 
 */

#line 810 "re2.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Tokenizer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 810, __pyx_L1_error)

#line 810 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 810 "re2.pyx"
  __pyx_t_3 = NULL;

#line 810 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 810 "re2.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 810 "re2.pyx"
    if (likely(__pyx_t_3)) {

#line 810 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 810 "re2.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 810 "re2.pyx"
      __Pyx_INCREF(function);

#line 810 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 810 "re2.pyx"
    }

#line 810 "re2.pyx"
  }

#line 810 "re2.pyx"
  if (!__pyx_t_3) {

#line 810 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_pattern); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 810, __pyx_L1_error)

#line 810 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 810 "re2.pyx"
  } else {

#line 810 "re2.pyx"
    #if CYTHON_FAST_PYCALL

#line 810 "re2.pyx"
    if (PyFunction_Check(__pyx_t_2)) {

#line 810 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_pattern};

#line 810 "re2.pyx"
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 810, __pyx_L1_error)

#line 810 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 810 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 810 "re2.pyx"
    } else

#line 810 "re2.pyx"
    #endif

#line 810 "re2.pyx"
    #if CYTHON_FAST_PYCCALL

#line 810 "re2.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {

#line 810 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_pattern};

#line 810 "re2.pyx"
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 810, __pyx_L1_error)

#line 810 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 810 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 810 "re2.pyx"
    } else

#line 810 "re2.pyx"
    #endif

#line 810 "re2.pyx"
    {

#line 810 "re2.pyx"
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 810, __pyx_L1_error)

#line 810 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 810 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;

#line 810 "re2.pyx"
      __Pyx_INCREF(__pyx_v_pattern);

#line 810 "re2.pyx"
      __Pyx_GIVEREF(__pyx_v_pattern);

#line 810 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_pattern);

#line 810 "re2.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 810, __pyx_L1_error)

#line 810 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 810 "re2.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 810 "re2.pyx"
    }

#line 810 "re2.pyx"
  }

#line 810 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 810 "re2.pyx"
  __pyx_v_source = __pyx_t_1;

#line 810 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":811
 * def prepare_pattern(pattern, int flags):
 *     source = Tokenizer(pattern)
 *     new_pattern = []             # <<<<<<<<<<<<<<
 * 
 *     cdef str strflags = ''
 */

#line 811 "re2.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 811, __pyx_L1_error)

#line 811 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 811 "re2.pyx"
  __pyx_v_new_pattern = ((PyObject*)__pyx_t_1);

#line 811 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":813
 *     new_pattern = []
 * 
 *     cdef str strflags = ''             # <<<<<<<<<<<<<<
 *     if flags & _S:
 *         strflags += 's'
 */

#line 813 "re2.pyx"
  __Pyx_INCREF(__pyx_kp_s__15);

#line 813 "re2.pyx"
  __pyx_v_strflags = __pyx_kp_s__15;

  /* "re2.pyx":814
 * 
 *     cdef str strflags = ''
 *     if flags & _S:             # <<<<<<<<<<<<<<
 *         strflags += 's'
 *     if flags & _M:
 */

#line 814 "re2.pyx"
  __pyx_t_5 = ((__pyx_v_flags & __pyx_v_3re2__S) != 0);

#line 814 "re2.pyx"
  if (__pyx_t_5) {

    /* "re2.pyx":815
 *     cdef str strflags = ''
 *     if flags & _S:
 *         strflags += 's'             # <<<<<<<<<<<<<<
 *     if flags & _M:
 *         strflags += 'm'
 */

#line 815 "re2.pyx"
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_strflags, __pyx_n_s_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 815, __pyx_L1_error)

#line 815 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 815 "re2.pyx"
    __Pyx_DECREF_SET(__pyx_v_strflags, ((PyObject*)__pyx_t_1));

#line 815 "re2.pyx"
    __pyx_t_1 = 0;

    /* "re2.pyx":814
 * 
 *     cdef str strflags = ''
 *     if flags & _S:             # <<<<<<<<<<<<<<
 *         strflags += 's'
 *     if flags & _M:
 */

#line 814 "re2.pyx"
  }

  /* "re2.pyx":816
 *     if flags & _S:
 *         strflags += 's'
 *     if flags & _M:             # <<<<<<<<<<<<<<
 *         strflags += 'm'
 * 
 */

#line 816 "re2.pyx"
  __pyx_t_5 = ((__pyx_v_flags & __pyx_v_3re2__M) != 0);

#line 816 "re2.pyx"
  if (__pyx_t_5) {

    /* "re2.pyx":817
 *         strflags += 's'
 *     if flags & _M:
 *         strflags += 'm'             # <<<<<<<<<<<<<<
 * 
 *     if strflags:
 */

#line 817 "re2.pyx"
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_strflags, __pyx_n_s_m); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 817, __pyx_L1_error)

#line 817 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 817 "re2.pyx"
    __Pyx_DECREF_SET(__pyx_v_strflags, ((PyObject*)__pyx_t_1));

#line 817 "re2.pyx"
    __pyx_t_1 = 0;

    /* "re2.pyx":816
 *     if flags & _S:
 *         strflags += 's'
 *     if flags & _M:             # <<<<<<<<<<<<<<
 *         strflags += 'm'
 * 
 */

#line 816 "re2.pyx"
  }

  /* "re2.pyx":819
 *         strflags += 'm'
 * 
 *     if strflags:             # <<<<<<<<<<<<<<
 *         new_pattern.append('(?' + strflags + ')')
 * 
 */

#line 819 "re2.pyx"
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_strflags); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 819, __pyx_L1_error)

#line 819 "re2.pyx"
  if (__pyx_t_5) {

    /* "re2.pyx":820
 * 
 *     if strflags:
 *         new_pattern.append('(?' + strflags + ')')             # <<<<<<<<<<<<<<
 * 
 *     while 1:
 */

#line 820 "re2.pyx"
    __pyx_t_1 = PyNumber_Add(__pyx_kp_s__27, __pyx_v_strflags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 820, __pyx_L1_error)

#line 820 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 820 "re2.pyx"
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__28); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 820, __pyx_L1_error)

#line 820 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 820 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 820 "re2.pyx"
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_t_2); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 820, __pyx_L1_error)

#line 820 "re2.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "re2.pyx":819
 *         strflags += 'm'
 * 
 *     if strflags:             # <<<<<<<<<<<<<<
 *         new_pattern.append('(?' + strflags + ')')
 * 
 */

#line 819 "re2.pyx"
  }

  /* "re2.pyx":822
 *         new_pattern.append('(?' + strflags + ')')
 * 
 *     while 1:             # <<<<<<<<<<<<<<
 *         this = source.get()
 *         if this is None:
 */

#line 822 "re2.pyx"
  while (1) {

    /* "re2.pyx":823
 * 
 *     while 1:
 *         this = source.get()             # <<<<<<<<<<<<<<
 *         if this is None:
 *             break
 */

#line 823 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_source, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 823, __pyx_L1_error)

#line 823 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 823 "re2.pyx"
    __pyx_t_4 = NULL;

#line 823 "re2.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {

#line 823 "re2.pyx"
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);

#line 823 "re2.pyx"
      if (likely(__pyx_t_4)) {

#line 823 "re2.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 823 "re2.pyx"
        __Pyx_INCREF(__pyx_t_4);

#line 823 "re2.pyx"
        __Pyx_INCREF(function);

#line 823 "re2.pyx"
        __Pyx_DECREF_SET(__pyx_t_1, function);

#line 823 "re2.pyx"
      }

#line 823 "re2.pyx"
    }

#line 823 "re2.pyx"
    if (__pyx_t_4) {

#line 823 "re2.pyx"
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 823, __pyx_L1_error)

#line 823 "re2.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 823 "re2.pyx"
    } else {

#line 823 "re2.pyx"
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 823, __pyx_L1_error)

#line 823 "re2.pyx"
    }

#line 823 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 823 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 823 "re2.pyx"
    __Pyx_XDECREF_SET(__pyx_v_this, __pyx_t_2);

#line 823 "re2.pyx"
    __pyx_t_2 = 0;

    /* "re2.pyx":824
 *     while 1:
 *         this = source.get()
 *         if this is None:             # <<<<<<<<<<<<<<
 *             break
 *         if flags & _X:
 */

#line 824 "re2.pyx"
    __pyx_t_5 = (__pyx_v_this == Py_None);

#line 824 "re2.pyx"
    __pyx_t_7 = (__pyx_t_5 != 0);

#line 824 "re2.pyx"
    if (__pyx_t_7) {

      /* "re2.pyx":825
 *         this = source.get()
 *         if this is None:
 *             break             # <<<<<<<<<<<<<<
 *         if flags & _X:
 *             if this in WHITESPACE:
 */

#line 825 "re2.pyx"
      goto __pyx_L7_break;

      /* "re2.pyx":824
 *     while 1:
 *         this = source.get()
 *         if this is None:             # <<<<<<<<<<<<<<
 *             break
 *         if flags & _X:
 */

#line 824 "re2.pyx"
    }

    /* "re2.pyx":826
 *         if this is None:
 *             break
 *         if flags & _X:             # <<<<<<<<<<<<<<
 *             if this in WHITESPACE:
 *                 continue
 */

#line 826 "re2.pyx"
    __pyx_t_7 = ((__pyx_v_flags & __pyx_v_3re2__X) != 0);

#line 826 "re2.pyx"
    if (__pyx_t_7) {

      /* "re2.pyx":827
 *             break
 *         if flags & _X:
 *             if this in WHITESPACE:             # <<<<<<<<<<<<<<
 *                 continue
 *             if this == "#":
 */

#line 827 "re2.pyx"
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_WHITESPACE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 827, __pyx_L1_error)

#line 827 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 827 "re2.pyx"
      __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_this, __pyx_t_2, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 827, __pyx_L1_error)

#line 827 "re2.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 827 "re2.pyx"
      __pyx_t_5 = (__pyx_t_7 != 0);

#line 827 "re2.pyx"
      if (__pyx_t_5) {

        /* "re2.pyx":828
 *         if flags & _X:
 *             if this in WHITESPACE:
 *                 continue             # <<<<<<<<<<<<<<
 *             if this == "#":
 *                 while 1:
 */

#line 828 "re2.pyx"
        goto __pyx_L6_continue;

        /* "re2.pyx":827
 *             break
 *         if flags & _X:
 *             if this in WHITESPACE:             # <<<<<<<<<<<<<<
 *                 continue
 *             if this == "#":
 */

#line 827 "re2.pyx"
      }

      /* "re2.pyx":829
 *             if this in WHITESPACE:
 *                 continue
 *             if this == "#":             # <<<<<<<<<<<<<<
 *                 while 1:
 *                     this = source.get()
 */

#line 829 "re2.pyx"
      __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_this, __pyx_kp_s__29, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 829, __pyx_L1_error)

#line 829 "re2.pyx"
      if (__pyx_t_5) {

        /* "re2.pyx":830
 *                 continue
 *             if this == "#":
 *                 while 1:             # <<<<<<<<<<<<<<
 *                     this = source.get()
 *                     if this in (None, "\n"):
 */

#line 830 "re2.pyx"
        while (1) {

          /* "re2.pyx":831
 *             if this == "#":
 *                 while 1:
 *                     this = source.get()             # <<<<<<<<<<<<<<
 *                     if this in (None, "\n"):
 *                         break
 */

#line 831 "re2.pyx"
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_source, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 831, __pyx_L1_error)

#line 831 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 831 "re2.pyx"
          __pyx_t_4 = NULL;

#line 831 "re2.pyx"
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {

#line 831 "re2.pyx"
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);

#line 831 "re2.pyx"
            if (likely(__pyx_t_4)) {

#line 831 "re2.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 831 "re2.pyx"
              __Pyx_INCREF(__pyx_t_4);

#line 831 "re2.pyx"
              __Pyx_INCREF(function);

#line 831 "re2.pyx"
              __Pyx_DECREF_SET(__pyx_t_1, function);

#line 831 "re2.pyx"
            }

#line 831 "re2.pyx"
          }

#line 831 "re2.pyx"
          if (__pyx_t_4) {

#line 831 "re2.pyx"
            __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 831, __pyx_L1_error)

#line 831 "re2.pyx"
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 831 "re2.pyx"
          } else {

#line 831 "re2.pyx"
            __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 831, __pyx_L1_error)

#line 831 "re2.pyx"
          }

#line 831 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 831 "re2.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 831 "re2.pyx"
          __Pyx_DECREF_SET(__pyx_v_this, __pyx_t_2);

#line 831 "re2.pyx"
          __pyx_t_2 = 0;

          /* "re2.pyx":832
 *                 while 1:
 *                     this = source.get()
 *                     if this in (None, "\n"):             # <<<<<<<<<<<<<<
 *                         break
 *                 continue
 */

#line 832 "re2.pyx"
          __Pyx_INCREF(__pyx_v_this);

#line 832 "re2.pyx"
          __pyx_t_2 = __pyx_v_this;

#line 832 "re2.pyx"
          __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 832, __pyx_L1_error)

#line 832 "re2.pyx"
          __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 832, __pyx_L1_error)

#line 832 "re2.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 832 "re2.pyx"
          if (!__pyx_t_7) {

#line 832 "re2.pyx"
          } else {

#line 832 "re2.pyx"
            __pyx_t_5 = __pyx_t_7;

#line 832 "re2.pyx"
            goto __pyx_L15_bool_binop_done;

#line 832 "re2.pyx"
          }

#line 832 "re2.pyx"
          __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s__19, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 832, __pyx_L1_error)

#line 832 "re2.pyx"
          __pyx_t_5 = __pyx_t_7;

#line 832 "re2.pyx"
          __pyx_L15_bool_binop_done:;

#line 832 "re2.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 832 "re2.pyx"
          __pyx_t_7 = (__pyx_t_5 != 0);

#line 832 "re2.pyx"
          if (__pyx_t_7) {

            /* "re2.pyx":833
 *                     this = source.get()
 *                     if this in (None, "\n"):
 *                         break             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */

#line 833 "re2.pyx"
            goto __pyx_L13_break;

            /* "re2.pyx":832
 *                 while 1:
 *                     this = source.get()
 *                     if this in (None, "\n"):             # <<<<<<<<<<<<<<
 *                         break
 *                 continue
 */

#line 832 "re2.pyx"
          }

#line 832 "re2.pyx"
        }

#line 832 "re2.pyx"
        __pyx_L13_break:;

        /* "re2.pyx":834
 *                     if this in (None, "\n"):
 *                         break
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *         if this[0] not in '[\\':
 */

#line 834 "re2.pyx"
        goto __pyx_L6_continue;

        /* "re2.pyx":829
 *             if this in WHITESPACE:
 *                 continue
 *             if this == "#":             # <<<<<<<<<<<<<<
 *                 while 1:
 *                     this = source.get()
 */

#line 829 "re2.pyx"
      }

      /* "re2.pyx":826
 *         if this is None:
 *             break
 *         if flags & _X:             # <<<<<<<<<<<<<<
 *             if this in WHITESPACE:
 *                 continue
 */

#line 826 "re2.pyx"
    }

    /* "re2.pyx":836
 *                 continue
 * 
 *         if this[0] not in '[\\':             # <<<<<<<<<<<<<<
 *             new_pattern.append(this)
 *             continue
 */

#line 836 "re2.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_this, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 836, __pyx_L1_error)

#line 836 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 836 "re2.pyx"
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_kp_s__30, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 836, __pyx_L1_error)

#line 836 "re2.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 836 "re2.pyx"
    __pyx_t_5 = (__pyx_t_7 != 0);

#line 836 "re2.pyx"
    if (__pyx_t_5) {

      /* "re2.pyx":837
 * 
 *         if this[0] not in '[\\':
 *             new_pattern.append(this)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */

#line 837 "re2.pyx"
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 837, __pyx_L1_error)

      /* "re2.pyx":838
 *         if this[0] not in '[\\':
 *             new_pattern.append(this)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         elif this == '[':
 */

#line 838 "re2.pyx"
      goto __pyx_L6_continue;

      /* "re2.pyx":836
 *                 continue
 * 
 *         if this[0] not in '[\\':             # <<<<<<<<<<<<<<
 *             new_pattern.append(this)
 *             continue
 */

#line 836 "re2.pyx"
    }

    /* "re2.pyx":840
 *             continue
 * 
 *         elif this == '[':             # <<<<<<<<<<<<<<
 *             new_pattern.append(this)
 *             while 1:
 */

#line 840 "re2.pyx"
    __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_this, __pyx_kp_s__31, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 840, __pyx_L1_error)

#line 840 "re2.pyx"
    if (__pyx_t_5) {

      /* "re2.pyx":841
 * 
 *         elif this == '[':
 *             new_pattern.append(this)             # <<<<<<<<<<<<<<
 *             while 1:
 *                 this = source.get()
 */

#line 841 "re2.pyx"
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 841, __pyx_L1_error)

      /* "re2.pyx":842
 *         elif this == '[':
 *             new_pattern.append(this)
 *             while 1:             # <<<<<<<<<<<<<<
 *                 this = source.get()
 *                 if this is None:
 */

#line 842 "re2.pyx"
      while (1) {

        /* "re2.pyx":843
 *             new_pattern.append(this)
 *             while 1:
 *                 this = source.get()             # <<<<<<<<<<<<<<
 *                 if this is None:
 *                     raise RegexError, "unexpected end of regular expression"
 */

#line 843 "re2.pyx"
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_source, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)

#line 843 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 843 "re2.pyx"
        __pyx_t_4 = NULL;

#line 843 "re2.pyx"
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {

#line 843 "re2.pyx"
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);

#line 843 "re2.pyx"
          if (likely(__pyx_t_4)) {

#line 843 "re2.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 843 "re2.pyx"
            __Pyx_INCREF(__pyx_t_4);

#line 843 "re2.pyx"
            __Pyx_INCREF(function);

#line 843 "re2.pyx"
            __Pyx_DECREF_SET(__pyx_t_1, function);

#line 843 "re2.pyx"
          }

#line 843 "re2.pyx"
        }

#line 843 "re2.pyx"
        if (__pyx_t_4) {

#line 843 "re2.pyx"
          __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 843, __pyx_L1_error)

#line 843 "re2.pyx"
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 843 "re2.pyx"
        } else {

#line 843 "re2.pyx"
          __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 843, __pyx_L1_error)

#line 843 "re2.pyx"
        }

#line 843 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 843 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 843 "re2.pyx"
        __Pyx_DECREF_SET(__pyx_v_this, __pyx_t_2);

#line 843 "re2.pyx"
        __pyx_t_2 = 0;

        /* "re2.pyx":844
 *             while 1:
 *                 this = source.get()
 *                 if this is None:             # <<<<<<<<<<<<<<
 *                     raise RegexError, "unexpected end of regular expression"
 *                 elif this == ']':
 */

#line 844 "re2.pyx"
        __pyx_t_5 = (__pyx_v_this == Py_None);

#line 844 "re2.pyx"
        __pyx_t_7 = (__pyx_t_5 != 0);

#line 844 "re2.pyx"
        if (__pyx_t_7) {

          /* "re2.pyx":845
 *                 this = source.get()
 *                 if this is None:
 *                     raise RegexError, "unexpected end of regular expression"             # <<<<<<<<<<<<<<
 *                 elif this == ']':
 *                     new_pattern.append(this)
 */

#line 845 "re2.pyx"
          __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_RegexError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 845, __pyx_L1_error)

#line 845 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 845 "re2.pyx"
          __Pyx_Raise(__pyx_t_2, __pyx_kp_s_unexpected_end_of_regular_expres, 0, 0);

#line 845 "re2.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 845 "re2.pyx"
          __PYX_ERR(0, 845, __pyx_L1_error)

          /* "re2.pyx":844
 *             while 1:
 *                 this = source.get()
 *                 if this is None:             # <<<<<<<<<<<<<<
 *                     raise RegexError, "unexpected end of regular expression"
 *                 elif this == ']':
 */

#line 844 "re2.pyx"
        }

        /* "re2.pyx":846
 *                 if this is None:
 *                     raise RegexError, "unexpected end of regular expression"
 *                 elif this == ']':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(this)
 *                     break
 */

#line 846 "re2.pyx"
        __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_this, __pyx_kp_s__32, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 846, __pyx_L1_error)

#line 846 "re2.pyx"
        if (__pyx_t_7) {

          /* "re2.pyx":847
 *                     raise RegexError, "unexpected end of regular expression"
 *                 elif this == ']':
 *                     new_pattern.append(this)             # <<<<<<<<<<<<<<
 *                     break
 *                 elif this[0] == '\\':
 */

#line 847 "re2.pyx"
          __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 847, __pyx_L1_error)

          /* "re2.pyx":848
 *                 elif this == ']':
 *                     new_pattern.append(this)
 *                     break             # <<<<<<<<<<<<<<
 *                 elif this[0] == '\\':
 *                     if flags & _U:
 */

#line 848 "re2.pyx"
          goto __pyx_L19_break;

          /* "re2.pyx":846
 *                 if this is None:
 *                     raise RegexError, "unexpected end of regular expression"
 *                 elif this == ']':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(this)
 *                     break
 */

#line 846 "re2.pyx"
        }

        /* "re2.pyx":849
 *                     new_pattern.append(this)
 *                     break
 *                 elif this[0] == '\\':             # <<<<<<<<<<<<<<
 *                     if flags & _U:
 *                         if this[1] == 'd':
 */

#line 849 "re2.pyx"
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_this, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 849, __pyx_L1_error)

#line 849 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 849 "re2.pyx"
        __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s__5, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 849, __pyx_L1_error)

#line 849 "re2.pyx"
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 849 "re2.pyx"
        if (__pyx_t_7) {

          /* "re2.pyx":850
 *                     break
 *                 elif this[0] == '\\':
 *                     if flags & _U:             # <<<<<<<<<<<<<<
 *                         if this[1] == 'd':
 *                             new_pattern.append(r'\p{Nd}')
 */

#line 850 "re2.pyx"
          __pyx_t_7 = ((__pyx_v_flags & __pyx_v_3re2__U) != 0);

#line 850 "re2.pyx"
          if (__pyx_t_7) {

            /* "re2.pyx":851
 *                 elif this[0] == '\\':
 *                     if flags & _U:
 *                         if this[1] == 'd':             # <<<<<<<<<<<<<<
 *                             new_pattern.append(r'\p{Nd}')
 *                         elif this[1] == 'w':
 */

#line 851 "re2.pyx"
            __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_this, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 851, __pyx_L1_error)

#line 851 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_2);

#line 851 "re2.pyx"
            __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_d, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 851, __pyx_L1_error)

#line 851 "re2.pyx"
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 851 "re2.pyx"
            if (__pyx_t_7) {

              /* "re2.pyx":852
 *                     if flags & _U:
 *                         if this[1] == 'd':
 *                             new_pattern.append(r'\p{Nd}')             # <<<<<<<<<<<<<<
 *                         elif this[1] == 'w':
 *                             new_pattern.append(r'_\p{L}\p{Nd}')
 */

#line 852 "re2.pyx"
              __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_kp_s_p_Nd); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 852, __pyx_L1_error)

              /* "re2.pyx":851
 *                 elif this[0] == '\\':
 *                     if flags & _U:
 *                         if this[1] == 'd':             # <<<<<<<<<<<<<<
 *                             new_pattern.append(r'\p{Nd}')
 *                         elif this[1] == 'w':
 */

#line 851 "re2.pyx"
              goto __pyx_L22;

#line 851 "re2.pyx"
            }

            /* "re2.pyx":853
 *                         if this[1] == 'd':
 *                             new_pattern.append(r'\p{Nd}')
 *                         elif this[1] == 'w':             # <<<<<<<<<<<<<<
 *                             new_pattern.append(r'_\p{L}\p{Nd}')
 *                         elif this[1] == 's':
 */

#line 853 "re2.pyx"
            __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_this, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 853, __pyx_L1_error)

#line 853 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_2);

#line 853 "re2.pyx"
            __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_w, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 853, __pyx_L1_error)

#line 853 "re2.pyx"
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 853 "re2.pyx"
            if (__pyx_t_7) {

              /* "re2.pyx":854
 *                             new_pattern.append(r'\p{Nd}')
 *                         elif this[1] == 'w':
 *                             new_pattern.append(r'_\p{L}\p{Nd}')             # <<<<<<<<<<<<<<
 *                         elif this[1] == 's':
 *                             new_pattern.append(r'\s\p{Z}')
 */

#line 854 "re2.pyx"
              __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_kp_s_p_L_p_Nd); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 854, __pyx_L1_error)

              /* "re2.pyx":853
 *                         if this[1] == 'd':
 *                             new_pattern.append(r'\p{Nd}')
 *                         elif this[1] == 'w':             # <<<<<<<<<<<<<<
 *                             new_pattern.append(r'_\p{L}\p{Nd}')
 *                         elif this[1] == 's':
 */

#line 853 "re2.pyx"
              goto __pyx_L22;

#line 853 "re2.pyx"
            }

            /* "re2.pyx":855
 *                         elif this[1] == 'w':
 *                             new_pattern.append(r'_\p{L}\p{Nd}')
 *                         elif this[1] == 's':             # <<<<<<<<<<<<<<
 *                             new_pattern.append(r'\s\p{Z}')
 *                         elif this[1] == 'D':
 */

#line 855 "re2.pyx"
            __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_this, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 855, __pyx_L1_error)

#line 855 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_2);

#line 855 "re2.pyx"
            __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_s, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 855, __pyx_L1_error)

#line 855 "re2.pyx"
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 855 "re2.pyx"
            if (__pyx_t_7) {

              /* "re2.pyx":856
 *                             new_pattern.append(r'_\p{L}\p{Nd}')
 *                         elif this[1] == 's':
 *                             new_pattern.append(r'\s\p{Z}')             # <<<<<<<<<<<<<<
 *                         elif this[1] == 'D':
 *                             new_pattern.append(r'\P{Nd}')
 */

#line 856 "re2.pyx"
              __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_kp_s_s_p_Z); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 856, __pyx_L1_error)

              /* "re2.pyx":855
 *                         elif this[1] == 'w':
 *                             new_pattern.append(r'_\p{L}\p{Nd}')
 *                         elif this[1] == 's':             # <<<<<<<<<<<<<<
 *                             new_pattern.append(r'\s\p{Z}')
 *                         elif this[1] == 'D':
 */

#line 855 "re2.pyx"
              goto __pyx_L22;

#line 855 "re2.pyx"
            }

            /* "re2.pyx":857
 *                         elif this[1] == 's':
 *                             new_pattern.append(r'\s\p{Z}')
 *                         elif this[1] == 'D':             # <<<<<<<<<<<<<<
 *                             new_pattern.append(r'\P{Nd}')
 *                         elif this[1] == 'W':
 */

#line 857 "re2.pyx"
            __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_this, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 857, __pyx_L1_error)

#line 857 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_2);

#line 857 "re2.pyx"
            __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_D, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 857, __pyx_L1_error)

#line 857 "re2.pyx"
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 857 "re2.pyx"
            if (__pyx_t_7) {

              /* "re2.pyx":858
 *                             new_pattern.append(r'\s\p{Z}')
 *                         elif this[1] == 'D':
 *                             new_pattern.append(r'\P{Nd}')             # <<<<<<<<<<<<<<
 *                         elif this[1] == 'W':
 *                             # Since \w and \s are made out of several character groups,
 */

#line 858 "re2.pyx"
              __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_kp_s_P_Nd); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 858, __pyx_L1_error)

              /* "re2.pyx":857
 *                         elif this[1] == 's':
 *                             new_pattern.append(r'\s\p{Z}')
 *                         elif this[1] == 'D':             # <<<<<<<<<<<<<<
 *                             new_pattern.append(r'\P{Nd}')
 *                         elif this[1] == 'W':
 */

#line 857 "re2.pyx"
              goto __pyx_L22;

#line 857 "re2.pyx"
            }

            /* "re2.pyx":859
 *                         elif this[1] == 'D':
 *                             new_pattern.append(r'\P{Nd}')
 *                         elif this[1] == 'W':             # <<<<<<<<<<<<<<
 *                             # Since \w and \s are made out of several character groups,
 *                             # I don't see a way to convert their complements into a group
 */

#line 859 "re2.pyx"
            __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_this, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 859, __pyx_L1_error)

#line 859 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_2);

#line 859 "re2.pyx"
            __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_W, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 859, __pyx_L1_error)

#line 859 "re2.pyx"
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 859 "re2.pyx"
            if (__pyx_t_7) {

              /* "re2.pyx":864
 *                             # without rewriting the whole expression, which seems too complicated.
 * 
 *                             raise CharClassProblemException()             # <<<<<<<<<<<<<<
 *                         elif this[1] == 'S':
 *                             raise CharClassProblemException()
 */

#line 864 "re2.pyx"
              __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_CharClassProblemException); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)

#line 864 "re2.pyx"
              __Pyx_GOTREF(__pyx_t_1);

#line 864 "re2.pyx"
              __pyx_t_4 = NULL;

#line 864 "re2.pyx"
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {

#line 864 "re2.pyx"
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);

#line 864 "re2.pyx"
                if (likely(__pyx_t_4)) {

#line 864 "re2.pyx"
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 864 "re2.pyx"
                  __Pyx_INCREF(__pyx_t_4);

#line 864 "re2.pyx"
                  __Pyx_INCREF(function);

#line 864 "re2.pyx"
                  __Pyx_DECREF_SET(__pyx_t_1, function);

#line 864 "re2.pyx"
                }

#line 864 "re2.pyx"
              }

#line 864 "re2.pyx"
              if (__pyx_t_4) {

#line 864 "re2.pyx"
                __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 864, __pyx_L1_error)

#line 864 "re2.pyx"
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 864 "re2.pyx"
              } else {

#line 864 "re2.pyx"
                __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 864, __pyx_L1_error)

#line 864 "re2.pyx"
              }

#line 864 "re2.pyx"
              __Pyx_GOTREF(__pyx_t_2);

#line 864 "re2.pyx"
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 864 "re2.pyx"
              __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 864 "re2.pyx"
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 864 "re2.pyx"
              __PYX_ERR(0, 864, __pyx_L1_error)

              /* "re2.pyx":859
 *                         elif this[1] == 'D':
 *                             new_pattern.append(r'\P{Nd}')
 *                         elif this[1] == 'W':             # <<<<<<<<<<<<<<
 *                             # Since \w and \s are made out of several character groups,
 *                             # I don't see a way to convert their complements into a group
 */

#line 859 "re2.pyx"
            }

            /* "re2.pyx":865
 * 
 *                             raise CharClassProblemException()
 *                         elif this[1] == 'S':             # <<<<<<<<<<<<<<
 *                             raise CharClassProblemException()
 *                         else:
 */

#line 865 "re2.pyx"
            __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_this, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 865, __pyx_L1_error)

#line 865 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_2);

#line 865 "re2.pyx"
            __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_S, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 865, __pyx_L1_error)

#line 865 "re2.pyx"
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 865 "re2.pyx"
            if (__pyx_t_7) {

              /* "re2.pyx":866
 *                             raise CharClassProblemException()
 *                         elif this[1] == 'S':
 *                             raise CharClassProblemException()             # <<<<<<<<<<<<<<
 *                         else:
 *                             new_pattern.append(this)
 */

#line 866 "re2.pyx"
              __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_CharClassProblemException); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)

#line 866 "re2.pyx"
              __Pyx_GOTREF(__pyx_t_1);

#line 866 "re2.pyx"
              __pyx_t_4 = NULL;

#line 866 "re2.pyx"
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {

#line 866 "re2.pyx"
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);

#line 866 "re2.pyx"
                if (likely(__pyx_t_4)) {

#line 866 "re2.pyx"
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 866 "re2.pyx"
                  __Pyx_INCREF(__pyx_t_4);

#line 866 "re2.pyx"
                  __Pyx_INCREF(function);

#line 866 "re2.pyx"
                  __Pyx_DECREF_SET(__pyx_t_1, function);

#line 866 "re2.pyx"
                }

#line 866 "re2.pyx"
              }

#line 866 "re2.pyx"
              if (__pyx_t_4) {

#line 866 "re2.pyx"
                __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 866, __pyx_L1_error)

#line 866 "re2.pyx"
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 866 "re2.pyx"
              } else {

#line 866 "re2.pyx"
                __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 866, __pyx_L1_error)

#line 866 "re2.pyx"
              }

#line 866 "re2.pyx"
              __Pyx_GOTREF(__pyx_t_2);

#line 866 "re2.pyx"
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 866 "re2.pyx"
              __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 866 "re2.pyx"
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 866 "re2.pyx"
              __PYX_ERR(0, 866, __pyx_L1_error)

              /* "re2.pyx":865
 * 
 *                             raise CharClassProblemException()
 *                         elif this[1] == 'S':             # <<<<<<<<<<<<<<
 *                             raise CharClassProblemException()
 *                         else:
 */

#line 865 "re2.pyx"
            }

            /* "re2.pyx":868
 *                             raise CharClassProblemException()
 *                         else:
 *                             new_pattern.append(this)             # <<<<<<<<<<<<<<
 *                     else:
 *                         new_pattern.append(this)
 */

#line 868 "re2.pyx"
            /*else*/ {

#line 868 "re2.pyx"
              __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 868, __pyx_L1_error)

#line 868 "re2.pyx"
            }

#line 868 "re2.pyx"
            __pyx_L22:;

            /* "re2.pyx":850
 *                     break
 *                 elif this[0] == '\\':
 *                     if flags & _U:             # <<<<<<<<<<<<<<
 *                         if this[1] == 'd':
 *                             new_pattern.append(r'\p{Nd}')
 */

#line 850 "re2.pyx"
            goto __pyx_L21;

#line 850 "re2.pyx"
          }

          /* "re2.pyx":870
 *                             new_pattern.append(this)
 *                     else:
 *                         new_pattern.append(this)             # <<<<<<<<<<<<<<
 *                 else:
 *                     new_pattern.append(this)
 */

#line 870 "re2.pyx"
          /*else*/ {

#line 870 "re2.pyx"
            __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 870, __pyx_L1_error)

#line 870 "re2.pyx"
          }

#line 870 "re2.pyx"
          __pyx_L21:;

          /* "re2.pyx":849
 *                     new_pattern.append(this)
 *                     break
 *                 elif this[0] == '\\':             # <<<<<<<<<<<<<<
 *                     if flags & _U:
 *                         if this[1] == 'd':
 */

#line 849 "re2.pyx"
          goto __pyx_L20;

#line 849 "re2.pyx"
        }

        /* "re2.pyx":872
 *                         new_pattern.append(this)
 *                 else:
 *                     new_pattern.append(this)             # <<<<<<<<<<<<<<
 *         elif this[0] == '\\':
 *             if this[1] in '89':
 */

#line 872 "re2.pyx"
        /*else*/ {

#line 872 "re2.pyx"
          __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 872, __pyx_L1_error)

#line 872 "re2.pyx"
        }

#line 872 "re2.pyx"
        __pyx_L20:;

#line 872 "re2.pyx"
      }

#line 872 "re2.pyx"
      __pyx_L19_break:;

      /* "re2.pyx":840
 *             continue
 * 
 *         elif this == '[':             # <<<<<<<<<<<<<<
 *             new_pattern.append(this)
 *             while 1:
 */

#line 840 "re2.pyx"
      goto __pyx_L17;

#line 840 "re2.pyx"
    }

    /* "re2.pyx":873
 *                 else:
 *                     new_pattern.append(this)
 *         elif this[0] == '\\':             # <<<<<<<<<<<<<<
 *             if this[1] in '89':
 *                 raise BackreferencesException()
 */

#line 873 "re2.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_this, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 873, __pyx_L1_error)

#line 873 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 873 "re2.pyx"
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_kp_s__5, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 873, __pyx_L1_error)

#line 873 "re2.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 873 "re2.pyx"
    if (__pyx_t_7) {

      /* "re2.pyx":874
 *                     new_pattern.append(this)
 *         elif this[0] == '\\':
 *             if this[1] in '89':             # <<<<<<<<<<<<<<
 *                 raise BackreferencesException()
 *             elif this[1] in '1234567':
 */

#line 874 "re2.pyx"
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_this, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 874, __pyx_L1_error)

#line 874 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 874 "re2.pyx"
      __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_kp_s_89, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 874, __pyx_L1_error)

#line 874 "re2.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 874 "re2.pyx"
      __pyx_t_5 = (__pyx_t_7 != 0);

#line 874 "re2.pyx"
      if (__pyx_t_5) {

        /* "re2.pyx":875
 *         elif this[0] == '\\':
 *             if this[1] in '89':
 *                 raise BackreferencesException()             # <<<<<<<<<<<<<<
 *             elif this[1] in '1234567':
 *                 if source.next and source.next in '1234567':
 */

#line 875 "re2.pyx"
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BackreferencesException); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 875, __pyx_L1_error)

#line 875 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 875 "re2.pyx"
        __pyx_t_4 = NULL;

#line 875 "re2.pyx"
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {

#line 875 "re2.pyx"
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);

#line 875 "re2.pyx"
          if (likely(__pyx_t_4)) {

#line 875 "re2.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 875 "re2.pyx"
            __Pyx_INCREF(__pyx_t_4);

#line 875 "re2.pyx"
            __Pyx_INCREF(function);

#line 875 "re2.pyx"
            __Pyx_DECREF_SET(__pyx_t_1, function);

#line 875 "re2.pyx"
          }

#line 875 "re2.pyx"
        }

#line 875 "re2.pyx"
        if (__pyx_t_4) {

#line 875 "re2.pyx"
          __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 875, __pyx_L1_error)

#line 875 "re2.pyx"
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 875 "re2.pyx"
        } else {

#line 875 "re2.pyx"
          __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 875, __pyx_L1_error)

#line 875 "re2.pyx"
        }

#line 875 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 875 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 875 "re2.pyx"
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 875 "re2.pyx"
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 875 "re2.pyx"
        __PYX_ERR(0, 875, __pyx_L1_error)

        /* "re2.pyx":874
 *                     new_pattern.append(this)
 *         elif this[0] == '\\':
 *             if this[1] in '89':             # <<<<<<<<<<<<<<
 *                 raise BackreferencesException()
 *             elif this[1] in '1234567':
 */

#line 874 "re2.pyx"
      }

      /* "re2.pyx":876
 *             if this[1] in '89':
 *                 raise BackreferencesException()
 *             elif this[1] in '1234567':             # <<<<<<<<<<<<<<
 *                 if source.next and source.next in '1234567':
 *                     this += source.get()
 */

#line 876 "re2.pyx"
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_this, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 876, __pyx_L1_error)

#line 876 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 876 "re2.pyx"
      __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_kp_s_1234567, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 876, __pyx_L1_error)

#line 876 "re2.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 876 "re2.pyx"
      __pyx_t_7 = (__pyx_t_5 != 0);

#line 876 "re2.pyx"
      if (__pyx_t_7) {

        /* "re2.pyx":877
 *                 raise BackreferencesException()
 *             elif this[1] in '1234567':
 *                 if source.next and source.next in '1234567':             # <<<<<<<<<<<<<<
 *                     this += source.get()
 *                     if source.next and source.next in '1234567':
 */

#line 877 "re2.pyx"
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_source, __pyx_n_s_next); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 877, __pyx_L1_error)

#line 877 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 877 "re2.pyx"
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 877, __pyx_L1_error)

#line 877 "re2.pyx"
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 877 "re2.pyx"
        if (__pyx_t_5) {

#line 877 "re2.pyx"
        } else {

#line 877 "re2.pyx"
          __pyx_t_7 = __pyx_t_5;

#line 877 "re2.pyx"
          goto __pyx_L25_bool_binop_done;

#line 877 "re2.pyx"
        }

#line 877 "re2.pyx"
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_source, __pyx_n_s_next); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 877, __pyx_L1_error)

#line 877 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 877 "re2.pyx"
        __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_kp_s_1234567, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 877, __pyx_L1_error)

#line 877 "re2.pyx"
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 877 "re2.pyx"
        __pyx_t_8 = (__pyx_t_5 != 0);

#line 877 "re2.pyx"
        __pyx_t_7 = __pyx_t_8;

#line 877 "re2.pyx"
        __pyx_L25_bool_binop_done:;

#line 877 "re2.pyx"
        if (__pyx_t_7) {

          /* "re2.pyx":878
 *             elif this[1] in '1234567':
 *                 if source.next and source.next in '1234567':
 *                     this += source.get()             # <<<<<<<<<<<<<<
 *                     if source.next and source.next in '1234567':
 *                         # all clear, this is an octal escape
 */

#line 878 "re2.pyx"
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_source, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 878, __pyx_L1_error)

#line 878 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 878 "re2.pyx"
          __pyx_t_4 = NULL;

#line 878 "re2.pyx"
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {

#line 878 "re2.pyx"
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);

#line 878 "re2.pyx"
            if (likely(__pyx_t_4)) {

#line 878 "re2.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 878 "re2.pyx"
              __Pyx_INCREF(__pyx_t_4);

#line 878 "re2.pyx"
              __Pyx_INCREF(function);

#line 878 "re2.pyx"
              __Pyx_DECREF_SET(__pyx_t_1, function);

#line 878 "re2.pyx"
            }

#line 878 "re2.pyx"
          }

#line 878 "re2.pyx"
          if (__pyx_t_4) {

#line 878 "re2.pyx"
            __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 878, __pyx_L1_error)

#line 878 "re2.pyx"
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 878 "re2.pyx"
          } else {

#line 878 "re2.pyx"
            __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 878, __pyx_L1_error)

#line 878 "re2.pyx"
          }

#line 878 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 878 "re2.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 878 "re2.pyx"
          __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_this, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 878, __pyx_L1_error)

#line 878 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 878 "re2.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 878 "re2.pyx"
          __Pyx_DECREF_SET(__pyx_v_this, __pyx_t_1);

#line 878 "re2.pyx"
          __pyx_t_1 = 0;

          /* "re2.pyx":879
 *                 if source.next and source.next in '1234567':
 *                     this += source.get()
 *                     if source.next and source.next in '1234567':             # <<<<<<<<<<<<<<
 *                         # all clear, this is an octal escape
 *                         new_pattern.append(this)
 */

#line 879 "re2.pyx"
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_source, __pyx_n_s_next); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 879, __pyx_L1_error)

#line 879 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 879 "re2.pyx"
          __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 879, __pyx_L1_error)

#line 879 "re2.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 879 "re2.pyx"
          if (__pyx_t_8) {

#line 879 "re2.pyx"
          } else {

#line 879 "re2.pyx"
            __pyx_t_7 = __pyx_t_8;

#line 879 "re2.pyx"
            goto __pyx_L28_bool_binop_done;

#line 879 "re2.pyx"
          }

#line 879 "re2.pyx"
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_source, __pyx_n_s_next); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 879, __pyx_L1_error)

#line 879 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 879 "re2.pyx"
          __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_kp_s_1234567, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 879, __pyx_L1_error)

#line 879 "re2.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 879 "re2.pyx"
          __pyx_t_5 = (__pyx_t_8 != 0);

#line 879 "re2.pyx"
          __pyx_t_7 = __pyx_t_5;

#line 879 "re2.pyx"
          __pyx_L28_bool_binop_done:;

#line 879 "re2.pyx"
          if (__pyx_t_7) {

            /* "re2.pyx":881
 *                     if source.next and source.next in '1234567':
 *                         # all clear, this is an octal escape
 *                         new_pattern.append(this)             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise BackreferencesException()
 */

#line 881 "re2.pyx"
            __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 881, __pyx_L1_error)

            /* "re2.pyx":879
 *                 if source.next and source.next in '1234567':
 *                     this += source.get()
 *                     if source.next and source.next in '1234567':             # <<<<<<<<<<<<<<
 *                         # all clear, this is an octal escape
 *                         new_pattern.append(this)
 */

#line 879 "re2.pyx"
            goto __pyx_L27;

#line 879 "re2.pyx"
          }

          /* "re2.pyx":883
 *                         new_pattern.append(this)
 *                     else:
 *                         raise BackreferencesException()             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise BackreferencesException()
 */

#line 883 "re2.pyx"
          /*else*/ {

#line 883 "re2.pyx"
            __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BackreferencesException); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 883, __pyx_L1_error)

#line 883 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_2);

#line 883 "re2.pyx"
            __pyx_t_4 = NULL;

#line 883 "re2.pyx"
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 883 "re2.pyx"
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);

#line 883 "re2.pyx"
              if (likely(__pyx_t_4)) {

#line 883 "re2.pyx"
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 883 "re2.pyx"
                __Pyx_INCREF(__pyx_t_4);

#line 883 "re2.pyx"
                __Pyx_INCREF(function);

#line 883 "re2.pyx"
                __Pyx_DECREF_SET(__pyx_t_2, function);

#line 883 "re2.pyx"
              }

#line 883 "re2.pyx"
            }

#line 883 "re2.pyx"
            if (__pyx_t_4) {

#line 883 "re2.pyx"
              __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 883, __pyx_L1_error)

#line 883 "re2.pyx"
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 883 "re2.pyx"
            } else {

#line 883 "re2.pyx"
              __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 883, __pyx_L1_error)

#line 883 "re2.pyx"
            }

#line 883 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_1);

#line 883 "re2.pyx"
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 883 "re2.pyx"
            __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 883 "re2.pyx"
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 883 "re2.pyx"
            __PYX_ERR(0, 883, __pyx_L1_error)

#line 883 "re2.pyx"
          }

#line 883 "re2.pyx"
          __pyx_L27:;

          /* "re2.pyx":877
 *                 raise BackreferencesException()
 *             elif this[1] in '1234567':
 *                 if source.next and source.next in '1234567':             # <<<<<<<<<<<<<<
 *                     this += source.get()
 *                     if source.next and source.next in '1234567':
 */

#line 877 "re2.pyx"
          goto __pyx_L24;

#line 877 "re2.pyx"
        }

        /* "re2.pyx":885
 *                         raise BackreferencesException()
 *                 else:
 *                     raise BackreferencesException()             # <<<<<<<<<<<<<<
 *             elif flags & _U:
 *                 if this[1] == 'd':
 */

#line 885 "re2.pyx"
        /*else*/ {

#line 885 "re2.pyx"
          __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BackreferencesException); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 885, __pyx_L1_error)

#line 885 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 885 "re2.pyx"
          __pyx_t_4 = NULL;

#line 885 "re2.pyx"
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 885 "re2.pyx"
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);

#line 885 "re2.pyx"
            if (likely(__pyx_t_4)) {

#line 885 "re2.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 885 "re2.pyx"
              __Pyx_INCREF(__pyx_t_4);

#line 885 "re2.pyx"
              __Pyx_INCREF(function);

#line 885 "re2.pyx"
              __Pyx_DECREF_SET(__pyx_t_2, function);

#line 885 "re2.pyx"
            }

#line 885 "re2.pyx"
          }

#line 885 "re2.pyx"
          if (__pyx_t_4) {

#line 885 "re2.pyx"
            __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 885, __pyx_L1_error)

#line 885 "re2.pyx"
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 885 "re2.pyx"
          } else {

#line 885 "re2.pyx"
            __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 885, __pyx_L1_error)

#line 885 "re2.pyx"
          }

#line 885 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 885 "re2.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 885 "re2.pyx"
          __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 885 "re2.pyx"
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 885 "re2.pyx"
          __PYX_ERR(0, 885, __pyx_L1_error)

#line 885 "re2.pyx"
        }

#line 885 "re2.pyx"
        __pyx_L24:;

        /* "re2.pyx":876
 *             if this[1] in '89':
 *                 raise BackreferencesException()
 *             elif this[1] in '1234567':             # <<<<<<<<<<<<<<
 *                 if source.next and source.next in '1234567':
 *                     this += source.get()
 */

#line 876 "re2.pyx"
        goto __pyx_L23;

#line 876 "re2.pyx"
      }

      /* "re2.pyx":886
 *                 else:
 *                     raise BackreferencesException()
 *             elif flags & _U:             # <<<<<<<<<<<<<<
 *                 if this[1] == 'd':
 *                     new_pattern.append(r'\p{Nd}')
 */

#line 886 "re2.pyx"
      __pyx_t_7 = ((__pyx_v_flags & __pyx_v_3re2__U) != 0);

#line 886 "re2.pyx"
      if (__pyx_t_7) {

        /* "re2.pyx":887
 *                     raise BackreferencesException()
 *             elif flags & _U:
 *                 if this[1] == 'd':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(r'\p{Nd}')
 *                 elif this[1] == 'w':
 */

#line 887 "re2.pyx"
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_this, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 887, __pyx_L1_error)

#line 887 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 887 "re2.pyx"
        __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_d, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 887, __pyx_L1_error)

#line 887 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 887 "re2.pyx"
        if (__pyx_t_7) {

          /* "re2.pyx":888
 *             elif flags & _U:
 *                 if this[1] == 'd':
 *                     new_pattern.append(r'\p{Nd}')             # <<<<<<<<<<<<<<
 *                 elif this[1] == 'w':
 *                     new_pattern.append(r'[_\p{L}\p{Nd}]')
 */

#line 888 "re2.pyx"
          __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_kp_s_p_Nd); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 888, __pyx_L1_error)

          /* "re2.pyx":887
 *                     raise BackreferencesException()
 *             elif flags & _U:
 *                 if this[1] == 'd':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(r'\p{Nd}')
 *                 elif this[1] == 'w':
 */

#line 887 "re2.pyx"
          goto __pyx_L30;

#line 887 "re2.pyx"
        }

        /* "re2.pyx":889
 *                 if this[1] == 'd':
 *                     new_pattern.append(r'\p{Nd}')
 *                 elif this[1] == 'w':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(r'[_\p{L}\p{Nd}]')
 *                 elif this[1] == 's':
 */

#line 889 "re2.pyx"
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_this, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 889, __pyx_L1_error)

#line 889 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 889 "re2.pyx"
        __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_w, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 889, __pyx_L1_error)

#line 889 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 889 "re2.pyx"
        if (__pyx_t_7) {

          /* "re2.pyx":890
 *                     new_pattern.append(r'\p{Nd}')
 *                 elif this[1] == 'w':
 *                     new_pattern.append(r'[_\p{L}\p{Nd}]')             # <<<<<<<<<<<<<<
 *                 elif this[1] == 's':
 *                     new_pattern.append(r'[\s\p{Z}]')
 */

#line 890 "re2.pyx"
          __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_kp_s_p_L_p_Nd_2); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 890, __pyx_L1_error)

          /* "re2.pyx":889
 *                 if this[1] == 'd':
 *                     new_pattern.append(r'\p{Nd}')
 *                 elif this[1] == 'w':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(r'[_\p{L}\p{Nd}]')
 *                 elif this[1] == 's':
 */

#line 889 "re2.pyx"
          goto __pyx_L30;

#line 889 "re2.pyx"
        }

        /* "re2.pyx":891
 *                 elif this[1] == 'w':
 *                     new_pattern.append(r'[_\p{L}\p{Nd}]')
 *                 elif this[1] == 's':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(r'[\s\p{Z}]')
 *                 elif this[1] == 'D':
 */

#line 891 "re2.pyx"
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_this, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 891, __pyx_L1_error)

#line 891 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 891 "re2.pyx"
        __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_s, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 891, __pyx_L1_error)

#line 891 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 891 "re2.pyx"
        if (__pyx_t_7) {

          /* "re2.pyx":892
 *                     new_pattern.append(r'[_\p{L}\p{Nd}]')
 *                 elif this[1] == 's':
 *                     new_pattern.append(r'[\s\p{Z}]')             # <<<<<<<<<<<<<<
 *                 elif this[1] == 'D':
 *                     new_pattern.append(r'[^\p{Nd}]')
 */

#line 892 "re2.pyx"
          __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_kp_s_s_p_Z_2); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 892, __pyx_L1_error)

          /* "re2.pyx":891
 *                 elif this[1] == 'w':
 *                     new_pattern.append(r'[_\p{L}\p{Nd}]')
 *                 elif this[1] == 's':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(r'[\s\p{Z}]')
 *                 elif this[1] == 'D':
 */

#line 891 "re2.pyx"
          goto __pyx_L30;

#line 891 "re2.pyx"
        }

        /* "re2.pyx":893
 *                 elif this[1] == 's':
 *                     new_pattern.append(r'[\s\p{Z}]')
 *                 elif this[1] == 'D':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(r'[^\p{Nd}]')
 *                 elif this[1] == 'W':
 */

#line 893 "re2.pyx"
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_this, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)

#line 893 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 893 "re2.pyx"
        __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_D, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 893, __pyx_L1_error)

#line 893 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 893 "re2.pyx"
        if (__pyx_t_7) {

          /* "re2.pyx":894
 *                     new_pattern.append(r'[\s\p{Z}]')
 *                 elif this[1] == 'D':
 *                     new_pattern.append(r'[^\p{Nd}]')             # <<<<<<<<<<<<<<
 *                 elif this[1] == 'W':
 *                     new_pattern.append(r'[^_\p{L}\p{Nd}]')
 */

#line 894 "re2.pyx"
          __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_kp_s_p_Nd_2); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 894, __pyx_L1_error)

          /* "re2.pyx":893
 *                 elif this[1] == 's':
 *                     new_pattern.append(r'[\s\p{Z}]')
 *                 elif this[1] == 'D':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(r'[^\p{Nd}]')
 *                 elif this[1] == 'W':
 */

#line 893 "re2.pyx"
          goto __pyx_L30;

#line 893 "re2.pyx"
        }

        /* "re2.pyx":895
 *                 elif this[1] == 'D':
 *                     new_pattern.append(r'[^\p{Nd}]')
 *                 elif this[1] == 'W':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(r'[^_\p{L}\p{Nd}]')
 *                 elif this[1] == 'S':
 */

#line 895 "re2.pyx"
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_this, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 895, __pyx_L1_error)

#line 895 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 895 "re2.pyx"
        __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_W, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 895, __pyx_L1_error)

#line 895 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 895 "re2.pyx"
        if (__pyx_t_7) {

          /* "re2.pyx":896
 *                     new_pattern.append(r'[^\p{Nd}]')
 *                 elif this[1] == 'W':
 *                     new_pattern.append(r'[^_\p{L}\p{Nd}]')             # <<<<<<<<<<<<<<
 *                 elif this[1] == 'S':
 *                     new_pattern.append(r'[^\s\p{Z}]')
 */

#line 896 "re2.pyx"
          __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_kp_s_p_L_p_Nd_3); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 896, __pyx_L1_error)

          /* "re2.pyx":895
 *                 elif this[1] == 'D':
 *                     new_pattern.append(r'[^\p{Nd}]')
 *                 elif this[1] == 'W':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(r'[^_\p{L}\p{Nd}]')
 *                 elif this[1] == 'S':
 */

#line 895 "re2.pyx"
          goto __pyx_L30;

#line 895 "re2.pyx"
        }

        /* "re2.pyx":897
 *                 elif this[1] == 'W':
 *                     new_pattern.append(r'[^_\p{L}\p{Nd}]')
 *                 elif this[1] == 'S':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(r'[^\s\p{Z}]')
 *                 else:
 */

#line 897 "re2.pyx"
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_this, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 897, __pyx_L1_error)

#line 897 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 897 "re2.pyx"
        __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_S, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 897, __pyx_L1_error)

#line 897 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 897 "re2.pyx"
        if (__pyx_t_7) {

          /* "re2.pyx":898
 *                     new_pattern.append(r'[^_\p{L}\p{Nd}]')
 *                 elif this[1] == 'S':
 *                     new_pattern.append(r'[^\s\p{Z}]')             # <<<<<<<<<<<<<<
 *                 else:
 *                     new_pattern.append(this)
 */

#line 898 "re2.pyx"
          __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_kp_s_s_p_Z_3); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 898, __pyx_L1_error)

          /* "re2.pyx":897
 *                 elif this[1] == 'W':
 *                     new_pattern.append(r'[^_\p{L}\p{Nd}]')
 *                 elif this[1] == 'S':             # <<<<<<<<<<<<<<
 *                     new_pattern.append(r'[^\s\p{Z}]')
 *                 else:
 */

#line 897 "re2.pyx"
          goto __pyx_L30;

#line 897 "re2.pyx"
        }

        /* "re2.pyx":900
 *                     new_pattern.append(r'[^\s\p{Z}]')
 *                 else:
 *                     new_pattern.append(this)             # <<<<<<<<<<<<<<
 *             else:
 *                 new_pattern.append(this)
 */

#line 900 "re2.pyx"
        /*else*/ {

#line 900 "re2.pyx"
          __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 900, __pyx_L1_error)

#line 900 "re2.pyx"
        }

#line 900 "re2.pyx"
        __pyx_L30:;

        /* "re2.pyx":886
 *                 else:
 *                     raise BackreferencesException()
 *             elif flags & _U:             # <<<<<<<<<<<<<<
 *                 if this[1] == 'd':
 *                     new_pattern.append(r'\p{Nd}')
 */

#line 886 "re2.pyx"
        goto __pyx_L23;

#line 886 "re2.pyx"
      }

      /* "re2.pyx":902
 *                     new_pattern.append(this)
 *             else:
 *                 new_pattern.append(this)             # <<<<<<<<<<<<<<
 * 
 *     return ''.join(new_pattern)
 */

#line 902 "re2.pyx"
      /*else*/ {

#line 902 "re2.pyx"
        __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_new_pattern, __pyx_v_this); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 902, __pyx_L1_error)

#line 902 "re2.pyx"
      }

#line 902 "re2.pyx"
      __pyx_L23:;

      /* "re2.pyx":873
 *                 else:
 *                     new_pattern.append(this)
 *         elif this[0] == '\\':             # <<<<<<<<<<<<<<
 *             if this[1] in '89':
 *                 raise BackreferencesException()
 */

#line 873 "re2.pyx"
    }

#line 873 "re2.pyx"
    __pyx_L17:;

#line 873 "re2.pyx"
    __pyx_L6_continue:;

#line 873 "re2.pyx"
  }

#line 873 "re2.pyx"
  __pyx_L7_break:;

  /* "re2.pyx":904
 *                 new_pattern.append(this)
 * 
 *     return ''.join(new_pattern)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 904 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 904 "re2.pyx"
  __pyx_t_1 = __Pyx_PyString_Join(__pyx_kp_s__15, __pyx_v_new_pattern); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 904, __pyx_L1_error)

#line 904 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 904 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 904 "re2.pyx"
  __pyx_t_1 = 0;

#line 904 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":809
 *         return this
 * 
 * def prepare_pattern(pattern, int flags):             # <<<<<<<<<<<<<<
 *     source = Tokenizer(pattern)
 *     new_pattern = []
 */

#line 809 "re2.pyx"


#line 809 "re2.pyx"
  /* function exit code */

#line 809 "re2.pyx"
  __pyx_L1_error:;

#line 809 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 809 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 809 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 809 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 809 "re2.pyx"
  __Pyx_AddTraceback("re2.prepare_pattern", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 809 "re2.pyx"
  __pyx_r = NULL;

#line 809 "re2.pyx"
  __pyx_L0:;

#line 809 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_source);

#line 809 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_new_pattern);

#line 809 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_strflags);

#line 809 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_this);

#line 809 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 809 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 809 "re2.pyx"
  return __pyx_r;

#line 809 "re2.pyx"
}

/* "re2.pyx":908
 * 
 * 
 * def _compile(pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     """
 *     Compile a regular expression pattern, returning a pattern object.
 */

#line 908 "re2.pyx"


#line 908 "re2.pyx"
/* Python wrapper */

#line 908 "re2.pyx"
static PyObject *__pyx_pw_3re2_7_compile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 908 "re2.pyx"
static char __pyx_doc_3re2_6_compile[] = "File: re2.pyx (starting at line 908)\n\n    Compile a regular expression pattern, returning a pattern object.\n    ";
static PyMethodDef __pyx_mdef_3re2_7_compile = 
#line 908 "re2.pyx"
{"_compile", (PyCFunction)__pyx_pw_3re2_7_compile, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_6_compile};

#line 908 "re2.pyx"
static PyObject *__pyx_pw_3re2_7_compile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0
#line 908 "re2.pyx"
;
  int __pyx_v_flags
#line 908 "re2.pyx"
;
  int __pyx_v_max_mem
#line 908 "re2.pyx"
;

#line 908 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 908 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 908 "re2.pyx"
  __Pyx_RefNannySetupContext("_compile (wrapper)", 0);

#line 908 "re2.pyx"
  {

#line 908 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_flags,&__pyx_n_s_max_mem,0};

#line 908 "re2.pyx"
    PyObject* values[3] = {0,0,0};

#line 908 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 908 "re2.pyx"
      Py_ssize_t kw_args;

#line 908 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 908 "re2.pyx"
      switch (pos_args) {
        case  3: 
#line 908 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 908 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 908 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 908 "re2.pyx"
        case  0: break;
        default: 
#line 908 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 908 "re2.pyx"
      }

#line 908 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 908 "re2.pyx"
      switch (pos_args) {

#line 908 "re2.pyx"
        case  0:

#line 908 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else 
#line 908 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 908 "re2.pyx"
        case  1:

#line 908 "re2.pyx"
        if (kw_args > 0) {

#line 908 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);

#line 908 "re2.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 908 "re2.pyx"
        }

#line 908 "re2.pyx"
        case  2:

#line 908 "re2.pyx"
        if (kw_args > 0) {

#line 908 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_mem);

#line 908 "re2.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 908 "re2.pyx"
        }

#line 908 "re2.pyx"
      }

#line 908 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 908 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_compile") < 0)) __PYX_ERR(0, 908, __pyx_L3_error)

#line 908 "re2.pyx"
      }

#line 908 "re2.pyx"
    } else {

#line 908 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 908 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 908 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 908 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 908 "re2.pyx"
        break;
        default: 
#line 908 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 908 "re2.pyx"
      }

#line 908 "re2.pyx"
    }

#line 908 "re2.pyx"
    __pyx_v_pattern = values[0];

#line 908 "re2.pyx"
    if (values[1]) {

#line 908 "re2.pyx"
      __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 908, __pyx_L3_error)

#line 908 "re2.pyx"
    } else {

#line 908 "re2.pyx"
      __pyx_v_flags = ((int)0);

#line 908 "re2.pyx"
    }

#line 908 "re2.pyx"
    if (values[2]) {

#line 908 "re2.pyx"
      __pyx_v_max_mem = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_max_mem == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 908, __pyx_L3_error)

#line 908 "re2.pyx"
    } else {

#line 908 "re2.pyx"
      __pyx_v_max_mem = ((int)0x800000);

#line 908 "re2.pyx"
    }

#line 908 "re2.pyx"
  }

#line 908 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 908 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_compile", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 908 "re2.pyx"
__PYX_ERR(0, 908, __pyx_L3_error)

#line 908 "re2.pyx"
  __pyx_L3_error:;

#line 908 "re2.pyx"
  __Pyx_AddTraceback("re2._compile", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 908 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 908 "re2.pyx"
  return NULL;

#line 908 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 908 "re2.pyx"
__pyx_pf_3re2_6_compile(__pyx_self, __pyx_v_pattern, __pyx_v_flags, __pyx_v_max_mem);

#line 908 "re2.pyx"


#line 908 "re2.pyx"
  /* function exit code */

#line 908 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 908 "re2.pyx"
  return __pyx_r;

#line 908 "re2.pyx"
}

#line 908 "re2.pyx"


#line 908 "re2.pyx"
static PyObject *__pyx_pf_3re2_6_compile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, int __pyx_v_flags, int __pyx_v_max_mem) {
  char *__pyx_v_string
#line 908 "re2.pyx"
;
  Py_ssize_t __pyx_v_length
#line 908 "re2.pyx"
;
  re2::StringPiece *__pyx_v_s
#line 908 "re2.pyx"
;
  RE2::Options __pyx_v_opts
#line 908 "re2.pyx"
;
  int __pyx_v_error_code
#line 908 "re2.pyx"
;
  int __pyx_v_encoded
#line 908 "re2.pyx"
;
  PyObject *__pyx_v_original_pattern = 0
#line 908 "re2.pyx"
;
  PyObject *__pyx_v_error_msg = NULL
#line 908 "re2.pyx"
;
  re2::RE2 *__pyx_v_re_pattern
#line 908 "re2.pyx"
;
  struct __pyx_obj_3re2_Pattern *__pyx_v_pypattern = 0
#line 908 "re2.pyx"
;

#line 908 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 908 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 908 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 908 "re2.pyx"
  int __pyx_t_2;

#line 908 "re2.pyx"
  int __pyx_t_3;

#line 908 "re2.pyx"
  int __pyx_t_4;

#line 908 "re2.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 908 "re2.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 908 "re2.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 908 "re2.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 908 "re2.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 908 "re2.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 908 "re2.pyx"
  int __pyx_t_11;

#line 908 "re2.pyx"
  PyObject *__pyx_t_12 = NULL;

#line 908 "re2.pyx"
  PyObject *__pyx_t_13 = NULL;

#line 908 "re2.pyx"
  PyObject *__pyx_t_14 = NULL;

#line 908 "re2.pyx"
  PyObject *__pyx_t_15 = NULL;

#line 908 "re2.pyx"
  __Pyx_RefNannySetupContext("_compile", 0);

#line 908 "re2.pyx"
  __Pyx_INCREF(__pyx_v_pattern);

  /* "re2.pyx":917
 *     cdef _re2.Options opts
 *     cdef int error_code
 *     cdef int encoded = 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(pattern, (Pattern, SREPattern)):
 */

#line 917 "re2.pyx"
  __pyx_v_encoded = 0;

  /* "re2.pyx":919
 *     cdef int encoded = 0
 * 
 *     if isinstance(pattern, (Pattern, SREPattern)):             # <<<<<<<<<<<<<<
 *         if flags:
 *             raise ValueError('Cannot process flags argument with a compiled pattern')
 */

#line 919 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_SREPattern); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 919, __pyx_L1_error)

#line 919 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 919 "re2.pyx"
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_pattern, __pyx_ptype_3re2_Pattern); 

#line 919 "re2.pyx"
  __pyx_t_4 = (__pyx_t_3 != 0);

#line 919 "re2.pyx"
  if (!__pyx_t_4) {

#line 919 "re2.pyx"
  } else {

#line 919 "re2.pyx"
    __pyx_t_2 = __pyx_t_4;

#line 919 "re2.pyx"
    goto __pyx_L4_bool_binop_done;

#line 919 "re2.pyx"
  }

#line 919 "re2.pyx"
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_pattern, __pyx_t_1); 

#line 919 "re2.pyx"
  __pyx_t_3 = (__pyx_t_4 != 0);

#line 919 "re2.pyx"
  __pyx_t_2 = __pyx_t_3;

#line 919 "re2.pyx"
  __pyx_L4_bool_binop_done:;

#line 919 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 919 "re2.pyx"
  __pyx_t_3 = (__pyx_t_2 != 0);

#line 919 "re2.pyx"
  if (__pyx_t_3) {

    /* "re2.pyx":920
 * 
 *     if isinstance(pattern, (Pattern, SREPattern)):
 *         if flags:             # <<<<<<<<<<<<<<
 *             raise ValueError('Cannot process flags argument with a compiled pattern')
 *         return pattern
 */

#line 920 "re2.pyx"
    __pyx_t_3 = (__pyx_v_flags != 0);

#line 920 "re2.pyx"
    if (__pyx_t_3) {

      /* "re2.pyx":921
 *     if isinstance(pattern, (Pattern, SREPattern)):
 *         if flags:
 *             raise ValueError('Cannot process flags argument with a compiled pattern')             # <<<<<<<<<<<<<<
 *         return pattern
 * 
 */

#line 921 "re2.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 921, __pyx_L1_error)

#line 921 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 921 "re2.pyx"
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 921 "re2.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 921 "re2.pyx"
      __PYX_ERR(0, 921, __pyx_L1_error)

      /* "re2.pyx":920
 * 
 *     if isinstance(pattern, (Pattern, SREPattern)):
 *         if flags:             # <<<<<<<<<<<<<<
 *             raise ValueError('Cannot process flags argument with a compiled pattern')
 *         return pattern
 */

#line 920 "re2.pyx"
    }

    /* "re2.pyx":922
 *         if flags:
 *             raise ValueError('Cannot process flags argument with a compiled pattern')
 *         return pattern             # <<<<<<<<<<<<<<
 * 
 *     cdef object original_pattern = pattern
 */

#line 922 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 922 "re2.pyx"
    __Pyx_INCREF(__pyx_v_pattern);

#line 922 "re2.pyx"
    __pyx_r = __pyx_v_pattern;

#line 922 "re2.pyx"
    goto __pyx_L0;

    /* "re2.pyx":919
 *     cdef int encoded = 0
 * 
 *     if isinstance(pattern, (Pattern, SREPattern)):             # <<<<<<<<<<<<<<
 *         if flags:
 *             raise ValueError('Cannot process flags argument with a compiled pattern')
 */

#line 919 "re2.pyx"
  }

  /* "re2.pyx":924
 *         return pattern
 * 
 *     cdef object original_pattern = pattern             # <<<<<<<<<<<<<<
 *     try:
 *         pattern = prepare_pattern(original_pattern, flags)
 */

#line 924 "re2.pyx"
  __Pyx_INCREF(__pyx_v_pattern);

#line 924 "re2.pyx"
  __pyx_v_original_pattern = __pyx_v_pattern;

  /* "re2.pyx":925
 * 
 *     cdef object original_pattern = pattern
 *     try:             # <<<<<<<<<<<<<<
 *         pattern = prepare_pattern(original_pattern, flags)
 *     except BackreferencesException:
 */

#line 925 "re2.pyx"
  {

#line 925 "re2.pyx"
    __Pyx_PyThreadState_declare

#line 925 "re2.pyx"
    __Pyx_PyThreadState_assign

#line 925 "re2.pyx"
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);

#line 925 "re2.pyx"
    __Pyx_XGOTREF(__pyx_t_5);

#line 925 "re2.pyx"
    __Pyx_XGOTREF(__pyx_t_6);

#line 925 "re2.pyx"
    __Pyx_XGOTREF(__pyx_t_7);

#line 925 "re2.pyx"
    /*try:*/ {

      /* "re2.pyx":926
 *     cdef object original_pattern = pattern
 *     try:
 *         pattern = prepare_pattern(original_pattern, flags)             # <<<<<<<<<<<<<<
 *     except BackreferencesException:
 *         error_msg = "Backreferences not supported"
 */

#line 926 "re2.pyx"
      __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_prepare_pattern); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 926, __pyx_L7_error)

#line 926 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 926 "re2.pyx"
      __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 926, __pyx_L7_error)

#line 926 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 926 "re2.pyx"
      __pyx_t_10 = NULL;

#line 926 "re2.pyx"
      __pyx_t_11 = 0;

#line 926 "re2.pyx"
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {

#line 926 "re2.pyx"
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);

#line 926 "re2.pyx"
        if (likely(__pyx_t_10)) {

#line 926 "re2.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);

#line 926 "re2.pyx"
          __Pyx_INCREF(__pyx_t_10);

#line 926 "re2.pyx"
          __Pyx_INCREF(function);

#line 926 "re2.pyx"
          __Pyx_DECREF_SET(__pyx_t_8, function);

#line 926 "re2.pyx"
          __pyx_t_11 = 1;

#line 926 "re2.pyx"
        }

#line 926 "re2.pyx"
      }

#line 926 "re2.pyx"
      #if CYTHON_FAST_PYCALL

#line 926 "re2.pyx"
      if (PyFunction_Check(__pyx_t_8)) {

#line 926 "re2.pyx"
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_original_pattern, __pyx_t_9};

#line 926 "re2.pyx"
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 926, __pyx_L7_error)

#line 926 "re2.pyx"
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 926 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 926 "re2.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 926 "re2.pyx"
      } else

#line 926 "re2.pyx"
      #endif

#line 926 "re2.pyx"
      #if CYTHON_FAST_PYCCALL

#line 926 "re2.pyx"
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {

#line 926 "re2.pyx"
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_original_pattern, __pyx_t_9};

#line 926 "re2.pyx"
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 926, __pyx_L7_error)

#line 926 "re2.pyx"
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 926 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 926 "re2.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 926 "re2.pyx"
      } else

#line 926 "re2.pyx"
      #endif

#line 926 "re2.pyx"
      {

#line 926 "re2.pyx"
        __pyx_t_12 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 926, __pyx_L7_error)

#line 926 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_12);

#line 926 "re2.pyx"
        if (__pyx_t_10) {

#line 926 "re2.pyx"
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10); __pyx_t_10 = NULL;

#line 926 "re2.pyx"
        }

#line 926 "re2.pyx"
        __Pyx_INCREF(__pyx_v_original_pattern);

#line 926 "re2.pyx"
        __Pyx_GIVEREF(__pyx_v_original_pattern);

#line 926 "re2.pyx"
        PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_v_original_pattern);

#line 926 "re2.pyx"
        __Pyx_GIVEREF(__pyx_t_9);

#line 926 "re2.pyx"
        PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_t_9);

#line 926 "re2.pyx"
        __pyx_t_9 = 0;

#line 926 "re2.pyx"
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 926, __pyx_L7_error)

#line 926 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 926 "re2.pyx"
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 926 "re2.pyx"
      }

#line 926 "re2.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 926 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_v_pattern, __pyx_t_1);

#line 926 "re2.pyx"
      __pyx_t_1 = 0;

      /* "re2.pyx":925
 * 
 *     cdef object original_pattern = pattern
 *     try:             # <<<<<<<<<<<<<<
 *         pattern = prepare_pattern(original_pattern, flags)
 *     except BackreferencesException:
 */

#line 925 "re2.pyx"
    }

#line 925 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 925 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 925 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 925 "re2.pyx"
    goto __pyx_L14_try_end;

#line 925 "re2.pyx"
    __pyx_L7_error:;

#line 925 "re2.pyx"
    __Pyx_PyThreadState_assign

#line 925 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 925 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 925 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 925 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 925 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "re2.pyx":927
 *     try:
 *         pattern = prepare_pattern(original_pattern, flags)
 *     except BackreferencesException:             # <<<<<<<<<<<<<<
 *         error_msg = "Backreferences not supported"
 *         if current_notification == <int>FALLBACK_EXCEPTION:
 */

#line 927 "re2.pyx"
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BackreferencesException); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 927, __pyx_L9_except_error)

#line 927 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 927 "re2.pyx"
    __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_t_1);

#line 927 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 927 "re2.pyx"
    if (__pyx_t_11) {

#line 927 "re2.pyx"
      __Pyx_AddTraceback("re2._compile", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 927 "re2.pyx"
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_8, &__pyx_t_12) < 0) __PYX_ERR(0, 927, __pyx_L9_except_error)

#line 927 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 927 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 927 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_12);

      /* "re2.pyx":928
 *         pattern = prepare_pattern(original_pattern, flags)
 *     except BackreferencesException:
 *         error_msg = "Backreferences not supported"             # <<<<<<<<<<<<<<
 *         if current_notification == <int>FALLBACK_EXCEPTION:
 *             # Raise an exception regardless of the type of error.
 */

#line 928 "re2.pyx"
      __Pyx_INCREF(__pyx_kp_s_Backreferences_not_supported);

#line 928 "re2.pyx"
      __pyx_v_error_msg = __pyx_kp_s_Backreferences_not_supported;

      /* "re2.pyx":929
 *     except BackreferencesException:
 *         error_msg = "Backreferences not supported"
 *         if current_notification == <int>FALLBACK_EXCEPTION:             # <<<<<<<<<<<<<<
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 */

#line 929 "re2.pyx"
      __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_FALLBACK_EXCEPTION); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 929, __pyx_L9_except_error)

#line 929 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 929 "re2.pyx"
      __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 929, __pyx_L9_except_error)

#line 929 "re2.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 929 "re2.pyx"
      __pyx_t_3 = ((__pyx_v_3re2_current_notification == ((int)__pyx_t_11)) != 0);

#line 929 "re2.pyx"
      if (__pyx_t_3) {

        /* "re2.pyx":931
 *         if current_notification == <int>FALLBACK_EXCEPTION:
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)             # <<<<<<<<<<<<<<
 *         elif current_notification == <int>FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 */

#line 931 "re2.pyx"
        __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_RegexError); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 931, __pyx_L9_except_error)

#line 931 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_10);

#line 931 "re2.pyx"
        __pyx_t_13 = NULL;

#line 931 "re2.pyx"
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {

#line 931 "re2.pyx"
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_10);

#line 931 "re2.pyx"
          if (likely(__pyx_t_13)) {

#line 931 "re2.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);

#line 931 "re2.pyx"
            __Pyx_INCREF(__pyx_t_13);

#line 931 "re2.pyx"
            __Pyx_INCREF(function);

#line 931 "re2.pyx"
            __Pyx_DECREF_SET(__pyx_t_10, function);

#line 931 "re2.pyx"
          }

#line 931 "re2.pyx"
        }

#line 931 "re2.pyx"
        if (!__pyx_t_13) {

#line 931 "re2.pyx"
          __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_error_msg); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 931, __pyx_L9_except_error)

#line 931 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 931 "re2.pyx"
        } else {

#line 931 "re2.pyx"
          #if CYTHON_FAST_PYCALL

#line 931 "re2.pyx"
          if (PyFunction_Check(__pyx_t_10)) {

#line 931 "re2.pyx"
            PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_v_error_msg};

#line 931 "re2.pyx"
            __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 931, __pyx_L9_except_error)

#line 931 "re2.pyx"
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 931 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 931 "re2.pyx"
          } else

#line 931 "re2.pyx"
          #endif

#line 931 "re2.pyx"
          #if CYTHON_FAST_PYCCALL

#line 931 "re2.pyx"
          if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {

#line 931 "re2.pyx"
            PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_v_error_msg};

#line 931 "re2.pyx"
            __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 931, __pyx_L9_except_error)

#line 931 "re2.pyx"
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 931 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 931 "re2.pyx"
          } else

#line 931 "re2.pyx"
          #endif

#line 931 "re2.pyx"
          {

#line 931 "re2.pyx"
            __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 931, __pyx_L9_except_error)

#line 931 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_14);

#line 931 "re2.pyx"
            __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_13); __pyx_t_13 = NULL;

#line 931 "re2.pyx"
            __Pyx_INCREF(__pyx_v_error_msg);

#line 931 "re2.pyx"
            __Pyx_GIVEREF(__pyx_v_error_msg);

#line 931 "re2.pyx"
            PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_v_error_msg);

#line 931 "re2.pyx"
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_14, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 931, __pyx_L9_except_error)

#line 931 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 931 "re2.pyx"
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 931 "re2.pyx"
          }

#line 931 "re2.pyx"
        }

#line 931 "re2.pyx"
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 931 "re2.pyx"
        __Pyx_Raise(__pyx_t_9, 0, 0, 0);

#line 931 "re2.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 931 "re2.pyx"
        __PYX_ERR(0, 931, __pyx_L9_except_error)

        /* "re2.pyx":929
 *     except BackreferencesException:
 *         error_msg = "Backreferences not supported"
 *         if current_notification == <int>FALLBACK_EXCEPTION:             # <<<<<<<<<<<<<<
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 */

#line 929 "re2.pyx"
      }

      /* "re2.pyx":932
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 *         elif current_notification == <int>FALLBACK_WARNING:             # <<<<<<<<<<<<<<
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         return re.compile(original_pattern, flags)
 */

#line 932 "re2.pyx"
      __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_FALLBACK_WARNING); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 932, __pyx_L9_except_error)

#line 932 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 932 "re2.pyx"
      __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L9_except_error)

#line 932 "re2.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 932 "re2.pyx"
      __pyx_t_3 = ((__pyx_v_3re2_current_notification == ((int)__pyx_t_11)) != 0);

#line 932 "re2.pyx"
      if (__pyx_t_3) {

        /* "re2.pyx":933
 *             raise RegexError(error_msg)
 *         elif current_notification == <int>FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)             # <<<<<<<<<<<<<<
 *         return re.compile(original_pattern, flags)
 *     except CharClassProblemException:
 */

#line 933 "re2.pyx"
        __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 933, __pyx_L9_except_error)

#line 933 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_10);

#line 933 "re2.pyx"
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_warn); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 933, __pyx_L9_except_error)

#line 933 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_14);

#line 933 "re2.pyx"
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 933 "re2.pyx"
        __pyx_t_10 = __Pyx_PyString_Format(__pyx_kp_s_WARNING_Using_re_module_Reason_s, __pyx_v_error_msg); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 933, __pyx_L9_except_error)

#line 933 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_10);

#line 933 "re2.pyx"
        __pyx_t_13 = NULL;

#line 933 "re2.pyx"
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {

#line 933 "re2.pyx"
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_14);

#line 933 "re2.pyx"
          if (likely(__pyx_t_13)) {

#line 933 "re2.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);

#line 933 "re2.pyx"
            __Pyx_INCREF(__pyx_t_13);

#line 933 "re2.pyx"
            __Pyx_INCREF(function);

#line 933 "re2.pyx"
            __Pyx_DECREF_SET(__pyx_t_14, function);

#line 933 "re2.pyx"
          }

#line 933 "re2.pyx"
        }

#line 933 "re2.pyx"
        if (!__pyx_t_13) {

#line 933 "re2.pyx"
          __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 933, __pyx_L9_except_error)

#line 933 "re2.pyx"
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 933 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 933 "re2.pyx"
        } else {

#line 933 "re2.pyx"
          #if CYTHON_FAST_PYCALL

#line 933 "re2.pyx"
          if (PyFunction_Check(__pyx_t_14)) {

#line 933 "re2.pyx"
            PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_t_10};

#line 933 "re2.pyx"
            __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 933, __pyx_L9_except_error)

#line 933 "re2.pyx"
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 933 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 933 "re2.pyx"
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 933 "re2.pyx"
          } else

#line 933 "re2.pyx"
          #endif

#line 933 "re2.pyx"
          #if CYTHON_FAST_PYCCALL

#line 933 "re2.pyx"
          if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {

#line 933 "re2.pyx"
            PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_t_10};

#line 933 "re2.pyx"
            __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 933, __pyx_L9_except_error)

#line 933 "re2.pyx"
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 933 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 933 "re2.pyx"
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 933 "re2.pyx"
          } else

#line 933 "re2.pyx"
          #endif

#line 933 "re2.pyx"
          {

#line 933 "re2.pyx"
            __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 933, __pyx_L9_except_error)

#line 933 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_15);

#line 933 "re2.pyx"
            __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_13); __pyx_t_13 = NULL;

#line 933 "re2.pyx"
            __Pyx_GIVEREF(__pyx_t_10);

#line 933 "re2.pyx"
            PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_t_10);

#line 933 "re2.pyx"
            __pyx_t_10 = 0;

#line 933 "re2.pyx"
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_15, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 933, __pyx_L9_except_error)

#line 933 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 933 "re2.pyx"
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 933 "re2.pyx"
          }

#line 933 "re2.pyx"
        }

#line 933 "re2.pyx"
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 933 "re2.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "re2.pyx":932
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 *         elif current_notification == <int>FALLBACK_WARNING:             # <<<<<<<<<<<<<<
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         return re.compile(original_pattern, flags)
 */

#line 932 "re2.pyx"
      }

      /* "re2.pyx":934
 *         elif current_notification == <int>FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         return re.compile(original_pattern, flags)             # <<<<<<<<<<<<<<
 *     except CharClassProblemException:
 *         error_msg = "\W and \S not supported inside character classes"
 */

#line 934 "re2.pyx"
      __Pyx_XDECREF(__pyx_r);

#line 934 "re2.pyx"
      __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 934, __pyx_L9_except_error)

#line 934 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_14);

#line 934 "re2.pyx"
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 934, __pyx_L9_except_error)

#line 934 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_15);

#line 934 "re2.pyx"
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 934 "re2.pyx"
      __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 934, __pyx_L9_except_error)

#line 934 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_14);

#line 934 "re2.pyx"
      __pyx_t_10 = NULL;

#line 934 "re2.pyx"
      __pyx_t_11 = 0;

#line 934 "re2.pyx"
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {

#line 934 "re2.pyx"
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_15);

#line 934 "re2.pyx"
        if (likely(__pyx_t_10)) {

#line 934 "re2.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);

#line 934 "re2.pyx"
          __Pyx_INCREF(__pyx_t_10);

#line 934 "re2.pyx"
          __Pyx_INCREF(function);

#line 934 "re2.pyx"
          __Pyx_DECREF_SET(__pyx_t_15, function);

#line 934 "re2.pyx"
          __pyx_t_11 = 1;

#line 934 "re2.pyx"
        }

#line 934 "re2.pyx"
      }

#line 934 "re2.pyx"
      #if CYTHON_FAST_PYCALL

#line 934 "re2.pyx"
      if (PyFunction_Check(__pyx_t_15)) {

#line 934 "re2.pyx"
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_original_pattern, __pyx_t_14};

#line 934 "re2.pyx"
        __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 934, __pyx_L9_except_error)

#line 934 "re2.pyx"
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 934 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 934 "re2.pyx"
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 934 "re2.pyx"
      } else

#line 934 "re2.pyx"
      #endif

#line 934 "re2.pyx"
      #if CYTHON_FAST_PYCCALL

#line 934 "re2.pyx"
      if (__Pyx_PyFastCFunction_Check(__pyx_t_15)) {

#line 934 "re2.pyx"
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_original_pattern, __pyx_t_14};

#line 934 "re2.pyx"
        __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 934, __pyx_L9_except_error)

#line 934 "re2.pyx"
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 934 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 934 "re2.pyx"
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 934 "re2.pyx"
      } else

#line 934 "re2.pyx"
      #endif

#line 934 "re2.pyx"
      {

#line 934 "re2.pyx"
        __pyx_t_13 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 934, __pyx_L9_except_error)

#line 934 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_13);

#line 934 "re2.pyx"
        if (__pyx_t_10) {

#line 934 "re2.pyx"
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_10); __pyx_t_10 = NULL;

#line 934 "re2.pyx"
        }

#line 934 "re2.pyx"
        __Pyx_INCREF(__pyx_v_original_pattern);

#line 934 "re2.pyx"
        __Pyx_GIVEREF(__pyx_v_original_pattern);

#line 934 "re2.pyx"
        PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_11, __pyx_v_original_pattern);

#line 934 "re2.pyx"
        __Pyx_GIVEREF(__pyx_t_14);

#line 934 "re2.pyx"
        PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_11, __pyx_t_14);

#line 934 "re2.pyx"
        __pyx_t_14 = 0;

#line 934 "re2.pyx"
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_13, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 934, __pyx_L9_except_error)

#line 934 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 934 "re2.pyx"
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 934 "re2.pyx"
      }

#line 934 "re2.pyx"
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 934 "re2.pyx"
      __pyx_r = __pyx_t_9;

#line 934 "re2.pyx"
      __pyx_t_9 = 0;

#line 934 "re2.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 934 "re2.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 934 "re2.pyx"
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 934 "re2.pyx"
      goto __pyx_L10_except_return;

#line 934 "re2.pyx"
    }

    /* "re2.pyx":935
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         return re.compile(original_pattern, flags)
 *     except CharClassProblemException:             # <<<<<<<<<<<<<<
 *         error_msg = "\W and \S not supported inside character classes"
 *         if current_notification == <int>FALLBACK_EXCEPTION:
 */

#line 935 "re2.pyx"
    __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_CharClassProblemException); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 935, __pyx_L9_except_error)

#line 935 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_12);

#line 935 "re2.pyx"
    __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_t_12);

#line 935 "re2.pyx"
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 935 "re2.pyx"
    if (__pyx_t_11) {

#line 935 "re2.pyx"
      __Pyx_AddTraceback("re2._compile", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 935 "re2.pyx"
      if (__Pyx_GetException(&__pyx_t_12, &__pyx_t_8, &__pyx_t_1) < 0) __PYX_ERR(0, 935, __pyx_L9_except_error)

#line 935 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_12);

#line 935 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 935 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

      /* "re2.pyx":936
 *         return re.compile(original_pattern, flags)
 *     except CharClassProblemException:
 *         error_msg = "\W and \S not supported inside character classes"             # <<<<<<<<<<<<<<
 *         if current_notification == <int>FALLBACK_EXCEPTION:
 *             # Raise an exception regardless of the type of error.
 */

#line 936 "re2.pyx"
      __Pyx_INCREF(__pyx_kp_s_W_and_S_not_supported_inside_ch);

#line 936 "re2.pyx"
      __pyx_v_error_msg = __pyx_kp_s_W_and_S_not_supported_inside_ch;

      /* "re2.pyx":937
 *     except CharClassProblemException:
 *         error_msg = "\W and \S not supported inside character classes"
 *         if current_notification == <int>FALLBACK_EXCEPTION:             # <<<<<<<<<<<<<<
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 */

#line 937 "re2.pyx"
      __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_FALLBACK_EXCEPTION); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 937, __pyx_L9_except_error)

#line 937 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 937 "re2.pyx"
      __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 937, __pyx_L9_except_error)

#line 937 "re2.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 937 "re2.pyx"
      __pyx_t_3 = ((__pyx_v_3re2_current_notification == ((int)__pyx_t_11)) != 0);

#line 937 "re2.pyx"
      if (__pyx_t_3) {

        /* "re2.pyx":939
 *         if current_notification == <int>FALLBACK_EXCEPTION:
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)             # <<<<<<<<<<<<<<
 *         elif current_notification == <int>FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 */

#line 939 "re2.pyx"
        __pyx_t_15 = __Pyx_GetModuleGlobalName(__pyx_n_s_RegexError); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 939, __pyx_L9_except_error)

#line 939 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_15);

#line 939 "re2.pyx"
        __pyx_t_13 = NULL;

#line 939 "re2.pyx"
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {

#line 939 "re2.pyx"
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_15);

#line 939 "re2.pyx"
          if (likely(__pyx_t_13)) {

#line 939 "re2.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);

#line 939 "re2.pyx"
            __Pyx_INCREF(__pyx_t_13);

#line 939 "re2.pyx"
            __Pyx_INCREF(function);

#line 939 "re2.pyx"
            __Pyx_DECREF_SET(__pyx_t_15, function);

#line 939 "re2.pyx"
          }

#line 939 "re2.pyx"
        }

#line 939 "re2.pyx"
        if (!__pyx_t_13) {

#line 939 "re2.pyx"
          __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_v_error_msg); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 939, __pyx_L9_except_error)

#line 939 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 939 "re2.pyx"
        } else {

#line 939 "re2.pyx"
          #if CYTHON_FAST_PYCALL

#line 939 "re2.pyx"
          if (PyFunction_Check(__pyx_t_15)) {

#line 939 "re2.pyx"
            PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_v_error_msg};

#line 939 "re2.pyx"
            __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_15, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 939, __pyx_L9_except_error)

#line 939 "re2.pyx"
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 939 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 939 "re2.pyx"
          } else

#line 939 "re2.pyx"
          #endif

#line 939 "re2.pyx"
          #if CYTHON_FAST_PYCCALL

#line 939 "re2.pyx"
          if (__Pyx_PyFastCFunction_Check(__pyx_t_15)) {

#line 939 "re2.pyx"
            PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_v_error_msg};

#line 939 "re2.pyx"
            __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_15, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 939, __pyx_L9_except_error)

#line 939 "re2.pyx"
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 939 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 939 "re2.pyx"
          } else

#line 939 "re2.pyx"
          #endif

#line 939 "re2.pyx"
          {

#line 939 "re2.pyx"
            __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 939, __pyx_L9_except_error)

#line 939 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_14);

#line 939 "re2.pyx"
            __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_13); __pyx_t_13 = NULL;

#line 939 "re2.pyx"
            __Pyx_INCREF(__pyx_v_error_msg);

#line 939 "re2.pyx"
            __Pyx_GIVEREF(__pyx_v_error_msg);

#line 939 "re2.pyx"
            PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_v_error_msg);

#line 939 "re2.pyx"
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_14, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 939, __pyx_L9_except_error)

#line 939 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 939 "re2.pyx"
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 939 "re2.pyx"
          }

#line 939 "re2.pyx"
        }

#line 939 "re2.pyx"
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 939 "re2.pyx"
        __Pyx_Raise(__pyx_t_9, 0, 0, 0);

#line 939 "re2.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 939 "re2.pyx"
        __PYX_ERR(0, 939, __pyx_L9_except_error)

        /* "re2.pyx":937
 *     except CharClassProblemException:
 *         error_msg = "\W and \S not supported inside character classes"
 *         if current_notification == <int>FALLBACK_EXCEPTION:             # <<<<<<<<<<<<<<
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 */

#line 937 "re2.pyx"
      }

      /* "re2.pyx":940
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 *         elif current_notification == <int>FALLBACK_WARNING:             # <<<<<<<<<<<<<<
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         return re.compile(original_pattern, flags)
 */

#line 940 "re2.pyx"
      __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_FALLBACK_WARNING); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 940, __pyx_L9_except_error)

#line 940 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 940 "re2.pyx"
      __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 940, __pyx_L9_except_error)

#line 940 "re2.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 940 "re2.pyx"
      __pyx_t_3 = ((__pyx_v_3re2_current_notification == ((int)__pyx_t_11)) != 0);

#line 940 "re2.pyx"
      if (__pyx_t_3) {

        /* "re2.pyx":941
 *             raise RegexError(error_msg)
 *         elif current_notification == <int>FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)             # <<<<<<<<<<<<<<
 *         return re.compile(original_pattern, flags)
 * 
 */

#line 941 "re2.pyx"
        __pyx_t_15 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 941, __pyx_L9_except_error)

#line 941 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_15);

#line 941 "re2.pyx"
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_warn); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 941, __pyx_L9_except_error)

#line 941 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_14);

#line 941 "re2.pyx"
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 941 "re2.pyx"
        __pyx_t_15 = __Pyx_PyString_Format(__pyx_kp_s_WARNING_Using_re_module_Reason_s, __pyx_v_error_msg); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 941, __pyx_L9_except_error)

#line 941 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_15);

#line 941 "re2.pyx"
        __pyx_t_13 = NULL;

#line 941 "re2.pyx"
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {

#line 941 "re2.pyx"
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_14);

#line 941 "re2.pyx"
          if (likely(__pyx_t_13)) {

#line 941 "re2.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);

#line 941 "re2.pyx"
            __Pyx_INCREF(__pyx_t_13);

#line 941 "re2.pyx"
            __Pyx_INCREF(function);

#line 941 "re2.pyx"
            __Pyx_DECREF_SET(__pyx_t_14, function);

#line 941 "re2.pyx"
          }

#line 941 "re2.pyx"
        }

#line 941 "re2.pyx"
        if (!__pyx_t_13) {

#line 941 "re2.pyx"
          __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 941, __pyx_L9_except_error)

#line 941 "re2.pyx"
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 941 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 941 "re2.pyx"
        } else {

#line 941 "re2.pyx"
          #if CYTHON_FAST_PYCALL

#line 941 "re2.pyx"
          if (PyFunction_Check(__pyx_t_14)) {

#line 941 "re2.pyx"
            PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_t_15};

#line 941 "re2.pyx"
            __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 941, __pyx_L9_except_error)

#line 941 "re2.pyx"
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 941 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 941 "re2.pyx"
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 941 "re2.pyx"
          } else

#line 941 "re2.pyx"
          #endif

#line 941 "re2.pyx"
          #if CYTHON_FAST_PYCCALL

#line 941 "re2.pyx"
          if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {

#line 941 "re2.pyx"
            PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_t_15};

#line 941 "re2.pyx"
            __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 941, __pyx_L9_except_error)

#line 941 "re2.pyx"
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 941 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 941 "re2.pyx"
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 941 "re2.pyx"
          } else

#line 941 "re2.pyx"
          #endif

#line 941 "re2.pyx"
          {

#line 941 "re2.pyx"
            __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 941, __pyx_L9_except_error)

#line 941 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_10);

#line 941 "re2.pyx"
            __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_13); __pyx_t_13 = NULL;

#line 941 "re2.pyx"
            __Pyx_GIVEREF(__pyx_t_15);

#line 941 "re2.pyx"
            PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_15);

#line 941 "re2.pyx"
            __pyx_t_15 = 0;

#line 941 "re2.pyx"
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 941, __pyx_L9_except_error)

#line 941 "re2.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 941 "re2.pyx"
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 941 "re2.pyx"
          }

#line 941 "re2.pyx"
        }

#line 941 "re2.pyx"
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 941 "re2.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "re2.pyx":940
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 *         elif current_notification == <int>FALLBACK_WARNING:             # <<<<<<<<<<<<<<
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         return re.compile(original_pattern, flags)
 */

#line 940 "re2.pyx"
      }

      /* "re2.pyx":942
 *         elif current_notification == <int>FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         return re.compile(original_pattern, flags)             # <<<<<<<<<<<<<<
 * 
 *     # Set the options given the flags above.
 */

#line 942 "re2.pyx"
      __Pyx_XDECREF(__pyx_r);

#line 942 "re2.pyx"
      __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 942, __pyx_L9_except_error)

#line 942 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_14);

#line 942 "re2.pyx"
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 942, __pyx_L9_except_error)

#line 942 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 942 "re2.pyx"
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 942 "re2.pyx"
      __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 942, __pyx_L9_except_error)

#line 942 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_14);

#line 942 "re2.pyx"
      __pyx_t_15 = NULL;

#line 942 "re2.pyx"
      __pyx_t_11 = 0;

#line 942 "re2.pyx"
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {

#line 942 "re2.pyx"
        __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_10);

#line 942 "re2.pyx"
        if (likely(__pyx_t_15)) {

#line 942 "re2.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);

#line 942 "re2.pyx"
          __Pyx_INCREF(__pyx_t_15);

#line 942 "re2.pyx"
          __Pyx_INCREF(function);

#line 942 "re2.pyx"
          __Pyx_DECREF_SET(__pyx_t_10, function);

#line 942 "re2.pyx"
          __pyx_t_11 = 1;

#line 942 "re2.pyx"
        }

#line 942 "re2.pyx"
      }

#line 942 "re2.pyx"
      #if CYTHON_FAST_PYCALL

#line 942 "re2.pyx"
      if (PyFunction_Check(__pyx_t_10)) {

#line 942 "re2.pyx"
        PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_v_original_pattern, __pyx_t_14};

#line 942 "re2.pyx"
        __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 942, __pyx_L9_except_error)

#line 942 "re2.pyx"
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 942 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 942 "re2.pyx"
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 942 "re2.pyx"
      } else

#line 942 "re2.pyx"
      #endif

#line 942 "re2.pyx"
      #if CYTHON_FAST_PYCCALL

#line 942 "re2.pyx"
      if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {

#line 942 "re2.pyx"
        PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_v_original_pattern, __pyx_t_14};

#line 942 "re2.pyx"
        __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 942, __pyx_L9_except_error)

#line 942 "re2.pyx"
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 942 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 942 "re2.pyx"
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 942 "re2.pyx"
      } else

#line 942 "re2.pyx"
      #endif

#line 942 "re2.pyx"
      {

#line 942 "re2.pyx"
        __pyx_t_13 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 942, __pyx_L9_except_error)

#line 942 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_13);

#line 942 "re2.pyx"
        if (__pyx_t_15) {

#line 942 "re2.pyx"
          __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_15); __pyx_t_15 = NULL;

#line 942 "re2.pyx"
        }

#line 942 "re2.pyx"
        __Pyx_INCREF(__pyx_v_original_pattern);

#line 942 "re2.pyx"
        __Pyx_GIVEREF(__pyx_v_original_pattern);

#line 942 "re2.pyx"
        PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_11, __pyx_v_original_pattern);

#line 942 "re2.pyx"
        __Pyx_GIVEREF(__pyx_t_14);

#line 942 "re2.pyx"
        PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_11, __pyx_t_14);

#line 942 "re2.pyx"
        __pyx_t_14 = 0;

#line 942 "re2.pyx"
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_13, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 942, __pyx_L9_except_error)

#line 942 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 942 "re2.pyx"
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 942 "re2.pyx"
      }

#line 942 "re2.pyx"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 942 "re2.pyx"
      __pyx_r = __pyx_t_9;

#line 942 "re2.pyx"
      __pyx_t_9 = 0;

#line 942 "re2.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 942 "re2.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 942 "re2.pyx"
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 942 "re2.pyx"
      goto __pyx_L10_except_return;

#line 942 "re2.pyx"
    }

#line 942 "re2.pyx"
    goto __pyx_L9_except_error;

#line 942 "re2.pyx"
    __pyx_L9_except_error:;

    /* "re2.pyx":925
 * 
 *     cdef object original_pattern = pattern
 *     try:             # <<<<<<<<<<<<<<
 *         pattern = prepare_pattern(original_pattern, flags)
 *     except BackreferencesException:
 */

#line 925 "re2.pyx"
    __Pyx_PyThreadState_assign

#line 925 "re2.pyx"
    __Pyx_XGIVEREF(__pyx_t_5);

#line 925 "re2.pyx"
    __Pyx_XGIVEREF(__pyx_t_6);

#line 925 "re2.pyx"
    __Pyx_XGIVEREF(__pyx_t_7);

#line 925 "re2.pyx"
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);

#line 925 "re2.pyx"
    goto __pyx_L1_error;

#line 925 "re2.pyx"
    __pyx_L10_except_return:;

#line 925 "re2.pyx"
    __Pyx_PyThreadState_assign

#line 925 "re2.pyx"
    __Pyx_XGIVEREF(__pyx_t_5);

#line 925 "re2.pyx"
    __Pyx_XGIVEREF(__pyx_t_6);

#line 925 "re2.pyx"
    __Pyx_XGIVEREF(__pyx_t_7);

#line 925 "re2.pyx"
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);

#line 925 "re2.pyx"
    goto __pyx_L0;

#line 925 "re2.pyx"
    __pyx_L14_try_end:;

#line 925 "re2.pyx"
  }

  /* "re2.pyx":945
 * 
 *     # Set the options given the flags above.
 *     if flags & _I:             # <<<<<<<<<<<<<<
 *         opts.set_case_sensitive(0);
 * 
 */

#line 945 "re2.pyx"
  __pyx_t_3 = ((__pyx_v_flags & __pyx_v_3re2__I) != 0);

#line 945 "re2.pyx"
  if (__pyx_t_3) {

    /* "re2.pyx":946
 *     # Set the options given the flags above.
 *     if flags & _I:
 *         opts.set_case_sensitive(0);             # <<<<<<<<<<<<<<
 * 
 *     opts.set_max_mem(max_mem)
 */

#line 946 "re2.pyx"
    __pyx_v_opts.set_case_sensitive(0);

    /* "re2.pyx":945
 * 
 *     # Set the options given the flags above.
 *     if flags & _I:             # <<<<<<<<<<<<<<
 *         opts.set_case_sensitive(0);
 * 
 */

#line 945 "re2.pyx"
  }

  /* "re2.pyx":948
 *         opts.set_case_sensitive(0);
 * 
 *     opts.set_max_mem(max_mem)             # <<<<<<<<<<<<<<
 *     opts.set_log_errors(0)
 *     try:
 */

#line 948 "re2.pyx"
  __pyx_v_opts.set_max_mem(__pyx_v_max_mem);

  /* "re2.pyx":949
 * 
 *     opts.set_max_mem(max_mem)
 *     opts.set_log_errors(0)             # <<<<<<<<<<<<<<
 *     try:
 *         if flags & re.ASCII:
 */

#line 949 "re2.pyx"
  __pyx_v_opts.set_log_errors(0);

  /* "re2.pyx":950
 *     opts.set_max_mem(max_mem)
 *     opts.set_log_errors(0)
 *     try:             # <<<<<<<<<<<<<<
 *         if flags & re.ASCII:
 *             opts.set_encoding(_re2.EncodingLatin1)
 */

#line 950 "re2.pyx"
  {

#line 950 "re2.pyx"
    __Pyx_PyThreadState_declare

#line 950 "re2.pyx"
    __Pyx_PyThreadState_assign

#line 950 "re2.pyx"
    __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_6, &__pyx_t_5);

#line 950 "re2.pyx"
    __Pyx_XGOTREF(__pyx_t_7);

#line 950 "re2.pyx"
    __Pyx_XGOTREF(__pyx_t_6);

#line 950 "re2.pyx"
    __Pyx_XGOTREF(__pyx_t_5);

#line 950 "re2.pyx"
    /*try:*/ {

      /* "re2.pyx":951
 *     opts.set_log_errors(0)
 *     try:
 *         if flags & re.ASCII:             # <<<<<<<<<<<<<<
 *             opts.set_encoding(_re2.EncodingLatin1)
 *         else:
 */

#line 951 "re2.pyx"
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 951, __pyx_L22_error)

#line 951 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 951 "re2.pyx"
      __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 951, __pyx_L22_error)

#line 951 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 951 "re2.pyx"
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_ASCII); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 951, __pyx_L22_error)

#line 951 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_12);

#line 951 "re2.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 951 "re2.pyx"
      __pyx_t_8 = PyNumber_And(__pyx_t_1, __pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 951, __pyx_L22_error)

#line 951 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 951 "re2.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 951 "re2.pyx"
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 951 "re2.pyx"
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 951, __pyx_L22_error)

#line 951 "re2.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 951 "re2.pyx"
      if (__pyx_t_3) {

        /* "re2.pyx":952
 *     try:
 *         if flags & re.ASCII:
 *             opts.set_encoding(_re2.EncodingLatin1)             # <<<<<<<<<<<<<<
 *         else:
 *             opts.set_encoding(_re2.EncodingUTF8)
 */

#line 952 "re2.pyx"
        __pyx_v_opts.set_encoding(RE2::Options::EncodingLatin1);

        /* "re2.pyx":951
 *     opts.set_log_errors(0)
 *     try:
 *         if flags & re.ASCII:             # <<<<<<<<<<<<<<
 *             opts.set_encoding(_re2.EncodingLatin1)
 *         else:
 */

#line 951 "re2.pyx"
        goto __pyx_L30;

#line 951 "re2.pyx"
      }

      /* "re2.pyx":954
 *             opts.set_encoding(_re2.EncodingLatin1)
 *         else:
 *             opts.set_encoding(_re2.EncodingUTF8)             # <<<<<<<<<<<<<<
 *     except AttributeError:
 *         if flags & re.UNICODE:
 */

#line 954 "re2.pyx"
      /*else*/ {

#line 954 "re2.pyx"
        __pyx_v_opts.set_encoding(RE2::Options::EncodingUTF8);

#line 954 "re2.pyx"
      }

#line 954 "re2.pyx"
      __pyx_L30:;

      /* "re2.pyx":950
 *     opts.set_max_mem(max_mem)
 *     opts.set_log_errors(0)
 *     try:             # <<<<<<<<<<<<<<
 *         if flags & re.ASCII:
 *             opts.set_encoding(_re2.EncodingLatin1)
 */

#line 950 "re2.pyx"
    }

#line 950 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 950 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 950 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 950 "re2.pyx"
    goto __pyx_L29_try_end;

#line 950 "re2.pyx"
    __pyx_L22_error:;

#line 950 "re2.pyx"
    __Pyx_PyThreadState_assign

#line 950 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 950 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 950 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 950 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 950 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 950 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 950 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 950 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "re2.pyx":955
 *         else:
 *             opts.set_encoding(_re2.EncodingUTF8)
 *     except AttributeError:             # <<<<<<<<<<<<<<
 *         if flags & re.UNICODE:
 *             opts.set_encoding(_re2.EncodingUTF8)
 */

#line 955 "re2.pyx"
    __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AttributeError);

#line 955 "re2.pyx"
    if (__pyx_t_11) {

#line 955 "re2.pyx"
      __Pyx_AddTraceback("re2._compile", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 955 "re2.pyx"
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_12, &__pyx_t_1) < 0) __PYX_ERR(0, 955, __pyx_L24_except_error)

#line 955 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 955 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_12);

#line 955 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

      /* "re2.pyx":956
 *             opts.set_encoding(_re2.EncodingUTF8)
 *     except AttributeError:
 *         if flags & re.UNICODE:             # <<<<<<<<<<<<<<
 *             opts.set_encoding(_re2.EncodingUTF8)
 *         else:
 */

#line 956 "re2.pyx"
      __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 956, __pyx_L24_except_error)

#line 956 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 956 "re2.pyx"
      __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 956, __pyx_L24_except_error)

#line 956 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 956 "re2.pyx"
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_UNICODE); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 956, __pyx_L24_except_error)

#line 956 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_13);

#line 956 "re2.pyx"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 956 "re2.pyx"
      __pyx_t_10 = PyNumber_And(__pyx_t_9, __pyx_t_13); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 956, __pyx_L24_except_error)

#line 956 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 956 "re2.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 956 "re2.pyx"
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 956 "re2.pyx"
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 956, __pyx_L24_except_error)

#line 956 "re2.pyx"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 956 "re2.pyx"
      if (__pyx_t_3) {

        /* "re2.pyx":957
 *     except AttributeError:
 *         if flags & re.UNICODE:
 *             opts.set_encoding(_re2.EncodingUTF8)             # <<<<<<<<<<<<<<
 *         else:
 *             opts.set_encoding(_re2.EncodingLatin1)
 */

#line 957 "re2.pyx"
        __pyx_v_opts.set_encoding(RE2::Options::EncodingUTF8);

        /* "re2.pyx":956
 *             opts.set_encoding(_re2.EncodingUTF8)
 *     except AttributeError:
 *         if flags & re.UNICODE:             # <<<<<<<<<<<<<<
 *             opts.set_encoding(_re2.EncodingUTF8)
 *         else:
 */

#line 956 "re2.pyx"
        goto __pyx_L33;

#line 956 "re2.pyx"
      }

      /* "re2.pyx":959
 *             opts.set_encoding(_re2.EncodingUTF8)
 *         else:
 *             opts.set_encoding(_re2.EncodingLatin1)             # <<<<<<<<<<<<<<
 * 
 *     # We use this function to get the proper length of the string.
 */

#line 959 "re2.pyx"
      /*else*/ {

#line 959 "re2.pyx"
        __pyx_v_opts.set_encoding(RE2::Options::EncodingLatin1);

#line 959 "re2.pyx"
      }

#line 959 "re2.pyx"
      __pyx_L33:;

#line 959 "re2.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 959 "re2.pyx"
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 959 "re2.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 959 "re2.pyx"
      goto __pyx_L23_exception_handled;

#line 959 "re2.pyx"
    }

#line 959 "re2.pyx"
    goto __pyx_L24_except_error;

#line 959 "re2.pyx"
    __pyx_L24_except_error:;

    /* "re2.pyx":950
 *     opts.set_max_mem(max_mem)
 *     opts.set_log_errors(0)
 *     try:             # <<<<<<<<<<<<<<
 *         if flags & re.ASCII:
 *             opts.set_encoding(_re2.EncodingLatin1)
 */

#line 950 "re2.pyx"
    __Pyx_PyThreadState_assign

#line 950 "re2.pyx"
    __Pyx_XGIVEREF(__pyx_t_7);

#line 950 "re2.pyx"
    __Pyx_XGIVEREF(__pyx_t_6);

#line 950 "re2.pyx"
    __Pyx_XGIVEREF(__pyx_t_5);

#line 950 "re2.pyx"
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);

#line 950 "re2.pyx"
    goto __pyx_L1_error;

#line 950 "re2.pyx"
    __pyx_L23_exception_handled:;

#line 950 "re2.pyx"
    __Pyx_PyThreadState_assign

#line 950 "re2.pyx"
    __Pyx_XGIVEREF(__pyx_t_7);

#line 950 "re2.pyx"
    __Pyx_XGIVEREF(__pyx_t_6);

#line 950 "re2.pyx"
    __Pyx_XGIVEREF(__pyx_t_5);

#line 950 "re2.pyx"
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);

#line 950 "re2.pyx"
    __pyx_L29_try_end:;

#line 950 "re2.pyx"
  }

  /* "re2.pyx":963
 *     # We use this function to get the proper length of the string.
 * 
 *     pattern = unicode_to_bytestring(pattern, &encoded)             # <<<<<<<<<<<<<<
 *     if pystring_to_bytestring(pattern, &string, &length) == -1:
 *         raise TypeError("first argument must be a string or compiled pattern")
 */

#line 963 "re2.pyx"
  __pyx_t_1 = __pyx_f_3re2_unicode_to_bytestring(__pyx_v_pattern, (&__pyx_v_encoded)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 963, __pyx_L1_error)

#line 963 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 963 "re2.pyx"
  __Pyx_DECREF_SET(__pyx_v_pattern, __pyx_t_1);

#line 963 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":964
 * 
 *     pattern = unicode_to_bytestring(pattern, &encoded)
 *     if pystring_to_bytestring(pattern, &string, &length) == -1:             # <<<<<<<<<<<<<<
 *         raise TypeError("first argument must be a string or compiled pattern")
 * 
 */

#line 964 "re2.pyx"
  __pyx_t_3 = ((__pyx_f_3re2_pystring_to_bytestring(__pyx_v_pattern, (&__pyx_v_string), (&__pyx_v_length)) == -1L) != 0);

#line 964 "re2.pyx"
  if (__pyx_t_3) {

    /* "re2.pyx":965
 *     pattern = unicode_to_bytestring(pattern, &encoded)
 *     if pystring_to_bytestring(pattern, &string, &length) == -1:
 *         raise TypeError("first argument must be a string or compiled pattern")             # <<<<<<<<<<<<<<
 * 
 *     s = new _re2.StringPiece(string, length)
 */

#line 965 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 965, __pyx_L1_error)

#line 965 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 965 "re2.pyx"
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 965 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 965 "re2.pyx"
    __PYX_ERR(0, 965, __pyx_L1_error)

    /* "re2.pyx":964
 * 
 *     pattern = unicode_to_bytestring(pattern, &encoded)
 *     if pystring_to_bytestring(pattern, &string, &length) == -1:             # <<<<<<<<<<<<<<
 *         raise TypeError("first argument must be a string or compiled pattern")
 * 
 */

#line 964 "re2.pyx"
  }

  /* "re2.pyx":967
 *         raise TypeError("first argument must be a string or compiled pattern")
 * 
 *     s = new _re2.StringPiece(string, length)             # <<<<<<<<<<<<<<
 * 
 *     cdef _re2.RE2 *re_pattern
 */

#line 967 "re2.pyx"
  __pyx_v_s = new re2::StringPiece(__pyx_v_string, __pyx_v_length);

  /* "re2.pyx":970
 * 
 *     cdef _re2.RE2 *re_pattern
 *     with nogil:             # <<<<<<<<<<<<<<
 *          re_pattern = new _re2.RE2(s[0], opts)
 * 
 */

#line 970 "re2.pyx"
  {

#line 970 "re2.pyx"
      #ifdef WITH_THREAD

#line 970 "re2.pyx"
      PyThreadState *_save;

#line 970 "re2.pyx"
      Py_UNBLOCK_THREADS

#line 970 "re2.pyx"
      #endif

#line 970 "re2.pyx"
      /*try:*/ {

        /* "re2.pyx":971
 *     cdef _re2.RE2 *re_pattern
 *     with nogil:
 *          re_pattern = new _re2.RE2(s[0], opts)             # <<<<<<<<<<<<<<
 * 
 *     if not re_pattern.ok():
 */

#line 971 "re2.pyx"
        __pyx_v_re_pattern = new re2::RE2((__pyx_v_s[0]), __pyx_v_opts);

#line 971 "re2.pyx"
      }

      /* "re2.pyx":970
 * 
 *     cdef _re2.RE2 *re_pattern
 *     with nogil:             # <<<<<<<<<<<<<<
 *          re_pattern = new _re2.RE2(s[0], opts)
 * 
 */

#line 970 "re2.pyx"
      /*finally:*/ {

#line 970 "re2.pyx"
        /*normal exit:*/{

#line 970 "re2.pyx"
          #ifdef WITH_THREAD

#line 970 "re2.pyx"
          Py_BLOCK_THREADS

#line 970 "re2.pyx"
          #endif

#line 970 "re2.pyx"
          goto __pyx_L37;

#line 970 "re2.pyx"
        }

#line 970 "re2.pyx"
        __pyx_L37:;

#line 970 "re2.pyx"
      }

#line 970 "re2.pyx"
  }

  /* "re2.pyx":973
 *          re_pattern = new _re2.RE2(s[0], opts)
 * 
 *     if not re_pattern.ok():             # <<<<<<<<<<<<<<
 *         # Something went wrong with the compilation.
 *         del s
 */

#line 973 "re2.pyx"
  __pyx_t_3 = ((!(__pyx_v_re_pattern->ok() != 0)) != 0);

#line 973 "re2.pyx"
  if (__pyx_t_3) {

    /* "re2.pyx":975
 *     if not re_pattern.ok():
 *         # Something went wrong with the compilation.
 *         del s             # <<<<<<<<<<<<<<
 *         error_msg = cpp_to_pystring(re_pattern.error())
 *         error_code = re_pattern.error_code()
 */

#line 975 "re2.pyx"
    delete __pyx_v_s;

    /* "re2.pyx":976
 *         # Something went wrong with the compilation.
 *         del s
 *         error_msg = cpp_to_pystring(re_pattern.error())             # <<<<<<<<<<<<<<
 *         error_code = re_pattern.error_code()
 *         del re_pattern
 */

#line 976 "re2.pyx"
    __pyx_t_1 = __pyx_f_3re2_cpp_to_pystring(__pyx_v_re_pattern->error()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 976, __pyx_L1_error)

#line 976 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 976 "re2.pyx"
    __pyx_v_error_msg = __pyx_t_1;

#line 976 "re2.pyx"
    __pyx_t_1 = 0;

    /* "re2.pyx":977
 *         del s
 *         error_msg = cpp_to_pystring(re_pattern.error())
 *         error_code = re_pattern.error_code()             # <<<<<<<<<<<<<<
 *         del re_pattern
 *         if current_notification == <int>FALLBACK_EXCEPTION:
 */

#line 977 "re2.pyx"
    __pyx_v_error_code = __pyx_v_re_pattern->error_code();

    /* "re2.pyx":978
 *         error_msg = cpp_to_pystring(re_pattern.error())
 *         error_code = re_pattern.error_code()
 *         del re_pattern             # <<<<<<<<<<<<<<
 *         if current_notification == <int>FALLBACK_EXCEPTION:
 *             # Raise an exception regardless of the type of error.
 */

#line 978 "re2.pyx"
    delete __pyx_v_re_pattern;

    /* "re2.pyx":979
 *         error_code = re_pattern.error_code()
 *         del re_pattern
 *         if current_notification == <int>FALLBACK_EXCEPTION:             # <<<<<<<<<<<<<<
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 */

#line 979 "re2.pyx"
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FALLBACK_EXCEPTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 979, __pyx_L1_error)

#line 979 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 979 "re2.pyx"
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 979, __pyx_L1_error)

#line 979 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 979 "re2.pyx"
    __pyx_t_3 = ((__pyx_v_3re2_current_notification == ((int)__pyx_t_11)) != 0);

#line 979 "re2.pyx"
    if (__pyx_t_3) {

      /* "re2.pyx":981
 *         if current_notification == <int>FALLBACK_EXCEPTION:
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)             # <<<<<<<<<<<<<<
 *         elif error_code not in (_re2.ErrorBadPerlOp, _re2.ErrorRepeatSize,
 *                                 _re2.ErrorBadEscape):
 */

#line 981 "re2.pyx"
      __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_RegexError); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 981, __pyx_L1_error)

#line 981 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_12);

#line 981 "re2.pyx"
      __pyx_t_8 = NULL;

#line 981 "re2.pyx"
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {

#line 981 "re2.pyx"
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_12);

#line 981 "re2.pyx"
        if (likely(__pyx_t_8)) {

#line 981 "re2.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);

#line 981 "re2.pyx"
          __Pyx_INCREF(__pyx_t_8);

#line 981 "re2.pyx"
          __Pyx_INCREF(function);

#line 981 "re2.pyx"
          __Pyx_DECREF_SET(__pyx_t_12, function);

#line 981 "re2.pyx"
        }

#line 981 "re2.pyx"
      }

#line 981 "re2.pyx"
      if (!__pyx_t_8) {

#line 981 "re2.pyx"
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_v_error_msg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 981, __pyx_L1_error)

#line 981 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 981 "re2.pyx"
      } else {

#line 981 "re2.pyx"
        #if CYTHON_FAST_PYCALL

#line 981 "re2.pyx"
        if (PyFunction_Check(__pyx_t_12)) {

#line 981 "re2.pyx"
          PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_error_msg};

#line 981 "re2.pyx"
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 981, __pyx_L1_error)

#line 981 "re2.pyx"
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 981 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 981 "re2.pyx"
        } else

#line 981 "re2.pyx"
        #endif

#line 981 "re2.pyx"
        #if CYTHON_FAST_PYCCALL

#line 981 "re2.pyx"
        if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {

#line 981 "re2.pyx"
          PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_error_msg};

#line 981 "re2.pyx"
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 981, __pyx_L1_error)

#line 981 "re2.pyx"
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 981 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 981 "re2.pyx"
        } else

#line 981 "re2.pyx"
        #endif

#line 981 "re2.pyx"
        {

#line 981 "re2.pyx"
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 981, __pyx_L1_error)

#line 981 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_10);

#line 981 "re2.pyx"
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;

#line 981 "re2.pyx"
          __Pyx_INCREF(__pyx_v_error_msg);

#line 981 "re2.pyx"
          __Pyx_GIVEREF(__pyx_v_error_msg);

#line 981 "re2.pyx"
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_error_msg);

#line 981 "re2.pyx"
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 981, __pyx_L1_error)

#line 981 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 981 "re2.pyx"
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 981 "re2.pyx"
        }

#line 981 "re2.pyx"
      }

#line 981 "re2.pyx"
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 981 "re2.pyx"
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 981 "re2.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 981 "re2.pyx"
      __PYX_ERR(0, 981, __pyx_L1_error)

      /* "re2.pyx":979
 *         error_code = re_pattern.error_code()
 *         del re_pattern
 *         if current_notification == <int>FALLBACK_EXCEPTION:             # <<<<<<<<<<<<<<
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 */

#line 979 "re2.pyx"
    }

    /* "re2.pyx":982
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 *         elif error_code not in (_re2.ErrorBadPerlOp, _re2.ErrorRepeatSize,             # <<<<<<<<<<<<<<
 *                                 _re2.ErrorBadEscape):
 *             # Raise an error because these will not be fixed by using the
 */

#line 982 "re2.pyx"
    switch (__pyx_v_error_code) {

#line 982 "re2.pyx"
      case RE2::ErrorBadPerlOp:

#line 982 "re2.pyx"
      case RE2::ErrorRepeatSize:

      /* "re2.pyx":983
 *             raise RegexError(error_msg)
 *         elif error_code not in (_re2.ErrorBadPerlOp, _re2.ErrorRepeatSize,
 *                                 _re2.ErrorBadEscape):             # <<<<<<<<<<<<<<
 *             # Raise an error because these will not be fixed by using the
 *             # ``re`` module.
 */

#line 983 "re2.pyx"
      case RE2::ErrorBadEscape:

      /* "re2.pyx":982
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 *         elif error_code not in (_re2.ErrorBadPerlOp, _re2.ErrorRepeatSize,             # <<<<<<<<<<<<<<
 *                                 _re2.ErrorBadEscape):
 *             # Raise an error because these will not be fixed by using the
 */

#line 982 "re2.pyx"
      __pyx_t_3 = 0;

#line 982 "re2.pyx"
      break;

#line 982 "re2.pyx"
      default:

#line 982 "re2.pyx"
      __pyx_t_3 = 1;

#line 982 "re2.pyx"
      break;

#line 982 "re2.pyx"
    }

#line 982 "re2.pyx"
    __pyx_t_2 = (__pyx_t_3 != 0);

#line 982 "re2.pyx"
    if (__pyx_t_2) {

      /* "re2.pyx":986
 *             # Raise an error because these will not be fixed by using the
 *             # ``re`` module.
 *             raise RegexError(error_msg)             # <<<<<<<<<<<<<<
 *         elif current_notification == <int>FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 */

#line 986 "re2.pyx"
      __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_RegexError); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 986, __pyx_L1_error)

#line 986 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_12);

#line 986 "re2.pyx"
      __pyx_t_10 = NULL;

#line 986 "re2.pyx"
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {

#line 986 "re2.pyx"
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_12);

#line 986 "re2.pyx"
        if (likely(__pyx_t_10)) {

#line 986 "re2.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);

#line 986 "re2.pyx"
          __Pyx_INCREF(__pyx_t_10);

#line 986 "re2.pyx"
          __Pyx_INCREF(function);

#line 986 "re2.pyx"
          __Pyx_DECREF_SET(__pyx_t_12, function);

#line 986 "re2.pyx"
        }

#line 986 "re2.pyx"
      }

#line 986 "re2.pyx"
      if (!__pyx_t_10) {

#line 986 "re2.pyx"
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_v_error_msg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 986, __pyx_L1_error)

#line 986 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 986 "re2.pyx"
      } else {

#line 986 "re2.pyx"
        #if CYTHON_FAST_PYCALL

#line 986 "re2.pyx"
        if (PyFunction_Check(__pyx_t_12)) {

#line 986 "re2.pyx"
          PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_error_msg};

#line 986 "re2.pyx"
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 986, __pyx_L1_error)

#line 986 "re2.pyx"
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 986 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 986 "re2.pyx"
        } else

#line 986 "re2.pyx"
        #endif

#line 986 "re2.pyx"
        #if CYTHON_FAST_PYCCALL

#line 986 "re2.pyx"
        if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {

#line 986 "re2.pyx"
          PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_v_error_msg};

#line 986 "re2.pyx"
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 986, __pyx_L1_error)

#line 986 "re2.pyx"
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 986 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 986 "re2.pyx"
        } else

#line 986 "re2.pyx"
        #endif

#line 986 "re2.pyx"
        {

#line 986 "re2.pyx"
          __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 986, __pyx_L1_error)

#line 986 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_8);

#line 986 "re2.pyx"
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_10); __pyx_t_10 = NULL;

#line 986 "re2.pyx"
          __Pyx_INCREF(__pyx_v_error_msg);

#line 986 "re2.pyx"
          __Pyx_GIVEREF(__pyx_v_error_msg);

#line 986 "re2.pyx"
          PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_error_msg);

#line 986 "re2.pyx"
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 986, __pyx_L1_error)

#line 986 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 986 "re2.pyx"
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 986 "re2.pyx"
        }

#line 986 "re2.pyx"
      }

#line 986 "re2.pyx"
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 986 "re2.pyx"
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 986 "re2.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 986 "re2.pyx"
      __PYX_ERR(0, 986, __pyx_L1_error)

      /* "re2.pyx":982
 *             # Raise an exception regardless of the type of error.
 *             raise RegexError(error_msg)
 *         elif error_code not in (_re2.ErrorBadPerlOp, _re2.ErrorRepeatSize,             # <<<<<<<<<<<<<<
 *                                 _re2.ErrorBadEscape):
 *             # Raise an error because these will not be fixed by using the
 */

#line 982 "re2.pyx"
    }

    /* "re2.pyx":987
 *             # ``re`` module.
 *             raise RegexError(error_msg)
 *         elif current_notification == <int>FALLBACK_WARNING:             # <<<<<<<<<<<<<<
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         return re.compile(original_pattern, flags)
 */

#line 987 "re2.pyx"
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FALLBACK_WARNING); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 987, __pyx_L1_error)

#line 987 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 987 "re2.pyx"
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 987, __pyx_L1_error)

#line 987 "re2.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 987 "re2.pyx"
    __pyx_t_2 = ((__pyx_v_3re2_current_notification == ((int)__pyx_t_11)) != 0);

#line 987 "re2.pyx"
    if (__pyx_t_2) {

      /* "re2.pyx":988
 *             raise RegexError(error_msg)
 *         elif current_notification == <int>FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)             # <<<<<<<<<<<<<<
 *         return re.compile(original_pattern, flags)
 * 
 */

#line 988 "re2.pyx"
      __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 988, __pyx_L1_error)

#line 988 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_12);

#line 988 "re2.pyx"
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_warn); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 988, __pyx_L1_error)

#line 988 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 988 "re2.pyx"
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 988 "re2.pyx"
      __pyx_t_12 = __Pyx_PyString_Format(__pyx_kp_s_WARNING_Using_re_module_Reason_s, __pyx_v_error_msg); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 988, __pyx_L1_error)

#line 988 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_12);

#line 988 "re2.pyx"
      __pyx_t_10 = NULL;

#line 988 "re2.pyx"
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {

#line 988 "re2.pyx"
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);

#line 988 "re2.pyx"
        if (likely(__pyx_t_10)) {

#line 988 "re2.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);

#line 988 "re2.pyx"
          __Pyx_INCREF(__pyx_t_10);

#line 988 "re2.pyx"
          __Pyx_INCREF(function);

#line 988 "re2.pyx"
          __Pyx_DECREF_SET(__pyx_t_8, function);

#line 988 "re2.pyx"
        }

#line 988 "re2.pyx"
      }

#line 988 "re2.pyx"
      if (!__pyx_t_10) {

#line 988 "re2.pyx"
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 988, __pyx_L1_error)

#line 988 "re2.pyx"
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 988 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 988 "re2.pyx"
      } else {

#line 988 "re2.pyx"
        #if CYTHON_FAST_PYCALL

#line 988 "re2.pyx"
        if (PyFunction_Check(__pyx_t_8)) {

#line 988 "re2.pyx"
          PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_12};

#line 988 "re2.pyx"
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 988, __pyx_L1_error)

#line 988 "re2.pyx"
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 988 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 988 "re2.pyx"
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 988 "re2.pyx"
        } else

#line 988 "re2.pyx"
        #endif

#line 988 "re2.pyx"
        #if CYTHON_FAST_PYCCALL

#line 988 "re2.pyx"
        if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {

#line 988 "re2.pyx"
          PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_12};

#line 988 "re2.pyx"
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 988, __pyx_L1_error)

#line 988 "re2.pyx"
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 988 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 988 "re2.pyx"
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 988 "re2.pyx"
        } else

#line 988 "re2.pyx"
        #endif

#line 988 "re2.pyx"
        {

#line 988 "re2.pyx"
          __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 988, __pyx_L1_error)

#line 988 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_13);

#line 988 "re2.pyx"
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_10); __pyx_t_10 = NULL;

#line 988 "re2.pyx"
          __Pyx_GIVEREF(__pyx_t_12);

#line 988 "re2.pyx"
          PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_t_12);

#line 988 "re2.pyx"
          __pyx_t_12 = 0;

#line 988 "re2.pyx"
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 988, __pyx_L1_error)

#line 988 "re2.pyx"
          __Pyx_GOTREF(__pyx_t_1);

#line 988 "re2.pyx"
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 988 "re2.pyx"
        }

#line 988 "re2.pyx"
      }

#line 988 "re2.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 988 "re2.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "re2.pyx":987
 *             # ``re`` module.
 *             raise RegexError(error_msg)
 *         elif current_notification == <int>FALLBACK_WARNING:             # <<<<<<<<<<<<<<
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         return re.compile(original_pattern, flags)
 */

#line 987 "re2.pyx"
    }

    /* "re2.pyx":989
 *         elif current_notification == <int>FALLBACK_WARNING:
 *             warnings.warn("WARNING: Using re module. Reason: %s" % error_msg)
 *         return re.compile(original_pattern, flags)             # <<<<<<<<<<<<<<
 * 
 *     cdef Pattern pypattern = Pattern()
 */

#line 989 "re2.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 989 "re2.pyx"
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 989, __pyx_L1_error)

#line 989 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 989 "re2.pyx"
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 989, __pyx_L1_error)

#line 989 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_13);

#line 989 "re2.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 989 "re2.pyx"
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 989, __pyx_L1_error)

#line 989 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 989 "re2.pyx"
    __pyx_t_12 = NULL;

#line 989 "re2.pyx"
    __pyx_t_11 = 0;

#line 989 "re2.pyx"
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {

#line 989 "re2.pyx"
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_13);

#line 989 "re2.pyx"
      if (likely(__pyx_t_12)) {

#line 989 "re2.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);

#line 989 "re2.pyx"
        __Pyx_INCREF(__pyx_t_12);

#line 989 "re2.pyx"
        __Pyx_INCREF(function);

#line 989 "re2.pyx"
        __Pyx_DECREF_SET(__pyx_t_13, function);

#line 989 "re2.pyx"
        __pyx_t_11 = 1;

#line 989 "re2.pyx"
      }

#line 989 "re2.pyx"
    }

#line 989 "re2.pyx"
    #if CYTHON_FAST_PYCALL

#line 989 "re2.pyx"
    if (PyFunction_Check(__pyx_t_13)) {

#line 989 "re2.pyx"
      PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_v_original_pattern, __pyx_t_8};

#line 989 "re2.pyx"
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)

#line 989 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 989 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 989 "re2.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 989 "re2.pyx"
    } else

#line 989 "re2.pyx"
    #endif

#line 989 "re2.pyx"
    #if CYTHON_FAST_PYCCALL

#line 989 "re2.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {

#line 989 "re2.pyx"
      PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_v_original_pattern, __pyx_t_8};

#line 989 "re2.pyx"
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)

#line 989 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 989 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 989 "re2.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 989 "re2.pyx"
    } else

#line 989 "re2.pyx"
    #endif

#line 989 "re2.pyx"
    {

#line 989 "re2.pyx"
      __pyx_t_10 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 989, __pyx_L1_error)

#line 989 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 989 "re2.pyx"
      if (__pyx_t_12) {

#line 989 "re2.pyx"
        __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_12); __pyx_t_12 = NULL;

#line 989 "re2.pyx"
      }

#line 989 "re2.pyx"
      __Pyx_INCREF(__pyx_v_original_pattern);

#line 989 "re2.pyx"
      __Pyx_GIVEREF(__pyx_v_original_pattern);

#line 989 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_11, __pyx_v_original_pattern);

#line 989 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_8);

#line 989 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_11, __pyx_t_8);

#line 989 "re2.pyx"
      __pyx_t_8 = 0;

#line 989 "re2.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)

#line 989 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 989 "re2.pyx"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 989 "re2.pyx"
    }

#line 989 "re2.pyx"
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 989 "re2.pyx"
    __pyx_r = __pyx_t_1;

#line 989 "re2.pyx"
    __pyx_t_1 = 0;

#line 989 "re2.pyx"
    goto __pyx_L0;

    /* "re2.pyx":973
 *          re_pattern = new _re2.RE2(s[0], opts)
 * 
 *     if not re_pattern.ok():             # <<<<<<<<<<<<<<
 *         # Something went wrong with the compilation.
 *         del s
 */

#line 973 "re2.pyx"
  }

  /* "re2.pyx":991
 *         return re.compile(original_pattern, flags)
 * 
 *     cdef Pattern pypattern = Pattern()             # <<<<<<<<<<<<<<
 *     pypattern.pattern = original_pattern
 *     pypattern.re_pattern = re_pattern
 */

#line 991 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3re2_Pattern), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 991, __pyx_L1_error)

#line 991 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 991 "re2.pyx"
  __pyx_v_pypattern = ((struct __pyx_obj_3re2_Pattern *)__pyx_t_1);

#line 991 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":992
 * 
 *     cdef Pattern pypattern = Pattern()
 *     pypattern.pattern = original_pattern             # <<<<<<<<<<<<<<
 *     pypattern.re_pattern = re_pattern
 *     pypattern.ngroups = re_pattern.NumberOfCapturingGroups()
 */

#line 992 "re2.pyx"
  __Pyx_INCREF(__pyx_v_original_pattern);

#line 992 "re2.pyx"
  __Pyx_GIVEREF(__pyx_v_original_pattern);

#line 992 "re2.pyx"
  __Pyx_GOTREF(__pyx_v_pypattern->pattern);

#line 992 "re2.pyx"
  __Pyx_DECREF(__pyx_v_pypattern->pattern);

#line 992 "re2.pyx"
  __pyx_v_pypattern->pattern = __pyx_v_original_pattern;

  /* "re2.pyx":993
 *     cdef Pattern pypattern = Pattern()
 *     pypattern.pattern = original_pattern
 *     pypattern.re_pattern = re_pattern             # <<<<<<<<<<<<<<
 *     pypattern.ngroups = re_pattern.NumberOfCapturingGroups()
 *     pypattern.encoded = <bint>encoded
 */

#line 993 "re2.pyx"
  __pyx_v_pypattern->re_pattern = __pyx_v_re_pattern;

  /* "re2.pyx":994
 *     pypattern.pattern = original_pattern
 *     pypattern.re_pattern = re_pattern
 *     pypattern.ngroups = re_pattern.NumberOfCapturingGroups()             # <<<<<<<<<<<<<<
 *     pypattern.encoded = <bint>encoded
 *     pypattern._flags = flags
 */

#line 994 "re2.pyx"
  __pyx_v_pypattern->ngroups = __pyx_v_re_pattern->NumberOfCapturingGroups();

  /* "re2.pyx":995
 *     pypattern.re_pattern = re_pattern
 *     pypattern.ngroups = re_pattern.NumberOfCapturingGroups()
 *     pypattern.encoded = <bint>encoded             # <<<<<<<<<<<<<<
 *     pypattern._flags = flags
 *     del s
 */

#line 995 "re2.pyx"
  __pyx_v_pypattern->encoded = (__pyx_v_encoded != 0);

  /* "re2.pyx":996
 *     pypattern.ngroups = re_pattern.NumberOfCapturingGroups()
 *     pypattern.encoded = <bint>encoded
 *     pypattern._flags = flags             # <<<<<<<<<<<<<<
 *     del s
 *     return pypattern
 */

#line 996 "re2.pyx"
  __pyx_v_pypattern->_flags = __pyx_v_flags;

  /* "re2.pyx":997
 *     pypattern.encoded = <bint>encoded
 *     pypattern._flags = flags
 *     del s             # <<<<<<<<<<<<<<
 *     return pypattern
 * 
 */

#line 997 "re2.pyx"
  delete __pyx_v_s;

  /* "re2.pyx":998
 *     pypattern._flags = flags
 *     del s
 *     return pypattern             # <<<<<<<<<<<<<<
 * 
 * def search(pattern, string, int flags=0):
 */

#line 998 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 998 "re2.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_pypattern));

#line 998 "re2.pyx"
  __pyx_r = ((PyObject *)__pyx_v_pypattern);

#line 998 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":908
 * 
 * 
 * def _compile(pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     """
 *     Compile a regular expression pattern, returning a pattern object.
 */

#line 908 "re2.pyx"


#line 908 "re2.pyx"
  /* function exit code */

#line 908 "re2.pyx"
  __pyx_L1_error:;

#line 908 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 908 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 908 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 908 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 908 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_12);

#line 908 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_13);

#line 908 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_14);

#line 908 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_15);

#line 908 "re2.pyx"
  __Pyx_AddTraceback("re2._compile", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 908 "re2.pyx"
  __pyx_r = NULL;

#line 908 "re2.pyx"
  __pyx_L0:;

#line 908 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_original_pattern);

#line 908 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_error_msg);

#line 908 "re2.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_pypattern);

#line 908 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_pattern);

#line 908 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 908 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 908 "re2.pyx"
  return __pyx_r;

#line 908 "re2.pyx"
}

/* "re2.pyx":1000
 *     return pypattern
 * 
 * def search(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Scan through string looking for a match to the pattern, returning
 */

#line 1000 "re2.pyx"


#line 1000 "re2.pyx"
/* Python wrapper */

#line 1000 "re2.pyx"
static PyObject *__pyx_pw_3re2_9search(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1000 "re2.pyx"
static char __pyx_doc_3re2_8search[] = "File: re2.pyx (starting at line 1000)\n\n    Scan through string looking for a match to the pattern, returning\n    a match object or none if no match was found.\n    ";
static PyMethodDef __pyx_mdef_3re2_9search = 
#line 1000 "re2.pyx"
{"search", (PyCFunction)__pyx_pw_3re2_9search, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_8search};

#line 1000 "re2.pyx"
static PyObject *__pyx_pw_3re2_9search(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0
#line 1000 "re2.pyx"
;
  PyObject *__pyx_v_string = 0
#line 1000 "re2.pyx"
;
  int __pyx_v_flags
#line 1000 "re2.pyx"
;

#line 1000 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 1000 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 1000 "re2.pyx"
  __Pyx_RefNannySetupContext("search (wrapper)", 0);

#line 1000 "re2.pyx"
  {

#line 1000 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_string,&__pyx_n_s_flags,0};

#line 1000 "re2.pyx"
    PyObject* values[3] = {0,0,0};

#line 1000 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1000 "re2.pyx"
      Py_ssize_t kw_args;

#line 1000 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1000 "re2.pyx"
      switch (pos_args) {
        case  3: 
#line 1000 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1000 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1000 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1000 "re2.pyx"
        case  0: break;
        default: 
#line 1000 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1000 "re2.pyx"
      }

#line 1000 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1000 "re2.pyx"
      switch (pos_args) {

#line 1000 "re2.pyx"
        case  0:

#line 1000 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else 
#line 1000 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1000 "re2.pyx"
        case  1:

#line 1000 "re2.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;

#line 1000 "re2.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("search", 0, 2, 3, 1); 
#line 1000 "re2.pyx"
__PYX_ERR(0, 1000, __pyx_L3_error)

#line 1000 "re2.pyx"
        }

#line 1000 "re2.pyx"
        case  2:

#line 1000 "re2.pyx"
        if (kw_args > 0) {

#line 1000 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);

#line 1000 "re2.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 1000 "re2.pyx"
        }

#line 1000 "re2.pyx"
      }

#line 1000 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 1000 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "search") < 0)) __PYX_ERR(0, 1000, __pyx_L3_error)

#line 1000 "re2.pyx"
      }

#line 1000 "re2.pyx"
    } else {

#line 1000 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 1000 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1000 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1000 "re2.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1000 "re2.pyx"
        break;
        default: 
#line 1000 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1000 "re2.pyx"
      }

#line 1000 "re2.pyx"
    }

#line 1000 "re2.pyx"
    __pyx_v_pattern = values[0];

#line 1000 "re2.pyx"
    __pyx_v_string = values[1];

#line 1000 "re2.pyx"
    if (values[2]) {

#line 1000 "re2.pyx"
      __pyx_v_flags = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1000, __pyx_L3_error)

#line 1000 "re2.pyx"
    } else {

#line 1000 "re2.pyx"
      __pyx_v_flags = ((int)0);

#line 1000 "re2.pyx"
    }

#line 1000 "re2.pyx"
  }

#line 1000 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1000 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("search", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1000 "re2.pyx"
__PYX_ERR(0, 1000, __pyx_L3_error)

#line 1000 "re2.pyx"
  __pyx_L3_error:;

#line 1000 "re2.pyx"
  __Pyx_AddTraceback("re2.search", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1000 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1000 "re2.pyx"
  return NULL;

#line 1000 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1000 "re2.pyx"
__pyx_pf_3re2_8search(__pyx_self, __pyx_v_pattern, __pyx_v_string, __pyx_v_flags);

#line 1000 "re2.pyx"


#line 1000 "re2.pyx"
  /* function exit code */

#line 1000 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1000 "re2.pyx"
  return __pyx_r;

#line 1000 "re2.pyx"
}

#line 1000 "re2.pyx"


#line 1000 "re2.pyx"
static PyObject *__pyx_pf_3re2_8search(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags) {

#line 1000 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 1000 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 1000 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 1000 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 1000 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 1000 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 1000 "re2.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 1000 "re2.pyx"
  int __pyx_t_6;

#line 1000 "re2.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 1000 "re2.pyx"
  __Pyx_RefNannySetupContext("search", 0);

  /* "re2.pyx":1005
 *     a match object or none if no match was found.
 *     """
 *     return compile(pattern, flags).search(string)             # <<<<<<<<<<<<<<
 * 
 * def match(pattern, string, int flags=0):
 */

#line 1005 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1005 "re2.pyx"
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1005, __pyx_L1_error)

#line 1005 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1005 "re2.pyx"
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1005, __pyx_L1_error)

#line 1005 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 1005 "re2.pyx"
  __pyx_t_5 = NULL;

#line 1005 "re2.pyx"
  __pyx_t_6 = 0;

#line 1005 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 1005 "re2.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);

#line 1005 "re2.pyx"
    if (likely(__pyx_t_5)) {

#line 1005 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 1005 "re2.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 1005 "re2.pyx"
      __Pyx_INCREF(function);

#line 1005 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 1005 "re2.pyx"
      __pyx_t_6 = 1;

#line 1005 "re2.pyx"
    }

#line 1005 "re2.pyx"
  }

#line 1005 "re2.pyx"
  #if CYTHON_FAST_PYCALL

#line 1005 "re2.pyx"
  if (PyFunction_Check(__pyx_t_3)) {

#line 1005 "re2.pyx"
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};

#line 1005 "re2.pyx"
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1005, __pyx_L1_error)

#line 1005 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1005 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1005 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1005 "re2.pyx"
  } else

#line 1005 "re2.pyx"
  #endif

#line 1005 "re2.pyx"
  #if CYTHON_FAST_PYCCALL

#line 1005 "re2.pyx"
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 1005 "re2.pyx"
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};

#line 1005 "re2.pyx"
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1005, __pyx_L1_error)

#line 1005 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1005 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1005 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1005 "re2.pyx"
  } else

#line 1005 "re2.pyx"
  #endif

#line 1005 "re2.pyx"
  {

#line 1005 "re2.pyx"
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1005, __pyx_L1_error)

#line 1005 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 1005 "re2.pyx"
    if (__pyx_t_5) {

#line 1005 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 1005 "re2.pyx"
    }

#line 1005 "re2.pyx"
    __Pyx_INCREF(__pyx_v_pattern);

#line 1005 "re2.pyx"
    __Pyx_GIVEREF(__pyx_v_pattern);

#line 1005 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_pattern);

#line 1005 "re2.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 1005 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);

#line 1005 "re2.pyx"
    __pyx_t_4 = 0;

#line 1005 "re2.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1005, __pyx_L1_error)

#line 1005 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1005 "re2.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 1005 "re2.pyx"
  }

#line 1005 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1005 "re2.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_search); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1005, __pyx_L1_error)

#line 1005 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1005 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1005 "re2.pyx"
  __pyx_t_2 = NULL;

#line 1005 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 1005 "re2.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 1005 "re2.pyx"
    if (likely(__pyx_t_2)) {

#line 1005 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 1005 "re2.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 1005 "re2.pyx"
      __Pyx_INCREF(function);

#line 1005 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 1005 "re2.pyx"
    }

#line 1005 "re2.pyx"
  }

#line 1005 "re2.pyx"
  if (!__pyx_t_2) {

#line 1005 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_string); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1005, __pyx_L1_error)

#line 1005 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1005 "re2.pyx"
  } else {

#line 1005 "re2.pyx"
    #if CYTHON_FAST_PYCALL

#line 1005 "re2.pyx"
    if (PyFunction_Check(__pyx_t_3)) {

#line 1005 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_string};

#line 1005 "re2.pyx"
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1005, __pyx_L1_error)

#line 1005 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1005 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 1005 "re2.pyx"
    } else

#line 1005 "re2.pyx"
    #endif

#line 1005 "re2.pyx"
    #if CYTHON_FAST_PYCCALL

#line 1005 "re2.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 1005 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_string};

#line 1005 "re2.pyx"
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1005, __pyx_L1_error)

#line 1005 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1005 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 1005 "re2.pyx"
    } else

#line 1005 "re2.pyx"
    #endif

#line 1005 "re2.pyx"
    {

#line 1005 "re2.pyx"
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1005, __pyx_L1_error)

#line 1005 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 1005 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;

#line 1005 "re2.pyx"
      __Pyx_INCREF(__pyx_v_string);

#line 1005 "re2.pyx"
      __Pyx_GIVEREF(__pyx_v_string);

#line 1005 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_string);

#line 1005 "re2.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1005, __pyx_L1_error)

#line 1005 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 1005 "re2.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 1005 "re2.pyx"
    }

#line 1005 "re2.pyx"
  }

#line 1005 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1005 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 1005 "re2.pyx"
  __pyx_t_1 = 0;

#line 1005 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":1000
 *     return pypattern
 * 
 * def search(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Scan through string looking for a match to the pattern, returning
 */

#line 1000 "re2.pyx"


#line 1000 "re2.pyx"
  /* function exit code */

#line 1000 "re2.pyx"
  __pyx_L1_error:;

#line 1000 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1000 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1000 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1000 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 1000 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 1000 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 1000 "re2.pyx"
  __Pyx_AddTraceback("re2.search", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1000 "re2.pyx"
  __pyx_r = NULL;

#line 1000 "re2.pyx"
  __pyx_L0:;

#line 1000 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1000 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1000 "re2.pyx"
  return __pyx_r;

#line 1000 "re2.pyx"
}

/* "re2.pyx":1007
 *     return compile(pattern, flags).search(string)
 * 
 * def match(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Try to apply the pattern at the start of the string, returning
 */

#line 1007 "re2.pyx"


#line 1007 "re2.pyx"
/* Python wrapper */

#line 1007 "re2.pyx"
static PyObject *__pyx_pw_3re2_11match(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1007 "re2.pyx"
static char __pyx_doc_3re2_10match[] = "File: re2.pyx (starting at line 1007)\n\n    Try to apply the pattern at the start of the string, returning\n    a match object, or None if no match was found.\n    ";
static PyMethodDef __pyx_mdef_3re2_11match = 
#line 1007 "re2.pyx"
{"match", (PyCFunction)__pyx_pw_3re2_11match, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_10match};

#line 1007 "re2.pyx"
static PyObject *__pyx_pw_3re2_11match(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0
#line 1007 "re2.pyx"
;
  PyObject *__pyx_v_string = 0
#line 1007 "re2.pyx"
;
  int __pyx_v_flags
#line 1007 "re2.pyx"
;

#line 1007 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 1007 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 1007 "re2.pyx"
  __Pyx_RefNannySetupContext("match (wrapper)", 0);

#line 1007 "re2.pyx"
  {

#line 1007 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_string,&__pyx_n_s_flags,0};

#line 1007 "re2.pyx"
    PyObject* values[3] = {0,0,0};

#line 1007 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1007 "re2.pyx"
      Py_ssize_t kw_args;

#line 1007 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1007 "re2.pyx"
      switch (pos_args) {
        case  3: 
#line 1007 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1007 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1007 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1007 "re2.pyx"
        case  0: break;
        default: 
#line 1007 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1007 "re2.pyx"
      }

#line 1007 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1007 "re2.pyx"
      switch (pos_args) {

#line 1007 "re2.pyx"
        case  0:

#line 1007 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else 
#line 1007 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1007 "re2.pyx"
        case  1:

#line 1007 "re2.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;

#line 1007 "re2.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("match", 0, 2, 3, 1); 
#line 1007 "re2.pyx"
__PYX_ERR(0, 1007, __pyx_L3_error)

#line 1007 "re2.pyx"
        }

#line 1007 "re2.pyx"
        case  2:

#line 1007 "re2.pyx"
        if (kw_args > 0) {

#line 1007 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);

#line 1007 "re2.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 1007 "re2.pyx"
        }

#line 1007 "re2.pyx"
      }

#line 1007 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 1007 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "match") < 0)) __PYX_ERR(0, 1007, __pyx_L3_error)

#line 1007 "re2.pyx"
      }

#line 1007 "re2.pyx"
    } else {

#line 1007 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 1007 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1007 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1007 "re2.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1007 "re2.pyx"
        break;
        default: 
#line 1007 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1007 "re2.pyx"
      }

#line 1007 "re2.pyx"
    }

#line 1007 "re2.pyx"
    __pyx_v_pattern = values[0];

#line 1007 "re2.pyx"
    __pyx_v_string = values[1];

#line 1007 "re2.pyx"
    if (values[2]) {

#line 1007 "re2.pyx"
      __pyx_v_flags = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1007, __pyx_L3_error)

#line 1007 "re2.pyx"
    } else {

#line 1007 "re2.pyx"
      __pyx_v_flags = ((int)0);

#line 1007 "re2.pyx"
    }

#line 1007 "re2.pyx"
  }

#line 1007 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1007 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("match", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1007 "re2.pyx"
__PYX_ERR(0, 1007, __pyx_L3_error)

#line 1007 "re2.pyx"
  __pyx_L3_error:;

#line 1007 "re2.pyx"
  __Pyx_AddTraceback("re2.match", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1007 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1007 "re2.pyx"
  return NULL;

#line 1007 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1007 "re2.pyx"
__pyx_pf_3re2_10match(__pyx_self, __pyx_v_pattern, __pyx_v_string, __pyx_v_flags);

#line 1007 "re2.pyx"


#line 1007 "re2.pyx"
  /* function exit code */

#line 1007 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1007 "re2.pyx"
  return __pyx_r;

#line 1007 "re2.pyx"
}

#line 1007 "re2.pyx"


#line 1007 "re2.pyx"
static PyObject *__pyx_pf_3re2_10match(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags) {

#line 1007 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 1007 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 1007 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 1007 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 1007 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 1007 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 1007 "re2.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 1007 "re2.pyx"
  int __pyx_t_6;

#line 1007 "re2.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 1007 "re2.pyx"
  __Pyx_RefNannySetupContext("match", 0);

  /* "re2.pyx":1012
 *     a match object, or None if no match was found.
 *     """
 *     return compile(pattern, flags).match(string)             # <<<<<<<<<<<<<<
 * 
 * def finditer(pattern, string, int flags=0):
 */

#line 1012 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1012 "re2.pyx"
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1012, __pyx_L1_error)

#line 1012 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1012 "re2.pyx"
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1012, __pyx_L1_error)

#line 1012 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 1012 "re2.pyx"
  __pyx_t_5 = NULL;

#line 1012 "re2.pyx"
  __pyx_t_6 = 0;

#line 1012 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 1012 "re2.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);

#line 1012 "re2.pyx"
    if (likely(__pyx_t_5)) {

#line 1012 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 1012 "re2.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 1012 "re2.pyx"
      __Pyx_INCREF(function);

#line 1012 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 1012 "re2.pyx"
      __pyx_t_6 = 1;

#line 1012 "re2.pyx"
    }

#line 1012 "re2.pyx"
  }

#line 1012 "re2.pyx"
  #if CYTHON_FAST_PYCALL

#line 1012 "re2.pyx"
  if (PyFunction_Check(__pyx_t_3)) {

#line 1012 "re2.pyx"
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};

#line 1012 "re2.pyx"
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)

#line 1012 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1012 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1012 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1012 "re2.pyx"
  } else

#line 1012 "re2.pyx"
  #endif

#line 1012 "re2.pyx"
  #if CYTHON_FAST_PYCCALL

#line 1012 "re2.pyx"
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 1012 "re2.pyx"
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};

#line 1012 "re2.pyx"
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)

#line 1012 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1012 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1012 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1012 "re2.pyx"
  } else

#line 1012 "re2.pyx"
  #endif

#line 1012 "re2.pyx"
  {

#line 1012 "re2.pyx"
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1012, __pyx_L1_error)

#line 1012 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 1012 "re2.pyx"
    if (__pyx_t_5) {

#line 1012 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 1012 "re2.pyx"
    }

#line 1012 "re2.pyx"
    __Pyx_INCREF(__pyx_v_pattern);

#line 1012 "re2.pyx"
    __Pyx_GIVEREF(__pyx_v_pattern);

#line 1012 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_pattern);

#line 1012 "re2.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 1012 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);

#line 1012 "re2.pyx"
    __pyx_t_4 = 0;

#line 1012 "re2.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)

#line 1012 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1012 "re2.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 1012 "re2.pyx"
  }

#line 1012 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1012 "re2.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_match); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1012, __pyx_L1_error)

#line 1012 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1012 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1012 "re2.pyx"
  __pyx_t_2 = NULL;

#line 1012 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 1012 "re2.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 1012 "re2.pyx"
    if (likely(__pyx_t_2)) {

#line 1012 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 1012 "re2.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 1012 "re2.pyx"
      __Pyx_INCREF(function);

#line 1012 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 1012 "re2.pyx"
    }

#line 1012 "re2.pyx"
  }

#line 1012 "re2.pyx"
  if (!__pyx_t_2) {

#line 1012 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_string); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)

#line 1012 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1012 "re2.pyx"
  } else {

#line 1012 "re2.pyx"
    #if CYTHON_FAST_PYCALL

#line 1012 "re2.pyx"
    if (PyFunction_Check(__pyx_t_3)) {

#line 1012 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_string};

#line 1012 "re2.pyx"
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)

#line 1012 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1012 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 1012 "re2.pyx"
    } else

#line 1012 "re2.pyx"
    #endif

#line 1012 "re2.pyx"
    #if CYTHON_FAST_PYCCALL

#line 1012 "re2.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 1012 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_string};

#line 1012 "re2.pyx"
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)

#line 1012 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1012 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 1012 "re2.pyx"
    } else

#line 1012 "re2.pyx"
    #endif

#line 1012 "re2.pyx"
    {

#line 1012 "re2.pyx"
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1012, __pyx_L1_error)

#line 1012 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 1012 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;

#line 1012 "re2.pyx"
      __Pyx_INCREF(__pyx_v_string);

#line 1012 "re2.pyx"
      __Pyx_GIVEREF(__pyx_v_string);

#line 1012 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_string);

#line 1012 "re2.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)

#line 1012 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 1012 "re2.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 1012 "re2.pyx"
    }

#line 1012 "re2.pyx"
  }

#line 1012 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1012 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 1012 "re2.pyx"
  __pyx_t_1 = 0;

#line 1012 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":1007
 *     return compile(pattern, flags).search(string)
 * 
 * def match(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Try to apply the pattern at the start of the string, returning
 */

#line 1007 "re2.pyx"


#line 1007 "re2.pyx"
  /* function exit code */

#line 1007 "re2.pyx"
  __pyx_L1_error:;

#line 1007 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1007 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1007 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1007 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 1007 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 1007 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 1007 "re2.pyx"
  __Pyx_AddTraceback("re2.match", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1007 "re2.pyx"
  __pyx_r = NULL;

#line 1007 "re2.pyx"
  __pyx_L0:;

#line 1007 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1007 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1007 "re2.pyx"
  return __pyx_r;

#line 1007 "re2.pyx"
}

/* "re2.pyx":1014
 *     return compile(pattern, flags).match(string)
 * 
 * def finditer(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return an list of all non-overlapping matches in the
 */

#line 1014 "re2.pyx"


#line 1014 "re2.pyx"
/* Python wrapper */

#line 1014 "re2.pyx"
static PyObject *__pyx_pw_3re2_13finditer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1014 "re2.pyx"
static char __pyx_doc_3re2_12finditer[] = "File: re2.pyx (starting at line 1014)\n\n    Return an list of all non-overlapping matches in the\n    string.  For each match, the iterator returns a match object.\n\n    Empty matches are included in the result.\n    ";
static PyMethodDef __pyx_mdef_3re2_13finditer = 
#line 1014 "re2.pyx"
{"finditer", (PyCFunction)__pyx_pw_3re2_13finditer, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_12finditer};

#line 1014 "re2.pyx"
static PyObject *__pyx_pw_3re2_13finditer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0
#line 1014 "re2.pyx"
;
  PyObject *__pyx_v_string = 0
#line 1014 "re2.pyx"
;
  int __pyx_v_flags
#line 1014 "re2.pyx"
;

#line 1014 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 1014 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 1014 "re2.pyx"
  __Pyx_RefNannySetupContext("finditer (wrapper)", 0);

#line 1014 "re2.pyx"
  {

#line 1014 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_string,&__pyx_n_s_flags,0};

#line 1014 "re2.pyx"
    PyObject* values[3] = {0,0,0};

#line 1014 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1014 "re2.pyx"
      Py_ssize_t kw_args;

#line 1014 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1014 "re2.pyx"
      switch (pos_args) {
        case  3: 
#line 1014 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1014 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1014 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1014 "re2.pyx"
        case  0: break;
        default: 
#line 1014 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1014 "re2.pyx"
      }

#line 1014 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1014 "re2.pyx"
      switch (pos_args) {

#line 1014 "re2.pyx"
        case  0:

#line 1014 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else 
#line 1014 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1014 "re2.pyx"
        case  1:

#line 1014 "re2.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;

#line 1014 "re2.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("finditer", 0, 2, 3, 1); 
#line 1014 "re2.pyx"
__PYX_ERR(0, 1014, __pyx_L3_error)

#line 1014 "re2.pyx"
        }

#line 1014 "re2.pyx"
        case  2:

#line 1014 "re2.pyx"
        if (kw_args > 0) {

#line 1014 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);

#line 1014 "re2.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 1014 "re2.pyx"
        }

#line 1014 "re2.pyx"
      }

#line 1014 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 1014 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "finditer") < 0)) __PYX_ERR(0, 1014, __pyx_L3_error)

#line 1014 "re2.pyx"
      }

#line 1014 "re2.pyx"
    } else {

#line 1014 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 1014 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1014 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1014 "re2.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1014 "re2.pyx"
        break;
        default: 
#line 1014 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1014 "re2.pyx"
      }

#line 1014 "re2.pyx"
    }

#line 1014 "re2.pyx"
    __pyx_v_pattern = values[0];

#line 1014 "re2.pyx"
    __pyx_v_string = values[1];

#line 1014 "re2.pyx"
    if (values[2]) {

#line 1014 "re2.pyx"
      __pyx_v_flags = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1014, __pyx_L3_error)

#line 1014 "re2.pyx"
    } else {

#line 1014 "re2.pyx"
      __pyx_v_flags = ((int)0);

#line 1014 "re2.pyx"
    }

#line 1014 "re2.pyx"
  }

#line 1014 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1014 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("finditer", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1014 "re2.pyx"
__PYX_ERR(0, 1014, __pyx_L3_error)

#line 1014 "re2.pyx"
  __pyx_L3_error:;

#line 1014 "re2.pyx"
  __Pyx_AddTraceback("re2.finditer", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1014 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1014 "re2.pyx"
  return NULL;

#line 1014 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1014 "re2.pyx"
__pyx_pf_3re2_12finditer(__pyx_self, __pyx_v_pattern, __pyx_v_string, __pyx_v_flags);

#line 1014 "re2.pyx"


#line 1014 "re2.pyx"
  /* function exit code */

#line 1014 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1014 "re2.pyx"
  return __pyx_r;

#line 1014 "re2.pyx"
}

#line 1014 "re2.pyx"


#line 1014 "re2.pyx"
static PyObject *__pyx_pf_3re2_12finditer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags) {

#line 1014 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 1014 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 1014 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 1014 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 1014 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 1014 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 1014 "re2.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 1014 "re2.pyx"
  int __pyx_t_6;

#line 1014 "re2.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 1014 "re2.pyx"
  __Pyx_RefNannySetupContext("finditer", 0);

  /* "re2.pyx":1021
 *     Empty matches are included in the result.
 *     """
 *     return compile(pattern, flags).finditer(string)             # <<<<<<<<<<<<<<
 * 
 * def findall(pattern, string, int flags=0):
 */

#line 1021 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1021 "re2.pyx"
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1021, __pyx_L1_error)

#line 1021 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1021 "re2.pyx"
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1021, __pyx_L1_error)

#line 1021 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 1021 "re2.pyx"
  __pyx_t_5 = NULL;

#line 1021 "re2.pyx"
  __pyx_t_6 = 0;

#line 1021 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 1021 "re2.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);

#line 1021 "re2.pyx"
    if (likely(__pyx_t_5)) {

#line 1021 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 1021 "re2.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 1021 "re2.pyx"
      __Pyx_INCREF(function);

#line 1021 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 1021 "re2.pyx"
      __pyx_t_6 = 1;

#line 1021 "re2.pyx"
    }

#line 1021 "re2.pyx"
  }

#line 1021 "re2.pyx"
  #if CYTHON_FAST_PYCALL

#line 1021 "re2.pyx"
  if (PyFunction_Check(__pyx_t_3)) {

#line 1021 "re2.pyx"
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};

#line 1021 "re2.pyx"
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1021, __pyx_L1_error)

#line 1021 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1021 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1021 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1021 "re2.pyx"
  } else

#line 1021 "re2.pyx"
  #endif

#line 1021 "re2.pyx"
  #if CYTHON_FAST_PYCCALL

#line 1021 "re2.pyx"
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 1021 "re2.pyx"
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};

#line 1021 "re2.pyx"
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1021, __pyx_L1_error)

#line 1021 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1021 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1021 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1021 "re2.pyx"
  } else

#line 1021 "re2.pyx"
  #endif

#line 1021 "re2.pyx"
  {

#line 1021 "re2.pyx"
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1021, __pyx_L1_error)

#line 1021 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 1021 "re2.pyx"
    if (__pyx_t_5) {

#line 1021 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 1021 "re2.pyx"
    }

#line 1021 "re2.pyx"
    __Pyx_INCREF(__pyx_v_pattern);

#line 1021 "re2.pyx"
    __Pyx_GIVEREF(__pyx_v_pattern);

#line 1021 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_pattern);

#line 1021 "re2.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 1021 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);

#line 1021 "re2.pyx"
    __pyx_t_4 = 0;

#line 1021 "re2.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1021, __pyx_L1_error)

#line 1021 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1021 "re2.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 1021 "re2.pyx"
  }

#line 1021 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1021 "re2.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_finditer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1021, __pyx_L1_error)

#line 1021 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1021 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1021 "re2.pyx"
  __pyx_t_2 = NULL;

#line 1021 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 1021 "re2.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 1021 "re2.pyx"
    if (likely(__pyx_t_2)) {

#line 1021 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 1021 "re2.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 1021 "re2.pyx"
      __Pyx_INCREF(function);

#line 1021 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 1021 "re2.pyx"
    }

#line 1021 "re2.pyx"
  }

#line 1021 "re2.pyx"
  if (!__pyx_t_2) {

#line 1021 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_string); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1021, __pyx_L1_error)

#line 1021 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1021 "re2.pyx"
  } else {

#line 1021 "re2.pyx"
    #if CYTHON_FAST_PYCALL

#line 1021 "re2.pyx"
    if (PyFunction_Check(__pyx_t_3)) {

#line 1021 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_string};

#line 1021 "re2.pyx"
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1021, __pyx_L1_error)

#line 1021 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1021 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 1021 "re2.pyx"
    } else

#line 1021 "re2.pyx"
    #endif

#line 1021 "re2.pyx"
    #if CYTHON_FAST_PYCCALL

#line 1021 "re2.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 1021 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_string};

#line 1021 "re2.pyx"
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1021, __pyx_L1_error)

#line 1021 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1021 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 1021 "re2.pyx"
    } else

#line 1021 "re2.pyx"
    #endif

#line 1021 "re2.pyx"
    {

#line 1021 "re2.pyx"
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1021, __pyx_L1_error)

#line 1021 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 1021 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;

#line 1021 "re2.pyx"
      __Pyx_INCREF(__pyx_v_string);

#line 1021 "re2.pyx"
      __Pyx_GIVEREF(__pyx_v_string);

#line 1021 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_string);

#line 1021 "re2.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1021, __pyx_L1_error)

#line 1021 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 1021 "re2.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 1021 "re2.pyx"
    }

#line 1021 "re2.pyx"
  }

#line 1021 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1021 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 1021 "re2.pyx"
  __pyx_t_1 = 0;

#line 1021 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":1014
 *     return compile(pattern, flags).match(string)
 * 
 * def finditer(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return an list of all non-overlapping matches in the
 */

#line 1014 "re2.pyx"


#line 1014 "re2.pyx"
  /* function exit code */

#line 1014 "re2.pyx"
  __pyx_L1_error:;

#line 1014 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1014 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1014 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1014 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 1014 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 1014 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 1014 "re2.pyx"
  __Pyx_AddTraceback("re2.finditer", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1014 "re2.pyx"
  __pyx_r = NULL;

#line 1014 "re2.pyx"
  __pyx_L0:;

#line 1014 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1014 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1014 "re2.pyx"
  return __pyx_r;

#line 1014 "re2.pyx"
}

/* "re2.pyx":1023
 *     return compile(pattern, flags).finditer(string)
 * 
 * def findall(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return an list of all non-overlapping matches in the
 */

#line 1023 "re2.pyx"


#line 1023 "re2.pyx"
/* Python wrapper */

#line 1023 "re2.pyx"
static PyObject *__pyx_pw_3re2_15findall(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1023 "re2.pyx"
static char __pyx_doc_3re2_14findall[] = "File: re2.pyx (starting at line 1023)\n\n    Return an list of all non-overlapping matches in the\n    string.  For each match, the iterator returns a match object.\n\n    Empty matches are included in the result.\n    ";
static PyMethodDef __pyx_mdef_3re2_15findall = 
#line 1023 "re2.pyx"
{"findall", (PyCFunction)__pyx_pw_3re2_15findall, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_14findall};

#line 1023 "re2.pyx"
static PyObject *__pyx_pw_3re2_15findall(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0
#line 1023 "re2.pyx"
;
  PyObject *__pyx_v_string = 0
#line 1023 "re2.pyx"
;
  int __pyx_v_flags
#line 1023 "re2.pyx"
;

#line 1023 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 1023 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 1023 "re2.pyx"
  __Pyx_RefNannySetupContext("findall (wrapper)", 0);

#line 1023 "re2.pyx"
  {

#line 1023 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_string,&__pyx_n_s_flags,0};

#line 1023 "re2.pyx"
    PyObject* values[3] = {0,0,0};

#line 1023 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1023 "re2.pyx"
      Py_ssize_t kw_args;

#line 1023 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1023 "re2.pyx"
      switch (pos_args) {
        case  3: 
#line 1023 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1023 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1023 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1023 "re2.pyx"
        case  0: break;
        default: 
#line 1023 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1023 "re2.pyx"
      }

#line 1023 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1023 "re2.pyx"
      switch (pos_args) {

#line 1023 "re2.pyx"
        case  0:

#line 1023 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else 
#line 1023 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1023 "re2.pyx"
        case  1:

#line 1023 "re2.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;

#line 1023 "re2.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("findall", 0, 2, 3, 1); 
#line 1023 "re2.pyx"
__PYX_ERR(0, 1023, __pyx_L3_error)

#line 1023 "re2.pyx"
        }

#line 1023 "re2.pyx"
        case  2:

#line 1023 "re2.pyx"
        if (kw_args > 0) {

#line 1023 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags);

#line 1023 "re2.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 1023 "re2.pyx"
        }

#line 1023 "re2.pyx"
      }

#line 1023 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 1023 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "findall") < 0)) __PYX_ERR(0, 1023, __pyx_L3_error)

#line 1023 "re2.pyx"
      }

#line 1023 "re2.pyx"
    } else {

#line 1023 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 1023 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1023 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1023 "re2.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1023 "re2.pyx"
        break;
        default: 
#line 1023 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1023 "re2.pyx"
      }

#line 1023 "re2.pyx"
    }

#line 1023 "re2.pyx"
    __pyx_v_pattern = values[0];

#line 1023 "re2.pyx"
    __pyx_v_string = values[1];

#line 1023 "re2.pyx"
    if (values[2]) {

#line 1023 "re2.pyx"
      __pyx_v_flags = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1023, __pyx_L3_error)

#line 1023 "re2.pyx"
    } else {

#line 1023 "re2.pyx"
      __pyx_v_flags = ((int)0);

#line 1023 "re2.pyx"
    }

#line 1023 "re2.pyx"
  }

#line 1023 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1023 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findall", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1023 "re2.pyx"
__PYX_ERR(0, 1023, __pyx_L3_error)

#line 1023 "re2.pyx"
  __pyx_L3_error:;

#line 1023 "re2.pyx"
  __Pyx_AddTraceback("re2.findall", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1023 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1023 "re2.pyx"
  return NULL;

#line 1023 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1023 "re2.pyx"
__pyx_pf_3re2_14findall(__pyx_self, __pyx_v_pattern, __pyx_v_string, __pyx_v_flags);

#line 1023 "re2.pyx"


#line 1023 "re2.pyx"
  /* function exit code */

#line 1023 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1023 "re2.pyx"
  return __pyx_r;

#line 1023 "re2.pyx"
}

#line 1023 "re2.pyx"


#line 1023 "re2.pyx"
static PyObject *__pyx_pf_3re2_14findall(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_flags) {

#line 1023 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 1023 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 1023 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 1023 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 1023 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 1023 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 1023 "re2.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 1023 "re2.pyx"
  int __pyx_t_6;

#line 1023 "re2.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 1023 "re2.pyx"
  __Pyx_RefNannySetupContext("findall", 0);

  /* "re2.pyx":1030
 *     Empty matches are included in the result.
 *     """
 *     return compile(pattern, flags).findall(string)             # <<<<<<<<<<<<<<
 * 
 * def split(pattern, string, int maxsplit=0):
 */

#line 1030 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1030 "re2.pyx"
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1030, __pyx_L1_error)

#line 1030 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1030 "re2.pyx"
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1030, __pyx_L1_error)

#line 1030 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 1030 "re2.pyx"
  __pyx_t_5 = NULL;

#line 1030 "re2.pyx"
  __pyx_t_6 = 0;

#line 1030 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 1030 "re2.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);

#line 1030 "re2.pyx"
    if (likely(__pyx_t_5)) {

#line 1030 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 1030 "re2.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 1030 "re2.pyx"
      __Pyx_INCREF(function);

#line 1030 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 1030 "re2.pyx"
      __pyx_t_6 = 1;

#line 1030 "re2.pyx"
    }

#line 1030 "re2.pyx"
  }

#line 1030 "re2.pyx"
  #if CYTHON_FAST_PYCALL

#line 1030 "re2.pyx"
  if (PyFunction_Check(__pyx_t_3)) {

#line 1030 "re2.pyx"
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};

#line 1030 "re2.pyx"
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1030, __pyx_L1_error)

#line 1030 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1030 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1030 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1030 "re2.pyx"
  } else

#line 1030 "re2.pyx"
  #endif

#line 1030 "re2.pyx"
  #if CYTHON_FAST_PYCCALL

#line 1030 "re2.pyx"
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 1030 "re2.pyx"
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pattern, __pyx_t_4};

#line 1030 "re2.pyx"
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1030, __pyx_L1_error)

#line 1030 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1030 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1030 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1030 "re2.pyx"
  } else

#line 1030 "re2.pyx"
  #endif

#line 1030 "re2.pyx"
  {

#line 1030 "re2.pyx"
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1030, __pyx_L1_error)

#line 1030 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 1030 "re2.pyx"
    if (__pyx_t_5) {

#line 1030 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 1030 "re2.pyx"
    }

#line 1030 "re2.pyx"
    __Pyx_INCREF(__pyx_v_pattern);

#line 1030 "re2.pyx"
    __Pyx_GIVEREF(__pyx_v_pattern);

#line 1030 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_pattern);

#line 1030 "re2.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 1030 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);

#line 1030 "re2.pyx"
    __pyx_t_4 = 0;

#line 1030 "re2.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1030, __pyx_L1_error)

#line 1030 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1030 "re2.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 1030 "re2.pyx"
  }

#line 1030 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1030 "re2.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_findall); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1030, __pyx_L1_error)

#line 1030 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1030 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1030 "re2.pyx"
  __pyx_t_2 = NULL;

#line 1030 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 1030 "re2.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 1030 "re2.pyx"
    if (likely(__pyx_t_2)) {

#line 1030 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 1030 "re2.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 1030 "re2.pyx"
      __Pyx_INCREF(function);

#line 1030 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 1030 "re2.pyx"
    }

#line 1030 "re2.pyx"
  }

#line 1030 "re2.pyx"
  if (!__pyx_t_2) {

#line 1030 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_string); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1030, __pyx_L1_error)

#line 1030 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1030 "re2.pyx"
  } else {

#line 1030 "re2.pyx"
    #if CYTHON_FAST_PYCALL

#line 1030 "re2.pyx"
    if (PyFunction_Check(__pyx_t_3)) {

#line 1030 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_string};

#line 1030 "re2.pyx"
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1030, __pyx_L1_error)

#line 1030 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1030 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 1030 "re2.pyx"
    } else

#line 1030 "re2.pyx"
    #endif

#line 1030 "re2.pyx"
    #if CYTHON_FAST_PYCCALL

#line 1030 "re2.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 1030 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_string};

#line 1030 "re2.pyx"
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1030, __pyx_L1_error)

#line 1030 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1030 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 1030 "re2.pyx"
    } else

#line 1030 "re2.pyx"
    #endif

#line 1030 "re2.pyx"
    {

#line 1030 "re2.pyx"
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1030, __pyx_L1_error)

#line 1030 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 1030 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;

#line 1030 "re2.pyx"
      __Pyx_INCREF(__pyx_v_string);

#line 1030 "re2.pyx"
      __Pyx_GIVEREF(__pyx_v_string);

#line 1030 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_string);

#line 1030 "re2.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1030, __pyx_L1_error)

#line 1030 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 1030 "re2.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 1030 "re2.pyx"
    }

#line 1030 "re2.pyx"
  }

#line 1030 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1030 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 1030 "re2.pyx"
  __pyx_t_1 = 0;

#line 1030 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":1023
 *     return compile(pattern, flags).finditer(string)
 * 
 * def findall(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return an list of all non-overlapping matches in the
 */

#line 1023 "re2.pyx"


#line 1023 "re2.pyx"
  /* function exit code */

#line 1023 "re2.pyx"
  __pyx_L1_error:;

#line 1023 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1023 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1023 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1023 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 1023 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 1023 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 1023 "re2.pyx"
  __Pyx_AddTraceback("re2.findall", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1023 "re2.pyx"
  __pyx_r = NULL;

#line 1023 "re2.pyx"
  __pyx_L0:;

#line 1023 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1023 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1023 "re2.pyx"
  return __pyx_r;

#line 1023 "re2.pyx"
}

/* "re2.pyx":1032
 *     return compile(pattern, flags).findall(string)
 * 
 * def split(pattern, string, int maxsplit=0):             # <<<<<<<<<<<<<<
 *     """
 *     Split the source string by the occurrences of the pattern,
 */

#line 1032 "re2.pyx"


#line 1032 "re2.pyx"
/* Python wrapper */

#line 1032 "re2.pyx"
static PyObject *__pyx_pw_3re2_17split(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1032 "re2.pyx"
static char __pyx_doc_3re2_16split[] = "File: re2.pyx (starting at line 1032)\n\n    Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings.\n    ";
static PyMethodDef __pyx_mdef_3re2_17split = 
#line 1032 "re2.pyx"
{"split", (PyCFunction)__pyx_pw_3re2_17split, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_16split};

#line 1032 "re2.pyx"
static PyObject *__pyx_pw_3re2_17split(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0
#line 1032 "re2.pyx"
;
  PyObject *__pyx_v_string = 0
#line 1032 "re2.pyx"
;
  int __pyx_v_maxsplit
#line 1032 "re2.pyx"
;

#line 1032 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 1032 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 1032 "re2.pyx"
  __Pyx_RefNannySetupContext("split (wrapper)", 0);

#line 1032 "re2.pyx"
  {

#line 1032 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_string,&__pyx_n_s_maxsplit,0};

#line 1032 "re2.pyx"
    PyObject* values[3] = {0,0,0};

#line 1032 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1032 "re2.pyx"
      Py_ssize_t kw_args;

#line 1032 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1032 "re2.pyx"
      switch (pos_args) {
        case  3: 
#line 1032 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1032 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1032 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1032 "re2.pyx"
        case  0: break;
        default: 
#line 1032 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1032 "re2.pyx"
      }

#line 1032 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1032 "re2.pyx"
      switch (pos_args) {

#line 1032 "re2.pyx"
        case  0:

#line 1032 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else 
#line 1032 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1032 "re2.pyx"
        case  1:

#line 1032 "re2.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;

#line 1032 "re2.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("split", 0, 2, 3, 1); 
#line 1032 "re2.pyx"
__PYX_ERR(0, 1032, __pyx_L3_error)

#line 1032 "re2.pyx"
        }

#line 1032 "re2.pyx"
        case  2:

#line 1032 "re2.pyx"
        if (kw_args > 0) {

#line 1032 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxsplit);

#line 1032 "re2.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 1032 "re2.pyx"
        }

#line 1032 "re2.pyx"
      }

#line 1032 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 1032 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "split") < 0)) __PYX_ERR(0, 1032, __pyx_L3_error)

#line 1032 "re2.pyx"
      }

#line 1032 "re2.pyx"
    } else {

#line 1032 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 1032 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1032 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1032 "re2.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1032 "re2.pyx"
        break;
        default: 
#line 1032 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1032 "re2.pyx"
      }

#line 1032 "re2.pyx"
    }

#line 1032 "re2.pyx"
    __pyx_v_pattern = values[0];

#line 1032 "re2.pyx"
    __pyx_v_string = values[1];

#line 1032 "re2.pyx"
    if (values[2]) {

#line 1032 "re2.pyx"
      __pyx_v_maxsplit = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_maxsplit == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1032, __pyx_L3_error)

#line 1032 "re2.pyx"
    } else {

#line 1032 "re2.pyx"
      __pyx_v_maxsplit = ((int)0);

#line 1032 "re2.pyx"
    }

#line 1032 "re2.pyx"
  }

#line 1032 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1032 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("split", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1032 "re2.pyx"
__PYX_ERR(0, 1032, __pyx_L3_error)

#line 1032 "re2.pyx"
  __pyx_L3_error:;

#line 1032 "re2.pyx"
  __Pyx_AddTraceback("re2.split", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1032 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1032 "re2.pyx"
  return NULL;

#line 1032 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1032 "re2.pyx"
__pyx_pf_3re2_16split(__pyx_self, __pyx_v_pattern, __pyx_v_string, __pyx_v_maxsplit);

#line 1032 "re2.pyx"


#line 1032 "re2.pyx"
  /* function exit code */

#line 1032 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1032 "re2.pyx"
  return __pyx_r;

#line 1032 "re2.pyx"
}

#line 1032 "re2.pyx"


#line 1032 "re2.pyx"
static PyObject *__pyx_pf_3re2_16split(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_string, int __pyx_v_maxsplit) {

#line 1032 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 1032 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 1032 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 1032 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 1032 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 1032 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 1032 "re2.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 1032 "re2.pyx"
  int __pyx_t_6;

#line 1032 "re2.pyx"
  __Pyx_RefNannySetupContext("split", 0);

  /* "re2.pyx":1037
 *     returning a list containing the resulting substrings.
 *     """
 *     return compile(pattern).split(string, maxsplit)             # <<<<<<<<<<<<<<
 * 
 * def sub(pattern, repl, string, int count=0):
 */

#line 1037 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1037 "re2.pyx"
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1037, __pyx_L1_error)

#line 1037 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1037 "re2.pyx"
  __pyx_t_4 = NULL;

#line 1037 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 1037 "re2.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 1037 "re2.pyx"
    if (likely(__pyx_t_4)) {

#line 1037 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 1037 "re2.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 1037 "re2.pyx"
      __Pyx_INCREF(function);

#line 1037 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 1037 "re2.pyx"
    }

#line 1037 "re2.pyx"
  }

#line 1037 "re2.pyx"
  if (!__pyx_t_4) {

#line 1037 "re2.pyx"
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_pattern); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1037, __pyx_L1_error)

#line 1037 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1037 "re2.pyx"
  } else {

#line 1037 "re2.pyx"
    #if CYTHON_FAST_PYCALL

#line 1037 "re2.pyx"
    if (PyFunction_Check(__pyx_t_3)) {

#line 1037 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_pattern};

#line 1037 "re2.pyx"
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1037, __pyx_L1_error)

#line 1037 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1037 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 1037 "re2.pyx"
    } else

#line 1037 "re2.pyx"
    #endif

#line 1037 "re2.pyx"
    #if CYTHON_FAST_PYCCALL

#line 1037 "re2.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 1037 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_pattern};

#line 1037 "re2.pyx"
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1037, __pyx_L1_error)

#line 1037 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1037 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 1037 "re2.pyx"
    } else

#line 1037 "re2.pyx"
    #endif

#line 1037 "re2.pyx"
    {

#line 1037 "re2.pyx"
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1037, __pyx_L1_error)

#line 1037 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 1037 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 1037 "re2.pyx"
      __Pyx_INCREF(__pyx_v_pattern);

#line 1037 "re2.pyx"
      __Pyx_GIVEREF(__pyx_v_pattern);

#line 1037 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_pattern);

#line 1037 "re2.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1037, __pyx_L1_error)

#line 1037 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 1037 "re2.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1037 "re2.pyx"
    }

#line 1037 "re2.pyx"
  }

#line 1037 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1037 "re2.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1037, __pyx_L1_error)

#line 1037 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1037 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1037 "re2.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_maxsplit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1037, __pyx_L1_error)

#line 1037 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1037 "re2.pyx"
  __pyx_t_5 = NULL;

#line 1037 "re2.pyx"
  __pyx_t_6 = 0;

#line 1037 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 1037 "re2.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);

#line 1037 "re2.pyx"
    if (likely(__pyx_t_5)) {

#line 1037 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 1037 "re2.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 1037 "re2.pyx"
      __Pyx_INCREF(function);

#line 1037 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 1037 "re2.pyx"
      __pyx_t_6 = 1;

#line 1037 "re2.pyx"
    }

#line 1037 "re2.pyx"
  }

#line 1037 "re2.pyx"
  #if CYTHON_FAST_PYCALL

#line 1037 "re2.pyx"
  if (PyFunction_Check(__pyx_t_3)) {

#line 1037 "re2.pyx"
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_string, __pyx_t_2};

#line 1037 "re2.pyx"
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1037, __pyx_L1_error)

#line 1037 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1037 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1037 "re2.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1037 "re2.pyx"
  } else

#line 1037 "re2.pyx"
  #endif

#line 1037 "re2.pyx"
  #if CYTHON_FAST_PYCCALL

#line 1037 "re2.pyx"
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 1037 "re2.pyx"
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_string, __pyx_t_2};

#line 1037 "re2.pyx"
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1037, __pyx_L1_error)

#line 1037 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1037 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1037 "re2.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1037 "re2.pyx"
  } else

#line 1037 "re2.pyx"
  #endif

#line 1037 "re2.pyx"
  {

#line 1037 "re2.pyx"
    __pyx_t_4 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1037, __pyx_L1_error)

#line 1037 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 1037 "re2.pyx"
    if (__pyx_t_5) {

#line 1037 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 1037 "re2.pyx"
    }

#line 1037 "re2.pyx"
    __Pyx_INCREF(__pyx_v_string);

#line 1037 "re2.pyx"
    __Pyx_GIVEREF(__pyx_v_string);

#line 1037 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_string);

#line 1037 "re2.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 1037 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_t_2);

#line 1037 "re2.pyx"
    __pyx_t_2 = 0;

#line 1037 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1037, __pyx_L1_error)

#line 1037 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1037 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1037 "re2.pyx"
  }

#line 1037 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1037 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 1037 "re2.pyx"
  __pyx_t_1 = 0;

#line 1037 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":1032
 *     return compile(pattern, flags).findall(string)
 * 
 * def split(pattern, string, int maxsplit=0):             # <<<<<<<<<<<<<<
 *     """
 *     Split the source string by the occurrences of the pattern,
 */

#line 1032 "re2.pyx"


#line 1032 "re2.pyx"
  /* function exit code */

#line 1032 "re2.pyx"
  __pyx_L1_error:;

#line 1032 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1032 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1032 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1032 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 1032 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 1032 "re2.pyx"
  __Pyx_AddTraceback("re2.split", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1032 "re2.pyx"
  __pyx_r = NULL;

#line 1032 "re2.pyx"
  __pyx_L0:;

#line 1032 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1032 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1032 "re2.pyx"
  return __pyx_r;

#line 1032 "re2.pyx"
}

/* "re2.pyx":1039
 *     return compile(pattern).split(string, maxsplit)
 * 
 * def sub(pattern, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return the string obtained by replacing the leftmost
 */

#line 1039 "re2.pyx"


#line 1039 "re2.pyx"
/* Python wrapper */

#line 1039 "re2.pyx"
static PyObject *__pyx_pw_3re2_19sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1039 "re2.pyx"
static char __pyx_doc_3re2_18sub[] = "File: re2.pyx (starting at line 1039)\n\n    Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the match object and must return\n    a replacement string to be used.\n    ";
static PyMethodDef __pyx_mdef_3re2_19sub = 
#line 1039 "re2.pyx"
{"sub", (PyCFunction)__pyx_pw_3re2_19sub, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_18sub};

#line 1039 "re2.pyx"
static PyObject *__pyx_pw_3re2_19sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0
#line 1039 "re2.pyx"
;
  PyObject *__pyx_v_repl = 0
#line 1039 "re2.pyx"
;
  PyObject *__pyx_v_string = 0
#line 1039 "re2.pyx"
;
  int __pyx_v_count
#line 1039 "re2.pyx"
;

#line 1039 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 1039 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 1039 "re2.pyx"
  __Pyx_RefNannySetupContext("sub (wrapper)", 0);

#line 1039 "re2.pyx"
  {

#line 1039 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_repl,&__pyx_n_s_string,&__pyx_n_s_count,0};

#line 1039 "re2.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 1039 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1039 "re2.pyx"
      Py_ssize_t kw_args;

#line 1039 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1039 "re2.pyx"
      switch (pos_args) {
        case  4: 
#line 1039 "re2.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1039 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1039 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1039 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1039 "re2.pyx"
        case  0: break;
        default: 
#line 1039 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1039 "re2.pyx"
      }

#line 1039 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1039 "re2.pyx"
      switch (pos_args) {

#line 1039 "re2.pyx"
        case  0:

#line 1039 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else 
#line 1039 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1039 "re2.pyx"
        case  1:

#line 1039 "re2.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_repl)) != 0)) kw_args--;

#line 1039 "re2.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sub", 0, 3, 4, 1); 
#line 1039 "re2.pyx"
__PYX_ERR(0, 1039, __pyx_L3_error)

#line 1039 "re2.pyx"
        }

#line 1039 "re2.pyx"
        case  2:

#line 1039 "re2.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;

#line 1039 "re2.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sub", 0, 3, 4, 2); 
#line 1039 "re2.pyx"
__PYX_ERR(0, 1039, __pyx_L3_error)

#line 1039 "re2.pyx"
        }

#line 1039 "re2.pyx"
        case  3:

#line 1039 "re2.pyx"
        if (kw_args > 0) {

#line 1039 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_count);

#line 1039 "re2.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 1039 "re2.pyx"
        }

#line 1039 "re2.pyx"
      }

#line 1039 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 1039 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sub") < 0)) __PYX_ERR(0, 1039, __pyx_L3_error)

#line 1039 "re2.pyx"
      }

#line 1039 "re2.pyx"
    } else {

#line 1039 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 1039 "re2.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1039 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1039 "re2.pyx"
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1039 "re2.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1039 "re2.pyx"
        break;
        default: 
#line 1039 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1039 "re2.pyx"
      }

#line 1039 "re2.pyx"
    }

#line 1039 "re2.pyx"
    __pyx_v_pattern = values[0];

#line 1039 "re2.pyx"
    __pyx_v_repl = values[1];

#line 1039 "re2.pyx"
    __pyx_v_string = values[2];

#line 1039 "re2.pyx"
    if (values[3]) {

#line 1039 "re2.pyx"
      __pyx_v_count = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1039, __pyx_L3_error)

#line 1039 "re2.pyx"
    } else {

#line 1039 "re2.pyx"
      __pyx_v_count = ((int)0);

#line 1039 "re2.pyx"
    }

#line 1039 "re2.pyx"
  }

#line 1039 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1039 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sub", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 1039 "re2.pyx"
__PYX_ERR(0, 1039, __pyx_L3_error)

#line 1039 "re2.pyx"
  __pyx_L3_error:;

#line 1039 "re2.pyx"
  __Pyx_AddTraceback("re2.sub", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1039 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1039 "re2.pyx"
  return NULL;

#line 1039 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1039 "re2.pyx"
__pyx_pf_3re2_18sub(__pyx_self, __pyx_v_pattern, __pyx_v_repl, __pyx_v_string, __pyx_v_count);

#line 1039 "re2.pyx"


#line 1039 "re2.pyx"
  /* function exit code */

#line 1039 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1039 "re2.pyx"
  return __pyx_r;

#line 1039 "re2.pyx"
}

#line 1039 "re2.pyx"


#line 1039 "re2.pyx"
static PyObject *__pyx_pf_3re2_18sub(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count) {

#line 1039 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 1039 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 1039 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 1039 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 1039 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 1039 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 1039 "re2.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 1039 "re2.pyx"
  int __pyx_t_6;

#line 1039 "re2.pyx"
  __Pyx_RefNannySetupContext("sub", 0);

  /* "re2.pyx":1048
 *     a replacement string to be used.
 *     """
 *     return compile(pattern).sub(repl, string, count)             # <<<<<<<<<<<<<<
 * 
 * def subn(pattern, repl, string, int count=0):
 */

#line 1048 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1048 "re2.pyx"
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1048, __pyx_L1_error)

#line 1048 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1048 "re2.pyx"
  __pyx_t_4 = NULL;

#line 1048 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 1048 "re2.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 1048 "re2.pyx"
    if (likely(__pyx_t_4)) {

#line 1048 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 1048 "re2.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 1048 "re2.pyx"
      __Pyx_INCREF(function);

#line 1048 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 1048 "re2.pyx"
    }

#line 1048 "re2.pyx"
  }

#line 1048 "re2.pyx"
  if (!__pyx_t_4) {

#line 1048 "re2.pyx"
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_pattern); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1048, __pyx_L1_error)

#line 1048 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1048 "re2.pyx"
  } else {

#line 1048 "re2.pyx"
    #if CYTHON_FAST_PYCALL

#line 1048 "re2.pyx"
    if (PyFunction_Check(__pyx_t_3)) {

#line 1048 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_pattern};

#line 1048 "re2.pyx"
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1048, __pyx_L1_error)

#line 1048 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1048 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 1048 "re2.pyx"
    } else

#line 1048 "re2.pyx"
    #endif

#line 1048 "re2.pyx"
    #if CYTHON_FAST_PYCCALL

#line 1048 "re2.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 1048 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_pattern};

#line 1048 "re2.pyx"
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1048, __pyx_L1_error)

#line 1048 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1048 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 1048 "re2.pyx"
    } else

#line 1048 "re2.pyx"
    #endif

#line 1048 "re2.pyx"
    {

#line 1048 "re2.pyx"
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1048, __pyx_L1_error)

#line 1048 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 1048 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 1048 "re2.pyx"
      __Pyx_INCREF(__pyx_v_pattern);

#line 1048 "re2.pyx"
      __Pyx_GIVEREF(__pyx_v_pattern);

#line 1048 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_pattern);

#line 1048 "re2.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1048, __pyx_L1_error)

#line 1048 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 1048 "re2.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1048 "re2.pyx"
    }

#line 1048 "re2.pyx"
  }

#line 1048 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1048 "re2.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sub); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1048, __pyx_L1_error)

#line 1048 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1048 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1048 "re2.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_count); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1048, __pyx_L1_error)

#line 1048 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1048 "re2.pyx"
  __pyx_t_5 = NULL;

#line 1048 "re2.pyx"
  __pyx_t_6 = 0;

#line 1048 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 1048 "re2.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);

#line 1048 "re2.pyx"
    if (likely(__pyx_t_5)) {

#line 1048 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 1048 "re2.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 1048 "re2.pyx"
      __Pyx_INCREF(function);

#line 1048 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 1048 "re2.pyx"
      __pyx_t_6 = 1;

#line 1048 "re2.pyx"
    }

#line 1048 "re2.pyx"
  }

#line 1048 "re2.pyx"
  #if CYTHON_FAST_PYCALL

#line 1048 "re2.pyx"
  if (PyFunction_Check(__pyx_t_3)) {

#line 1048 "re2.pyx"
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_repl, __pyx_v_string, __pyx_t_2};

#line 1048 "re2.pyx"
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1048, __pyx_L1_error)

#line 1048 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1048 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1048 "re2.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1048 "re2.pyx"
  } else

#line 1048 "re2.pyx"
  #endif

#line 1048 "re2.pyx"
  #if CYTHON_FAST_PYCCALL

#line 1048 "re2.pyx"
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 1048 "re2.pyx"
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_repl, __pyx_v_string, __pyx_t_2};

#line 1048 "re2.pyx"
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1048, __pyx_L1_error)

#line 1048 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1048 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1048 "re2.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1048 "re2.pyx"
  } else

#line 1048 "re2.pyx"
  #endif

#line 1048 "re2.pyx"
  {

#line 1048 "re2.pyx"
    __pyx_t_4 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1048, __pyx_L1_error)

#line 1048 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 1048 "re2.pyx"
    if (__pyx_t_5) {

#line 1048 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 1048 "re2.pyx"
    }

#line 1048 "re2.pyx"
    __Pyx_INCREF(__pyx_v_repl);

#line 1048 "re2.pyx"
    __Pyx_GIVEREF(__pyx_v_repl);

#line 1048 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_repl);

#line 1048 "re2.pyx"
    __Pyx_INCREF(__pyx_v_string);

#line 1048 "re2.pyx"
    __Pyx_GIVEREF(__pyx_v_string);

#line 1048 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_v_string);

#line 1048 "re2.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 1048 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_6, __pyx_t_2);

#line 1048 "re2.pyx"
    __pyx_t_2 = 0;

#line 1048 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1048, __pyx_L1_error)

#line 1048 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1048 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1048 "re2.pyx"
  }

#line 1048 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1048 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 1048 "re2.pyx"
  __pyx_t_1 = 0;

#line 1048 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":1039
 *     return compile(pattern).split(string, maxsplit)
 * 
 * def sub(pattern, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return the string obtained by replacing the leftmost
 */

#line 1039 "re2.pyx"


#line 1039 "re2.pyx"
  /* function exit code */

#line 1039 "re2.pyx"
  __pyx_L1_error:;

#line 1039 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1039 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1039 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1039 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 1039 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 1039 "re2.pyx"
  __Pyx_AddTraceback("re2.sub", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1039 "re2.pyx"
  __pyx_r = NULL;

#line 1039 "re2.pyx"
  __pyx_L0:;

#line 1039 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1039 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1039 "re2.pyx"
  return __pyx_r;

#line 1039 "re2.pyx"
}

/* "re2.pyx":1050
 *     return compile(pattern).sub(repl, string, count)
 * 
 * def subn(pattern, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return a 2-tuple containing (new_string, number).
 */

#line 1050 "re2.pyx"


#line 1050 "re2.pyx"
/* Python wrapper */

#line 1050 "re2.pyx"
static PyObject *__pyx_pw_3re2_21subn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1050 "re2.pyx"
static char __pyx_doc_3re2_20subn[] = "File: re2.pyx (starting at line 1050)\n\n    Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it's passed the match object and must\n    return a replacement string to be used.\n    ";
static PyMethodDef __pyx_mdef_3re2_21subn = 
#line 1050 "re2.pyx"
{"subn", (PyCFunction)__pyx_pw_3re2_21subn, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_20subn};

#line 1050 "re2.pyx"
static PyObject *__pyx_pw_3re2_21subn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pattern = 0
#line 1050 "re2.pyx"
;
  PyObject *__pyx_v_repl = 0
#line 1050 "re2.pyx"
;
  PyObject *__pyx_v_string = 0
#line 1050 "re2.pyx"
;
  int __pyx_v_count
#line 1050 "re2.pyx"
;

#line 1050 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 1050 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 1050 "re2.pyx"
  __Pyx_RefNannySetupContext("subn (wrapper)", 0);

#line 1050 "re2.pyx"
  {

#line 1050 "re2.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pattern,&__pyx_n_s_repl,&__pyx_n_s_string,&__pyx_n_s_count,0};

#line 1050 "re2.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 1050 "re2.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1050 "re2.pyx"
      Py_ssize_t kw_args;

#line 1050 "re2.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1050 "re2.pyx"
      switch (pos_args) {
        case  4: 
#line 1050 "re2.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1050 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1050 "re2.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1050 "re2.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1050 "re2.pyx"
        case  0: break;
        default: 
#line 1050 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1050 "re2.pyx"
      }

#line 1050 "re2.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1050 "re2.pyx"
      switch (pos_args) {

#line 1050 "re2.pyx"
        case  0:

#line 1050 "re2.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pattern)) != 0)) kw_args--;
        else 
#line 1050 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1050 "re2.pyx"
        case  1:

#line 1050 "re2.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_repl)) != 0)) kw_args--;

#line 1050 "re2.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("subn", 0, 3, 4, 1); 
#line 1050 "re2.pyx"
__PYX_ERR(0, 1050, __pyx_L3_error)

#line 1050 "re2.pyx"
        }

#line 1050 "re2.pyx"
        case  2:

#line 1050 "re2.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_string)) != 0)) kw_args--;

#line 1050 "re2.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("subn", 0, 3, 4, 2); 
#line 1050 "re2.pyx"
__PYX_ERR(0, 1050, __pyx_L3_error)

#line 1050 "re2.pyx"
        }

#line 1050 "re2.pyx"
        case  3:

#line 1050 "re2.pyx"
        if (kw_args > 0) {

#line 1050 "re2.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_count);

#line 1050 "re2.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 1050 "re2.pyx"
        }

#line 1050 "re2.pyx"
      }

#line 1050 "re2.pyx"
      if (unlikely(kw_args > 0)) {

#line 1050 "re2.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "subn") < 0)) __PYX_ERR(0, 1050, __pyx_L3_error)

#line 1050 "re2.pyx"
      }

#line 1050 "re2.pyx"
    } else {

#line 1050 "re2.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 1050 "re2.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1050 "re2.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1050 "re2.pyx"
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1050 "re2.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1050 "re2.pyx"
        break;
        default: 
#line 1050 "re2.pyx"
goto __pyx_L5_argtuple_error;

#line 1050 "re2.pyx"
      }

#line 1050 "re2.pyx"
    }

#line 1050 "re2.pyx"
    __pyx_v_pattern = values[0];

#line 1050 "re2.pyx"
    __pyx_v_repl = values[1];

#line 1050 "re2.pyx"
    __pyx_v_string = values[2];

#line 1050 "re2.pyx"
    if (values[3]) {

#line 1050 "re2.pyx"
      __pyx_v_count = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1050, __pyx_L3_error)

#line 1050 "re2.pyx"
    } else {

#line 1050 "re2.pyx"
      __pyx_v_count = ((int)0);

#line 1050 "re2.pyx"
    }

#line 1050 "re2.pyx"
  }

#line 1050 "re2.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1050 "re2.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("subn", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 1050 "re2.pyx"
__PYX_ERR(0, 1050, __pyx_L3_error)

#line 1050 "re2.pyx"
  __pyx_L3_error:;

#line 1050 "re2.pyx"
  __Pyx_AddTraceback("re2.subn", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1050 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1050 "re2.pyx"
  return NULL;

#line 1050 "re2.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1050 "re2.pyx"
__pyx_pf_3re2_20subn(__pyx_self, __pyx_v_pattern, __pyx_v_repl, __pyx_v_string, __pyx_v_count);

#line 1050 "re2.pyx"


#line 1050 "re2.pyx"
  /* function exit code */

#line 1050 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1050 "re2.pyx"
  return __pyx_r;

#line 1050 "re2.pyx"
}

#line 1050 "re2.pyx"


#line 1050 "re2.pyx"
static PyObject *__pyx_pf_3re2_20subn(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern, PyObject *__pyx_v_repl, PyObject *__pyx_v_string, int __pyx_v_count) {

#line 1050 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 1050 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 1050 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 1050 "re2.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 1050 "re2.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 1050 "re2.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 1050 "re2.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 1050 "re2.pyx"
  int __pyx_t_6;

#line 1050 "re2.pyx"
  __Pyx_RefNannySetupContext("subn", 0);

  /* "re2.pyx":1061
 *     return a replacement string to be used.
 *     """
 *     return compile(pattern).subn(repl, string, count)             # <<<<<<<<<<<<<<
 * 
 * _alphanum = {}
 */

#line 1061 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1061 "re2.pyx"
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_compile_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1061, __pyx_L1_error)

#line 1061 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1061 "re2.pyx"
  __pyx_t_4 = NULL;

#line 1061 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 1061 "re2.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 1061 "re2.pyx"
    if (likely(__pyx_t_4)) {

#line 1061 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 1061 "re2.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 1061 "re2.pyx"
      __Pyx_INCREF(function);

#line 1061 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 1061 "re2.pyx"
    }

#line 1061 "re2.pyx"
  }

#line 1061 "re2.pyx"
  if (!__pyx_t_4) {

#line 1061 "re2.pyx"
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_pattern); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1061, __pyx_L1_error)

#line 1061 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1061 "re2.pyx"
  } else {

#line 1061 "re2.pyx"
    #if CYTHON_FAST_PYCALL

#line 1061 "re2.pyx"
    if (PyFunction_Check(__pyx_t_3)) {

#line 1061 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_pattern};

#line 1061 "re2.pyx"
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1061, __pyx_L1_error)

#line 1061 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1061 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 1061 "re2.pyx"
    } else

#line 1061 "re2.pyx"
    #endif

#line 1061 "re2.pyx"
    #if CYTHON_FAST_PYCCALL

#line 1061 "re2.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 1061 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_pattern};

#line 1061 "re2.pyx"
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1061, __pyx_L1_error)

#line 1061 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1061 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 1061 "re2.pyx"
    } else

#line 1061 "re2.pyx"
    #endif

#line 1061 "re2.pyx"
    {

#line 1061 "re2.pyx"
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1061, __pyx_L1_error)

#line 1061 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 1061 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 1061 "re2.pyx"
      __Pyx_INCREF(__pyx_v_pattern);

#line 1061 "re2.pyx"
      __Pyx_GIVEREF(__pyx_v_pattern);

#line 1061 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_pattern);

#line 1061 "re2.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1061, __pyx_L1_error)

#line 1061 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 1061 "re2.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1061 "re2.pyx"
    }

#line 1061 "re2.pyx"
  }

#line 1061 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1061 "re2.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_subn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1061, __pyx_L1_error)

#line 1061 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1061 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1061 "re2.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_count); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1061, __pyx_L1_error)

#line 1061 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1061 "re2.pyx"
  __pyx_t_5 = NULL;

#line 1061 "re2.pyx"
  __pyx_t_6 = 0;

#line 1061 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 1061 "re2.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);

#line 1061 "re2.pyx"
    if (likely(__pyx_t_5)) {

#line 1061 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 1061 "re2.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 1061 "re2.pyx"
      __Pyx_INCREF(function);

#line 1061 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 1061 "re2.pyx"
      __pyx_t_6 = 1;

#line 1061 "re2.pyx"
    }

#line 1061 "re2.pyx"
  }

#line 1061 "re2.pyx"
  #if CYTHON_FAST_PYCALL

#line 1061 "re2.pyx"
  if (PyFunction_Check(__pyx_t_3)) {

#line 1061 "re2.pyx"
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_repl, __pyx_v_string, __pyx_t_2};

#line 1061 "re2.pyx"
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1061, __pyx_L1_error)

#line 1061 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1061 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1061 "re2.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1061 "re2.pyx"
  } else

#line 1061 "re2.pyx"
  #endif

#line 1061 "re2.pyx"
  #if CYTHON_FAST_PYCCALL

#line 1061 "re2.pyx"
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 1061 "re2.pyx"
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_repl, __pyx_v_string, __pyx_t_2};

#line 1061 "re2.pyx"
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1061, __pyx_L1_error)

#line 1061 "re2.pyx"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1061 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1061 "re2.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1061 "re2.pyx"
  } else

#line 1061 "re2.pyx"
  #endif

#line 1061 "re2.pyx"
  {

#line 1061 "re2.pyx"
    __pyx_t_4 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1061, __pyx_L1_error)

#line 1061 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 1061 "re2.pyx"
    if (__pyx_t_5) {

#line 1061 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 1061 "re2.pyx"
    }

#line 1061 "re2.pyx"
    __Pyx_INCREF(__pyx_v_repl);

#line 1061 "re2.pyx"
    __Pyx_GIVEREF(__pyx_v_repl);

#line 1061 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_repl);

#line 1061 "re2.pyx"
    __Pyx_INCREF(__pyx_v_string);

#line 1061 "re2.pyx"
    __Pyx_GIVEREF(__pyx_v_string);

#line 1061 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_v_string);

#line 1061 "re2.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 1061 "re2.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_6, __pyx_t_2);

#line 1061 "re2.pyx"
    __pyx_t_2 = 0;

#line 1061 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1061, __pyx_L1_error)

#line 1061 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1061 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1061 "re2.pyx"
  }

#line 1061 "re2.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1061 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 1061 "re2.pyx"
  __pyx_t_1 = 0;

#line 1061 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":1050
 *     return compile(pattern).sub(repl, string, count)
 * 
 * def subn(pattern, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return a 2-tuple containing (new_string, number).
 */

#line 1050 "re2.pyx"


#line 1050 "re2.pyx"
  /* function exit code */

#line 1050 "re2.pyx"
  __pyx_L1_error:;

#line 1050 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1050 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1050 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1050 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 1050 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 1050 "re2.pyx"
  __Pyx_AddTraceback("re2.subn", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1050 "re2.pyx"
  __pyx_r = NULL;

#line 1050 "re2.pyx"
  __pyx_L0:;

#line 1050 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1050 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1050 "re2.pyx"
  return __pyx_r;

#line 1050 "re2.pyx"
}

/* "re2.pyx":1068
 * del c
 * 
 * def escape(pattern):             # <<<<<<<<<<<<<<
 *     "Escape all non-alphanumeric characters in pattern."
 *     s = list(pattern)
 */

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
/* Python wrapper */

#line 1068 "re2.pyx"
static PyObject *__pyx_pw_3re2_23escape(PyObject *__pyx_self, PyObject *__pyx_v_pattern); /*proto*/

#line 1068 "re2.pyx"
static char __pyx_doc_3re2_22escape[] = "File: re2.pyx (starting at line 1068)\nEscape all non-alphanumeric characters in pattern.";
static PyMethodDef __pyx_mdef_3re2_23escape = 
#line 1068 "re2.pyx"
{"escape", (PyCFunction)__pyx_pw_3re2_23escape, METH_O, __pyx_doc_3re2_22escape};

#line 1068 "re2.pyx"
static PyObject *__pyx_pw_3re2_23escape(PyObject *__pyx_self, PyObject *__pyx_v_pattern) {

#line 1068 "re2.pyx"
  PyObject *__pyx_r = 0;

#line 1068 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 1068 "re2.pyx"
  __Pyx_RefNannySetupContext("escape (wrapper)", 0);
  __pyx_r = 
#line 1068 "re2.pyx"
__pyx_pf_3re2_22escape(__pyx_self, ((PyObject *)__pyx_v_pattern));

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
  /* function exit code */

#line 1068 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1068 "re2.pyx"
  return __pyx_r;

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyObject *__pyx_pf_3re2_22escape(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pattern) {
  PyObject *__pyx_v_s = NULL
#line 1068 "re2.pyx"
;
  PyObject *__pyx_v_alphanum = NULL
#line 1068 "re2.pyx"
;
  Py_ssize_t __pyx_v_i
#line 1068 "re2.pyx"
;
  PyObject *__pyx_v_c = NULL
#line 1068 "re2.pyx"
;

#line 1068 "re2.pyx"
  PyObject *__pyx_r = NULL;

#line 1068 "re2.pyx"
  __Pyx_RefNannyDeclarations

#line 1068 "re2.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 1068 "re2.pyx"
  Py_ssize_t __pyx_t_2;

#line 1068 "re2.pyx"
  Py_ssize_t __pyx_t_3;

#line 1068 "re2.pyx"
  int __pyx_t_4;

#line 1068 "re2.pyx"
  long __pyx_t_5;

#line 1068 "re2.pyx"
  int __pyx_t_6;

#line 1068 "re2.pyx"
  int __pyx_t_7;

#line 1068 "re2.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 1068 "re2.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 1068 "re2.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 1068 "re2.pyx"
  __Pyx_RefNannySetupContext("escape", 0);

  /* "re2.pyx":1070
 * def escape(pattern):
 *     "Escape all non-alphanumeric characters in pattern."
 *     s = list(pattern)             # <<<<<<<<<<<<<<
 *     alphanum = _alphanum
 *     for i in range(len(pattern)):
 */

#line 1070 "re2.pyx"
  __pyx_t_1 = PySequence_List(__pyx_v_pattern); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1070, __pyx_L1_error)

#line 1070 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1070 "re2.pyx"
  __pyx_v_s = ((PyObject*)__pyx_t_1);

#line 1070 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":1071
 *     "Escape all non-alphanumeric characters in pattern."
 *     s = list(pattern)
 *     alphanum = _alphanum             # <<<<<<<<<<<<<<
 *     for i in range(len(pattern)):
 *         c = pattern[i]
 */

#line 1071 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_alphanum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1071, __pyx_L1_error)

#line 1071 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1071 "re2.pyx"
  __pyx_v_alphanum = __pyx_t_1;

#line 1071 "re2.pyx"
  __pyx_t_1 = 0;

  /* "re2.pyx":1072
 *     s = list(pattern)
 *     alphanum = _alphanum
 *     for i in range(len(pattern)):             # <<<<<<<<<<<<<<
 *         c = pattern[i]
 *         if ord(c) < 0x80 and c not in alphanum:
 */

#line 1072 "re2.pyx"
  __pyx_t_2 = PyObject_Length(__pyx_v_pattern); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1072, __pyx_L1_error)

#line 1072 "re2.pyx"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {

#line 1072 "re2.pyx"
    __pyx_v_i = __pyx_t_3;

    /* "re2.pyx":1073
 *     alphanum = _alphanum
 *     for i in range(len(pattern)):
 *         c = pattern[i]             # <<<<<<<<<<<<<<
 *         if ord(c) < 0x80 and c not in alphanum:
 *             if c == "\000":
 */

#line 1073 "re2.pyx"
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_pattern, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1073, __pyx_L1_error)

#line 1073 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1073 "re2.pyx"
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_1);

#line 1073 "re2.pyx"
    __pyx_t_1 = 0;

    /* "re2.pyx":1074
 *     for i in range(len(pattern)):
 *         c = pattern[i]
 *         if ord(c) < 0x80 and c not in alphanum:             # <<<<<<<<<<<<<<
 *             if c == "\000":
 *                 s[i] = "\\000"
 */

#line 1074 "re2.pyx"
    __pyx_t_5 = __Pyx_PyObject_Ord(__pyx_v_c); if (unlikely(__pyx_t_5 == (long)(Py_UCS4)-1)) __PYX_ERR(0, 1074, __pyx_L1_error)

#line 1074 "re2.pyx"
    __pyx_t_6 = ((__pyx_t_5 < 0x80) != 0);

#line 1074 "re2.pyx"
    if (__pyx_t_6) {

#line 1074 "re2.pyx"
    } else {

#line 1074 "re2.pyx"
      __pyx_t_4 = __pyx_t_6;

#line 1074 "re2.pyx"
      goto __pyx_L6_bool_binop_done;

#line 1074 "re2.pyx"
    }

#line 1074 "re2.pyx"
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_v_c, __pyx_v_alphanum, Py_NE)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1074, __pyx_L1_error)

#line 1074 "re2.pyx"
    __pyx_t_7 = (__pyx_t_6 != 0);

#line 1074 "re2.pyx"
    __pyx_t_4 = __pyx_t_7;

#line 1074 "re2.pyx"
    __pyx_L6_bool_binop_done:;

#line 1074 "re2.pyx"
    if (__pyx_t_4) {

      /* "re2.pyx":1075
 *         c = pattern[i]
 *         if ord(c) < 0x80 and c not in alphanum:
 *             if c == "\000":             # <<<<<<<<<<<<<<
 *                 s[i] = "\\000"
 *             else:
 */

#line 1075 "re2.pyx"
      __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_c, __pyx_kp_s__8, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1075, __pyx_L1_error)

#line 1075 "re2.pyx"
      if (__pyx_t_4) {

        /* "re2.pyx":1076
 *         if ord(c) < 0x80 and c not in alphanum:
 *             if c == "\000":
 *                 s[i] = "\\000"             # <<<<<<<<<<<<<<
 *             else:
 *                 s[i] = "\\" + c
 */

#line 1076 "re2.pyx"
        if (unlikely(__Pyx_SetItemInt(__pyx_v_s, __pyx_v_i, __pyx_kp_s_000, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1) < 0)) __PYX_ERR(0, 1076, __pyx_L1_error)

        /* "re2.pyx":1075
 *         c = pattern[i]
 *         if ord(c) < 0x80 and c not in alphanum:
 *             if c == "\000":             # <<<<<<<<<<<<<<
 *                 s[i] = "\\000"
 *             else:
 */

#line 1075 "re2.pyx"
        goto __pyx_L8;

#line 1075 "re2.pyx"
      }

      /* "re2.pyx":1078
 *                 s[i] = "\\000"
 *             else:
 *                 s[i] = "\\" + c             # <<<<<<<<<<<<<<
 *     return pattern[:0].join(s)
 * 
 */

#line 1078 "re2.pyx"
      /*else*/ {

#line 1078 "re2.pyx"
        __pyx_t_1 = PyNumber_Add(__pyx_kp_s__5, __pyx_v_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)

#line 1078 "re2.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 1078 "re2.pyx"
        if (unlikely(__Pyx_SetItemInt(__pyx_v_s, __pyx_v_i, __pyx_t_1, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1) < 0)) __PYX_ERR(0, 1078, __pyx_L1_error)

#line 1078 "re2.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1078 "re2.pyx"
      }

#line 1078 "re2.pyx"
      __pyx_L8:;

      /* "re2.pyx":1074
 *     for i in range(len(pattern)):
 *         c = pattern[i]
 *         if ord(c) < 0x80 and c not in alphanum:             # <<<<<<<<<<<<<<
 *             if c == "\000":
 *                 s[i] = "\\000"
 */

#line 1074 "re2.pyx"
    }

#line 1074 "re2.pyx"
  }

  /* "re2.pyx":1079
 *             else:
 *                 s[i] = "\\" + c
 *     return pattern[:0].join(s)             # <<<<<<<<<<<<<<
 * 
 */

#line 1079 "re2.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1079 "re2.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetSlice(__pyx_v_pattern, 0, 0, NULL, NULL, &__pyx_slice__35, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1079, __pyx_L1_error)

#line 1079 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 1079 "re2.pyx"
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_join); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1079, __pyx_L1_error)

#line 1079 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 1079 "re2.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 1079 "re2.pyx"
  __pyx_t_8 = NULL;

#line 1079 "re2.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {

#line 1079 "re2.pyx"
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);

#line 1079 "re2.pyx"
    if (likely(__pyx_t_8)) {

#line 1079 "re2.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);

#line 1079 "re2.pyx"
      __Pyx_INCREF(__pyx_t_8);

#line 1079 "re2.pyx"
      __Pyx_INCREF(function);

#line 1079 "re2.pyx"
      __Pyx_DECREF_SET(__pyx_t_9, function);

#line 1079 "re2.pyx"
    }

#line 1079 "re2.pyx"
  }

#line 1079 "re2.pyx"
  if (!__pyx_t_8) {

#line 1079 "re2.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1079, __pyx_L1_error)

#line 1079 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1079 "re2.pyx"
  } else {

#line 1079 "re2.pyx"
    #if CYTHON_FAST_PYCALL

#line 1079 "re2.pyx"
    if (PyFunction_Check(__pyx_t_9)) {

#line 1079 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_s};

#line 1079 "re2.pyx"
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1079, __pyx_L1_error)

#line 1079 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 1079 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 1079 "re2.pyx"
    } else

#line 1079 "re2.pyx"
    #endif

#line 1079 "re2.pyx"
    #if CYTHON_FAST_PYCCALL

#line 1079 "re2.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {

#line 1079 "re2.pyx"
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_s};

#line 1079 "re2.pyx"
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1079, __pyx_L1_error)

#line 1079 "re2.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 1079 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 1079 "re2.pyx"
    } else

#line 1079 "re2.pyx"
    #endif

#line 1079 "re2.pyx"
    {

#line 1079 "re2.pyx"
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1079, __pyx_L1_error)

#line 1079 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 1079 "re2.pyx"
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;

#line 1079 "re2.pyx"
      __Pyx_INCREF(__pyx_v_s);

#line 1079 "re2.pyx"
      __Pyx_GIVEREF(__pyx_v_s);

#line 1079 "re2.pyx"
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_s);

#line 1079 "re2.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1079, __pyx_L1_error)

#line 1079 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 1079 "re2.pyx"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 1079 "re2.pyx"
    }

#line 1079 "re2.pyx"
  }

#line 1079 "re2.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 1079 "re2.pyx"
  __pyx_r = __pyx_t_1;

#line 1079 "re2.pyx"
  __pyx_t_1 = 0;

#line 1079 "re2.pyx"
  goto __pyx_L0;

  /* "re2.pyx":1068
 * del c
 * 
 * def escape(pattern):             # <<<<<<<<<<<<<<
 *     "Escape all non-alphanumeric characters in pattern."
 *     s = list(pattern)
 */

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
  /* function exit code */

#line 1068 "re2.pyx"
  __pyx_L1_error:;

#line 1068 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1068 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 1068 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 1068 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 1068 "re2.pyx"
  __Pyx_AddTraceback("re2.escape", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1068 "re2.pyx"
  __pyx_r = NULL;

#line 1068 "re2.pyx"
  __pyx_L0:;

#line 1068 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_s);

#line 1068 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_alphanum);

#line 1068 "re2.pyx"
  __Pyx_XDECREF(__pyx_v_c);

#line 1068 "re2.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1068 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1068 "re2.pyx"
  return __pyx_r;

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"
static struct __pyx_vtabstruct_3re2_Match __pyx_vtable_3re2_Match;

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyObject *__pyx_tp_new_3re2_Match(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 1068 "re2.pyx"
  struct __pyx_obj_3re2_Match *p;

#line 1068 "re2.pyx"
  PyObject *o;

#line 1068 "re2.pyx"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 1068 "re2.pyx"
    o = (*t->tp_alloc)(t, 0);

#line 1068 "re2.pyx"
  } else {

#line 1068 "re2.pyx"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 1068 "re2.pyx"
  }

#line 1068 "re2.pyx"
  if (unlikely(!o)) return 0;

#line 1068 "re2.pyx"
  p = ((struct __pyx_obj_3re2_Match *)o);

#line 1068 "re2.pyx"
  p->__pyx_vtab = __pyx_vtabptr_3re2_Match;

#line 1068 "re2.pyx"
  p->match_string = Py_None; Py_INCREF(Py_None);

#line 1068 "re2.pyx"
  p->_pattern_object = Py_None; Py_INCREF(Py_None);

#line 1068 "re2.pyx"
  p->_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);

#line 1068 "re2.pyx"
  p->_spans = ((PyObject*)Py_None); Py_INCREF(Py_None);

#line 1068 "re2.pyx"
  p->_named_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);

#line 1068 "re2.pyx"
  p->_named_indexes = ((PyObject*)Py_None); Py_INCREF(Py_None);

#line 1068 "re2.pyx"
  return o;

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static void __pyx_tp_dealloc_3re2_Match(PyObject *o) {

#line 1068 "re2.pyx"
  struct __pyx_obj_3re2_Match *p = (struct __pyx_obj_3re2_Match *)o;

#line 1068 "re2.pyx"
  #if PY_VERSION_HEX >= 0x030400a1

#line 1068 "re2.pyx"
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {

#line 1068 "re2.pyx"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 1068 "re2.pyx"
  }

#line 1068 "re2.pyx"
  #endif

#line 1068 "re2.pyx"
  PyObject_GC_UnTrack(o);

#line 1068 "re2.pyx"
  {

#line 1068 "re2.pyx"
    PyObject *etype, *eval, *etb;

#line 1068 "re2.pyx"
    PyErr_Fetch(&etype, &eval, &etb);

#line 1068 "re2.pyx"
    ++Py_REFCNT(o);

#line 1068 "re2.pyx"
    __pyx_pw_3re2_5Match_3__dealloc__(o);

#line 1068 "re2.pyx"
    --Py_REFCNT(o);

#line 1068 "re2.pyx"
    PyErr_Restore(etype, eval, etb);

#line 1068 "re2.pyx"
  }

#line 1068 "re2.pyx"
  Py_CLEAR(p->match_string);

#line 1068 "re2.pyx"
  Py_CLEAR(p->_pattern_object);

#line 1068 "re2.pyx"
  Py_CLEAR(p->_groups);

#line 1068 "re2.pyx"
  Py_CLEAR(p->_spans);

#line 1068 "re2.pyx"
  Py_CLEAR(p->_named_groups);

#line 1068 "re2.pyx"
  Py_CLEAR(p->_named_indexes);

#line 1068 "re2.pyx"
  (*Py_TYPE(o)->tp_free)(o);

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static int __pyx_tp_traverse_3re2_Match(PyObject *o, visitproc v, void *a) {

#line 1068 "re2.pyx"
  int e;

#line 1068 "re2.pyx"
  struct __pyx_obj_3re2_Match *p = (struct __pyx_obj_3re2_Match *)o;

#line 1068 "re2.pyx"
  if (p->match_string) {

#line 1068 "re2.pyx"
    e = (*v)(p->match_string, a); if (e) return e;

#line 1068 "re2.pyx"
  }

#line 1068 "re2.pyx"
  if (p->_pattern_object) {

#line 1068 "re2.pyx"
    e = (*v)(p->_pattern_object, a); if (e) return e;

#line 1068 "re2.pyx"
  }

#line 1068 "re2.pyx"
  if (p->_groups) {

#line 1068 "re2.pyx"
    e = (*v)(p->_groups, a); if (e) return e;

#line 1068 "re2.pyx"
  }

#line 1068 "re2.pyx"
  if (p->_spans) {

#line 1068 "re2.pyx"
    e = (*v)(p->_spans, a); if (e) return e;

#line 1068 "re2.pyx"
  }

#line 1068 "re2.pyx"
  if (p->_named_groups) {

#line 1068 "re2.pyx"
    e = (*v)(p->_named_groups, a); if (e) return e;

#line 1068 "re2.pyx"
  }

#line 1068 "re2.pyx"
  if (p->_named_indexes) {

#line 1068 "re2.pyx"
    e = (*v)(p->_named_indexes, a); if (e) return e;

#line 1068 "re2.pyx"
  }

#line 1068 "re2.pyx"
  return 0;

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static int __pyx_tp_clear_3re2_Match(PyObject *o) {

#line 1068 "re2.pyx"
  PyObject* tmp;

#line 1068 "re2.pyx"
  struct __pyx_obj_3re2_Match *p = (struct __pyx_obj_3re2_Match *)o;

#line 1068 "re2.pyx"
  tmp = ((PyObject*)p->match_string);

#line 1068 "re2.pyx"
  p->match_string = Py_None; Py_INCREF(Py_None);

#line 1068 "re2.pyx"
  Py_XDECREF(tmp);

#line 1068 "re2.pyx"
  tmp = ((PyObject*)p->_pattern_object);

#line 1068 "re2.pyx"
  p->_pattern_object = Py_None; Py_INCREF(Py_None);

#line 1068 "re2.pyx"
  Py_XDECREF(tmp);

#line 1068 "re2.pyx"
  tmp = ((PyObject*)p->_groups);

#line 1068 "re2.pyx"
  p->_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);

#line 1068 "re2.pyx"
  Py_XDECREF(tmp);

#line 1068 "re2.pyx"
  tmp = ((PyObject*)p->_spans);

#line 1068 "re2.pyx"
  p->_spans = ((PyObject*)Py_None); Py_INCREF(Py_None);

#line 1068 "re2.pyx"
  Py_XDECREF(tmp);

#line 1068 "re2.pyx"
  tmp = ((PyObject*)p->_named_groups);

#line 1068 "re2.pyx"
  p->_named_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);

#line 1068 "re2.pyx"
  Py_XDECREF(tmp);

#line 1068 "re2.pyx"
  tmp = ((PyObject*)p->_named_indexes);

#line 1068 "re2.pyx"
  p->_named_indexes = ((PyObject*)Py_None); Py_INCREF(Py_None);

#line 1068 "re2.pyx"
  Py_XDECREF(tmp);

#line 1068 "re2.pyx"
  return 0;

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyObject *__pyx_getprop_3re2_5Match_re(PyObject *o, CYTHON_UNUSED void *x) {

#line 1068 "re2.pyx"
  return __pyx_pw_3re2_5Match_2re_1__get__(o);

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyObject *__pyx_getprop_3re2_5Match_pos(PyObject *o, CYTHON_UNUSED void *x) {

#line 1068 "re2.pyx"
  return __pyx_pw_3re2_5Match_3pos_1__get__(o);

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyObject *__pyx_getprop_3re2_5Match_endpos(PyObject *o, CYTHON_UNUSED void *x) {

#line 1068 "re2.pyx"
  return __pyx_pw_3re2_5Match_6endpos_1__get__(o);

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyObject *__pyx_getprop_3re2_5Match_string(PyObject *o, CYTHON_UNUSED void *x) {

#line 1068 "re2.pyx"
  return __pyx_pw_3re2_5Match_6string_1__get__(o);

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyObject *__pyx_getprop_3re2_5Match_regs(PyObject *o, CYTHON_UNUSED void *x) {

#line 1068 "re2.pyx"
  return __pyx_pw_3re2_5Match_4regs_1__get__(o);

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyObject *__pyx_getprop_3re2_5Match_lastindex(PyObject *o, CYTHON_UNUSED void *x) {

#line 1068 "re2.pyx"
  return __pyx_pw_3re2_5Match_9lastindex_1__get__(o);

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyObject *__pyx_getprop_3re2_5Match_lastgroup(PyObject *o, CYTHON_UNUSED void *x) {

#line 1068 "re2.pyx"
  return __pyx_pw_3re2_5Match_9lastgroup_1__get__(o);

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyMethodDef __pyx_methods_3re2_Match[] = {

#line 1068 "re2.pyx"
  {"groups", (PyCFunction)__pyx_pw_3re2_5Match_5groups, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_5Match_4groups},

#line 1068 "re2.pyx"
  {"group", (PyCFunction)__pyx_pw_3re2_5Match_7group, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_5Match_6group},

#line 1068 "re2.pyx"
  {"_convert_spans", (PyCFunction)__pyx_pw_3re2_5Match_9_convert_spans, METH_O, __pyx_doc_3re2_5Match_8_convert_spans},

#line 1068 "re2.pyx"
  {"expand", (PyCFunction)__pyx_pw_3re2_5Match_11expand, METH_O, __pyx_doc_3re2_5Match_10expand},

#line 1068 "re2.pyx"
  {"groupdict", (PyCFunction)__pyx_pw_3re2_5Match_13groupdict, METH_NOARGS, __pyx_doc_3re2_5Match_12groupdict},

#line 1068 "re2.pyx"
  {"end", (PyCFunction)__pyx_pw_3re2_5Match_15end, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_5Match_14end},

#line 1068 "re2.pyx"
  {"start", (PyCFunction)__pyx_pw_3re2_5Match_17start, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_5Match_16start},

#line 1068 "re2.pyx"
  {"span", (PyCFunction)__pyx_pw_3re2_5Match_19span, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_5Match_18span},

#line 1068 "re2.pyx"
  {0, 0, 0, 0}

#line 1068 "re2.pyx"
};

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static struct PyGetSetDef __pyx_getsets_3re2_Match[] = {

#line 1068 "re2.pyx"
  {(char *)"re", __pyx_getprop_3re2_5Match_re, 0, (char *)0, 0},

#line 1068 "re2.pyx"
  {(char *)"pos", __pyx_getprop_3re2_5Match_pos, 0, (char *)0, 0},

#line 1068 "re2.pyx"
  {(char *)"endpos", __pyx_getprop_3re2_5Match_endpos, 0, (char *)0, 0},

#line 1068 "re2.pyx"
  {(char *)"string", __pyx_getprop_3re2_5Match_string, 0, (char *)0, 0},

#line 1068 "re2.pyx"
  {(char *)"regs", __pyx_getprop_3re2_5Match_regs, 0, (char *)0, 0},

#line 1068 "re2.pyx"
  {(char *)"lastindex", __pyx_getprop_3re2_5Match_lastindex, 0, (char *)0, 0},

#line 1068 "re2.pyx"
  {(char *)"lastgroup", __pyx_getprop_3re2_5Match_lastgroup, 0, (char *)0, 0},

#line 1068 "re2.pyx"
  {0, 0, 0, 0, 0}

#line 1068 "re2.pyx"
};

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyTypeObject __pyx_type_3re2_Match = {

#line 1068 "re2.pyx"
  PyVarObject_HEAD_INIT(0, 0)

#line 1068 "re2.pyx"
  "re2.Match", /*tp_name*/

#line 1068 "re2.pyx"
  sizeof(struct __pyx_obj_3re2_Match), /*tp_basicsize*/

#line 1068 "re2.pyx"
  0, /*tp_itemsize*/

#line 1068 "re2.pyx"
  __pyx_tp_dealloc_3re2_Match, /*tp_dealloc*/

#line 1068 "re2.pyx"
  0, /*tp_print*/

#line 1068 "re2.pyx"
  0, /*tp_getattr*/

#line 1068 "re2.pyx"
  0, /*tp_setattr*/

#line 1068 "re2.pyx"
  #if PY_MAJOR_VERSION < 3

#line 1068 "re2.pyx"
  0, /*tp_compare*/

#line 1068 "re2.pyx"
  #endif

#line 1068 "re2.pyx"
  #if PY_MAJOR_VERSION >= 3

#line 1068 "re2.pyx"
  0, /*tp_as_async*/

#line 1068 "re2.pyx"
  #endif

#line 1068 "re2.pyx"
  0, /*tp_repr*/

#line 1068 "re2.pyx"
  0, /*tp_as_number*/

#line 1068 "re2.pyx"
  0, /*tp_as_sequence*/

#line 1068 "re2.pyx"
  0, /*tp_as_mapping*/

#line 1068 "re2.pyx"
  0, /*tp_hash*/

#line 1068 "re2.pyx"
  0, /*tp_call*/

#line 1068 "re2.pyx"
  0, /*tp_str*/

#line 1068 "re2.pyx"
  0, /*tp_getattro*/

#line 1068 "re2.pyx"
  0, /*tp_setattro*/

#line 1068 "re2.pyx"
  0, /*tp_as_buffer*/

#line 1068 "re2.pyx"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/

#line 1068 "re2.pyx"
  0, /*tp_doc*/

#line 1068 "re2.pyx"
  __pyx_tp_traverse_3re2_Match, /*tp_traverse*/

#line 1068 "re2.pyx"
  __pyx_tp_clear_3re2_Match, /*tp_clear*/

#line 1068 "re2.pyx"
  0, /*tp_richcompare*/

#line 1068 "re2.pyx"
  0, /*tp_weaklistoffset*/

#line 1068 "re2.pyx"
  0, /*tp_iter*/

#line 1068 "re2.pyx"
  0, /*tp_iternext*/

#line 1068 "re2.pyx"
  __pyx_methods_3re2_Match, /*tp_methods*/

#line 1068 "re2.pyx"
  0, /*tp_members*/

#line 1068 "re2.pyx"
  __pyx_getsets_3re2_Match, /*tp_getset*/

#line 1068 "re2.pyx"
  0, /*tp_base*/

#line 1068 "re2.pyx"
  0, /*tp_dict*/

#line 1068 "re2.pyx"
  0, /*tp_descr_get*/

#line 1068 "re2.pyx"
  0, /*tp_descr_set*/

#line 1068 "re2.pyx"
  0, /*tp_dictoffset*/

#line 1068 "re2.pyx"
  __pyx_pw_3re2_5Match_1__init__, /*tp_init*/

#line 1068 "re2.pyx"
  0, /*tp_alloc*/

#line 1068 "re2.pyx"
  __pyx_tp_new_3re2_Match, /*tp_new*/

#line 1068 "re2.pyx"
  0, /*tp_free*/

#line 1068 "re2.pyx"
  0, /*tp_is_gc*/

#line 1068 "re2.pyx"
  0, /*tp_bases*/

#line 1068 "re2.pyx"
  0, /*tp_mro*/

#line 1068 "re2.pyx"
  0, /*tp_cache*/

#line 1068 "re2.pyx"
  0, /*tp_subclasses*/

#line 1068 "re2.pyx"
  0, /*tp_weaklist*/

#line 1068 "re2.pyx"
  0, /*tp_del*/

#line 1068 "re2.pyx"
  0, /*tp_version_tag*/

#line 1068 "re2.pyx"
  #if PY_VERSION_HEX >= 0x030400a1

#line 1068 "re2.pyx"
  0, /*tp_finalize*/

#line 1068 "re2.pyx"
  #endif

#line 1068 "re2.pyx"
};

#line 1068 "re2.pyx"
static struct __pyx_vtabstruct_3re2_Pattern __pyx_vtable_3re2_Pattern;

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyObject *__pyx_tp_new_3re2_Pattern(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 1068 "re2.pyx"
  struct __pyx_obj_3re2_Pattern *p;

#line 1068 "re2.pyx"
  PyObject *o;

#line 1068 "re2.pyx"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 1068 "re2.pyx"
    o = (*t->tp_alloc)(t, 0);

#line 1068 "re2.pyx"
  } else {

#line 1068 "re2.pyx"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 1068 "re2.pyx"
  }

#line 1068 "re2.pyx"
  if (unlikely(!o)) return 0;

#line 1068 "re2.pyx"
  p = ((struct __pyx_obj_3re2_Pattern *)o);

#line 1068 "re2.pyx"
  p->__pyx_vtab = __pyx_vtabptr_3re2_Pattern;

#line 1068 "re2.pyx"
  p->pattern = Py_None; Py_INCREF(Py_None);

#line 1068 "re2.pyx"
  return o;

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static void __pyx_tp_dealloc_3re2_Pattern(PyObject *o) {

#line 1068 "re2.pyx"
  struct __pyx_obj_3re2_Pattern *p = (struct __pyx_obj_3re2_Pattern *)o;

#line 1068 "re2.pyx"
  #if PY_VERSION_HEX >= 0x030400a1

#line 1068 "re2.pyx"
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {

#line 1068 "re2.pyx"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 1068 "re2.pyx"
  }

#line 1068 "re2.pyx"
  #endif

#line 1068 "re2.pyx"
  PyObject_GC_UnTrack(o);

#line 1068 "re2.pyx"
  {

#line 1068 "re2.pyx"
    PyObject *etype, *eval, *etb;

#line 1068 "re2.pyx"
    PyErr_Fetch(&etype, &eval, &etb);

#line 1068 "re2.pyx"
    ++Py_REFCNT(o);

#line 1068 "re2.pyx"
    __pyx_pw_3re2_7Pattern_1__dealloc__(o);

#line 1068 "re2.pyx"
    --Py_REFCNT(o);

#line 1068 "re2.pyx"
    PyErr_Restore(etype, eval, etb);

#line 1068 "re2.pyx"
  }

#line 1068 "re2.pyx"
  if (p->__weakref__) PyObject_ClearWeakRefs(o);

#line 1068 "re2.pyx"
  Py_CLEAR(p->pattern);

#line 1068 "re2.pyx"
  (*Py_TYPE(o)->tp_free)(o);

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static int __pyx_tp_traverse_3re2_Pattern(PyObject *o, visitproc v, void *a) {

#line 1068 "re2.pyx"
  int e;

#line 1068 "re2.pyx"
  struct __pyx_obj_3re2_Pattern *p = (struct __pyx_obj_3re2_Pattern *)o;

#line 1068 "re2.pyx"
  if (p->pattern) {

#line 1068 "re2.pyx"
    e = (*v)(p->pattern, a); if (e) return e;

#line 1068 "re2.pyx"
  }

#line 1068 "re2.pyx"
  return 0;

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static int __pyx_tp_clear_3re2_Pattern(PyObject *o) {

#line 1068 "re2.pyx"
  PyObject* tmp;

#line 1068 "re2.pyx"
  struct __pyx_obj_3re2_Pattern *p = (struct __pyx_obj_3re2_Pattern *)o;

#line 1068 "re2.pyx"
  tmp = ((PyObject*)p->pattern);

#line 1068 "re2.pyx"
  p->pattern = Py_None; Py_INCREF(Py_None);

#line 1068 "re2.pyx"
  Py_XDECREF(tmp);

#line 1068 "re2.pyx"
  return 0;

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyObject *__pyx_getprop_3re2_7Pattern_flags(PyObject *o, CYTHON_UNUSED void *x) {

#line 1068 "re2.pyx"
  return __pyx_pw_3re2_7Pattern_5flags_1__get__(o);

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyObject *__pyx_getprop_3re2_7Pattern_groups(PyObject *o, CYTHON_UNUSED void *x) {

#line 1068 "re2.pyx"
  return __pyx_pw_3re2_7Pattern_6groups_1__get__(o);

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyObject *__pyx_getprop_3re2_7Pattern_pattern(PyObject *o, CYTHON_UNUSED void *x) {

#line 1068 "re2.pyx"
  return __pyx_pw_3re2_7Pattern_7pattern_1__get__(o);

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static int __pyx_setprop_3re2_7Pattern_pattern(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 1068 "re2.pyx"
  if (v) {

#line 1068 "re2.pyx"
    return __pyx_pw_3re2_7Pattern_7pattern_3__set__(o, v);

#line 1068 "re2.pyx"
  }

#line 1068 "re2.pyx"
  else {

#line 1068 "re2.pyx"
    return __pyx_pw_3re2_7Pattern_7pattern_5__del__(o);

#line 1068 "re2.pyx"
  }

#line 1068 "re2.pyx"
}

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyMethodDef __pyx_methods_3re2_Pattern[] = {

#line 1068 "re2.pyx"
  {"search", (PyCFunction)__pyx_pw_3re2_7Pattern_3search, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_2search},

#line 1068 "re2.pyx"
  {"match", (PyCFunction)__pyx_pw_3re2_7Pattern_5match, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_4match},

#line 1068 "re2.pyx"
  {"finditer", (PyCFunction)__pyx_pw_3re2_7Pattern_7finditer, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_6finditer},

#line 1068 "re2.pyx"
  {"findall", (PyCFunction)__pyx_pw_3re2_7Pattern_9findall, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_8findall},

#line 1068 "re2.pyx"
  {"split", (PyCFunction)__pyx_pw_3re2_7Pattern_11split, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_10split},

#line 1068 "re2.pyx"
  {"sub", (PyCFunction)__pyx_pw_3re2_7Pattern_13sub, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_12sub},

#line 1068 "re2.pyx"
  {"subn", (PyCFunction)__pyx_pw_3re2_7Pattern_15subn, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_14subn},

#line 1068 "re2.pyx"
  {"_subn_callback", (PyCFunction)__pyx_pw_3re2_7Pattern_17_subn_callback, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3re2_7Pattern_16_subn_callback},

#line 1068 "re2.pyx"
  {0, 0, 0, 0}

#line 1068 "re2.pyx"
};

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static struct PyGetSetDef __pyx_getsets_3re2_Pattern[] = {

#line 1068 "re2.pyx"
  {(char *)"flags", __pyx_getprop_3re2_7Pattern_flags, 0, (char *)0, 0},

#line 1068 "re2.pyx"
  {(char *)"groups", __pyx_getprop_3re2_7Pattern_groups, 0, (char *)0, 0},

#line 1068 "re2.pyx"
  {(char *)"pattern", __pyx_getprop_3re2_7Pattern_pattern, __pyx_setprop_3re2_7Pattern_pattern, (char *)"File: re2.pyx (starting at line 383)", 0},

#line 1068 "re2.pyx"
  {0, 0, 0, 0, 0}

#line 1068 "re2.pyx"
};

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyTypeObject __pyx_type_3re2_Pattern = {

#line 1068 "re2.pyx"
  PyVarObject_HEAD_INIT(0, 0)

#line 1068 "re2.pyx"
  "re2.Pattern", /*tp_name*/

#line 1068 "re2.pyx"
  sizeof(struct __pyx_obj_3re2_Pattern), /*tp_basicsize*/

#line 1068 "re2.pyx"
  0, /*tp_itemsize*/

#line 1068 "re2.pyx"
  __pyx_tp_dealloc_3re2_Pattern, /*tp_dealloc*/

#line 1068 "re2.pyx"
  0, /*tp_print*/

#line 1068 "re2.pyx"
  0, /*tp_getattr*/

#line 1068 "re2.pyx"
  0, /*tp_setattr*/

#line 1068 "re2.pyx"
  #if PY_MAJOR_VERSION < 3

#line 1068 "re2.pyx"
  0, /*tp_compare*/

#line 1068 "re2.pyx"
  #endif

#line 1068 "re2.pyx"
  #if PY_MAJOR_VERSION >= 3

#line 1068 "re2.pyx"
  0, /*tp_as_async*/

#line 1068 "re2.pyx"
  #endif

#line 1068 "re2.pyx"
  0, /*tp_repr*/

#line 1068 "re2.pyx"
  0, /*tp_as_number*/

#line 1068 "re2.pyx"
  0, /*tp_as_sequence*/

#line 1068 "re2.pyx"
  0, /*tp_as_mapping*/

#line 1068 "re2.pyx"
  0, /*tp_hash*/

#line 1068 "re2.pyx"
  0, /*tp_call*/

#line 1068 "re2.pyx"
  0, /*tp_str*/

#line 1068 "re2.pyx"
  0, /*tp_getattro*/

#line 1068 "re2.pyx"
  0, /*tp_setattro*/

#line 1068 "re2.pyx"
  0, /*tp_as_buffer*/

#line 1068 "re2.pyx"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/

#line 1068 "re2.pyx"
  0, /*tp_doc*/

#line 1068 "re2.pyx"
  __pyx_tp_traverse_3re2_Pattern, /*tp_traverse*/

#line 1068 "re2.pyx"
  __pyx_tp_clear_3re2_Pattern, /*tp_clear*/

#line 1068 "re2.pyx"
  0, /*tp_richcompare*/

#line 1068 "re2.pyx"
  0, /*tp_weaklistoffset*/

#line 1068 "re2.pyx"
  0, /*tp_iter*/

#line 1068 "re2.pyx"
  0, /*tp_iternext*/

#line 1068 "re2.pyx"
  __pyx_methods_3re2_Pattern, /*tp_methods*/

#line 1068 "re2.pyx"
  0, /*tp_members*/

#line 1068 "re2.pyx"
  __pyx_getsets_3re2_Pattern, /*tp_getset*/

#line 1068 "re2.pyx"
  0, /*tp_base*/

#line 1068 "re2.pyx"
  0, /*tp_dict*/

#line 1068 "re2.pyx"
  0, /*tp_descr_get*/

#line 1068 "re2.pyx"
  0, /*tp_descr_set*/

#line 1068 "re2.pyx"
  0, /*tp_dictoffset*/

#line 1068 "re2.pyx"
  0, /*tp_init*/

#line 1068 "re2.pyx"
  0, /*tp_alloc*/

#line 1068 "re2.pyx"
  __pyx_tp_new_3re2_Pattern, /*tp_new*/

#line 1068 "re2.pyx"
  0, /*tp_free*/

#line 1068 "re2.pyx"
  0, /*tp_is_gc*/

#line 1068 "re2.pyx"
  0, /*tp_bases*/

#line 1068 "re2.pyx"
  0, /*tp_mro*/

#line 1068 "re2.pyx"
  0, /*tp_cache*/

#line 1068 "re2.pyx"
  0, /*tp_subclasses*/

#line 1068 "re2.pyx"
  0, /*tp_weaklist*/

#line 1068 "re2.pyx"
  0, /*tp_del*/

#line 1068 "re2.pyx"
  0, /*tp_version_tag*/

#line 1068 "re2.pyx"
  #if PY_VERSION_HEX >= 0x030400a1

#line 1068 "re2.pyx"
  0, /*tp_finalize*/

#line 1068 "re2.pyx"
  #endif

#line 1068 "re2.pyx"
};

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
static PyMethodDef __pyx_methods[] = {

#line 1068 "re2.pyx"
  {0, 0, 0, 0}

#line 1068 "re2.pyx"
};

#line 1068 "re2.pyx"


#line 1068 "re2.pyx"
#if PY_MAJOR_VERSION >= 3

#line 1068 "re2.pyx"
static struct PyModuleDef __pyx_moduledef = {

#line 1068 "re2.pyx"
  #if PY_VERSION_HEX < 0x03020000

#line 1068 "re2.pyx"
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },

#line 1068 "re2.pyx"
  #else

#line 1068 "re2.pyx"
    PyModuleDef_HEAD_INIT,

#line 1068 "re2.pyx"
  #endif

#line 1068 "re2.pyx"
    "re2",

#line 1068 "re2.pyx"
    __pyx_k_File_re2_pyx_starting_at_line_1, /* m_doc */

#line 1068 "re2.pyx"
    -1, /* m_size */

#line 1068 "re2.pyx"
    __pyx_methods /* m_methods */,

#line 1068 "re2.pyx"
    NULL, /* m_reload */

#line 1068 "re2.pyx"
    NULL, /* m_traverse */

#line 1068 "re2.pyx"
    NULL, /* m_clear */

#line 1068 "re2.pyx"
    NULL /* m_free */

#line 1068 "re2.pyx"
};

#line 1068 "re2.pyx"
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_0, __pyx_k_0, sizeof(__pyx_k_0), 0, 0, 1, 0},
  {&__pyx_kp_s_000, __pyx_k_000, sizeof(__pyx_k_000), 0, 0, 1, 0},
  {&__pyx_kp_s_1234567, __pyx_k_1234567, sizeof(__pyx_k_1234567), 0, 0, 1, 0},
  {&__pyx_kp_s_89, __pyx_k_89, sizeof(__pyx_k_89), 0, 0, 1, 0},
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_n_s_BackreferencesException, __pyx_k_BackreferencesException, sizeof(__pyx_k_BackreferencesException), 0, 0, 1, 1},
  {&__pyx_kp_s_Backreferences_not_supported, __pyx_k_Backreferences_not_supported, sizeof(__pyx_k_Backreferences_not_supported), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_process_flags_argument_wi, __pyx_k_Cannot_process_flags_argument_wi, sizeof(__pyx_k_Cannot_process_flags_argument_wi), 0, 0, 1, 0},
  {&__pyx_n_s_CharClassProblemException, __pyx_k_CharClassProblemException, sizeof(__pyx_k_CharClassProblemException), 0, 0, 1, 1},
  {&__pyx_n_s_D, __pyx_k_D, sizeof(__pyx_k_D), 0, 0, 1, 1},
  {&__pyx_n_s_DOTALL, __pyx_k_DOTALL, sizeof(__pyx_k_DOTALL), 0, 0, 1, 1},
  {&__pyx_n_s_FALLBACK_EXCEPTION, __pyx_k_FALLBACK_EXCEPTION, sizeof(__pyx_k_FALLBACK_EXCEPTION), 0, 0, 1, 1},
  {&__pyx_n_s_FALLBACK_QUIETLY, __pyx_k_FALLBACK_QUIETLY, sizeof(__pyx_k_FALLBACK_QUIETLY), 0, 0, 1, 1},
  {&__pyx_n_s_FALLBACK_WARNING, __pyx_k_FALLBACK_WARNING, sizeof(__pyx_k_FALLBACK_WARNING), 0, 0, 1, 1},
  {&__pyx_kp_s_File_re2_pyx_starting_at_line_45, __pyx_k_File_re2_pyx_starting_at_line_45, sizeof(__pyx_k_File_re2_pyx_starting_at_line_45), 0, 0, 1, 0},
  {&__pyx_n_s_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 0, 1, 1},
  {&__pyx_n_s_IGNORECASE, __pyx_k_IGNORECASE, sizeof(__pyx_k_IGNORECASE), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Invalid_rewrite_pattern, __pyx_k_Invalid_rewrite_pattern, sizeof(__pyx_k_Invalid_rewrite_pattern), 0, 0, 1, 0},
  {&__pyx_n_s_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 0, 1, 1},
  {&__pyx_n_s_LOCALE, __pyx_k_LOCALE, sizeof(__pyx_k_LOCALE), 0, 0, 1, 1},
  {&__pyx_n_s_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 0, 1, 1},
  {&__pyx_n_s_MAXCACHE, __pyx_k_MAXCACHE, sizeof(__pyx_k_MAXCACHE), 0, 0, 1, 1},
  {&__pyx_n_s_MULTILINE, __pyx_k_MULTILINE, sizeof(__pyx_k_MULTILINE), 0, 0, 1, 1},
  {&__pyx_n_s_NameError, __pyx_k_NameError, sizeof(__pyx_k_NameError), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_kp_s_P_Nd, __pyx_k_P_Nd, sizeof(__pyx_k_P_Nd), 0, 0, 1, 0},
  {&__pyx_n_s_RegexError, __pyx_k_RegexError, sizeof(__pyx_k_RegexError), 0, 0, 1, 1},
  {&__pyx_n_s_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 0, 1, 1},
  {&__pyx_n_s_SREPattern, __pyx_k_SREPattern, sizeof(__pyx_k_SREPattern), 0, 0, 1, 1},
  {&__pyx_kp_s_So_far_pyre2_does_not_support_cu, __pyx_k_So_far_pyre2_does_not_support_cu, sizeof(__pyx_k_So_far_pyre2_does_not_support_cu), 0, 0, 1, 0},
  {&__pyx_kp_s_This_function_expects_a_valid_no, __pyx_k_This_function_expects_a_valid_no, sizeof(__pyx_k_This_function_expects_a_valid_no), 0, 0, 1, 0},
  {&__pyx_n_s_Tokenizer, __pyx_k_Tokenizer, sizeof(__pyx_k_Tokenizer), 0, 0, 1, 1},
  {&__pyx_n_s_Tokenizer___init, __pyx_k_Tokenizer___init, sizeof(__pyx_k_Tokenizer___init), 0, 0, 1, 1},
  {&__pyx_n_s_Tokenizer___next, __pyx_k_Tokenizer___next, sizeof(__pyx_k_Tokenizer___next), 0, 0, 1, 1},
  {&__pyx_n_s_Tokenizer__next, __pyx_k_Tokenizer__next, sizeof(__pyx_k_Tokenizer__next), 0, 0, 1, 1},
  {&__pyx_n_s_Tokenizer_get, __pyx_k_Tokenizer_get, sizeof(__pyx_k_Tokenizer_get), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_U, __pyx_k_U, sizeof(__pyx_k_U), 0, 0, 1, 1},
  {&__pyx_n_s_UNICODE, __pyx_k_UNICODE, sizeof(__pyx_k_UNICODE), 0, 0, 1, 1},
  {&__pyx_n_s_VERBOSE, __pyx_k_VERBOSE, sizeof(__pyx_k_VERBOSE), 0, 0, 1, 1},
  {&__pyx_n_s_VERSION, __pyx_k_VERSION, sizeof(__pyx_k_VERSION), 0, 0, 1, 1},
  {&__pyx_n_s_VERSION_HEX, __pyx_k_VERSION_HEX, sizeof(__pyx_k_VERSION_HEX), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_W, __pyx_k_W, sizeof(__pyx_k_W), 0, 0, 1, 1},
  {&__pyx_kp_s_WARNING_Using_re_module_Reason_s, __pyx_k_WARNING_Using_re_module_Reason_s, sizeof(__pyx_k_WARNING_Using_re_module_Reason_s), 0, 0, 1, 0},
  {&__pyx_n_s_WHITESPACE, __pyx_k_WHITESPACE, sizeof(__pyx_k_WHITESPACE), 0, 0, 1, 1},
  {&__pyx_kp_s_W_and_S_not_supported_inside_ch, __pyx_k_W_and_S_not_supported_inside_ch, sizeof(__pyx_k_W_and_S_not_supported_inside_ch), 0, 0, 1, 0},
  {&__pyx_n_s_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 0, 1, 1},
  {&__pyx_kp_s__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 0, 1, 0},
  {&__pyx_kp_s__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 0, 1, 0},
  {&__pyx_kp_u__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 1, 0, 0},
  {&__pyx_kp_s__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 0, 1, 0},
  {&__pyx_kp_s__27, __pyx_k__27, sizeof(__pyx_k__27), 0, 0, 1, 0},
  {&__pyx_kp_s__28, __pyx_k__28, sizeof(__pyx_k__28), 0, 0, 1, 0},
  {&__pyx_kp_s__29, __pyx_k__29, sizeof(__pyx_k__29), 0, 0, 1, 0},
  {&__pyx_kp_s__30, __pyx_k__30, sizeof(__pyx_k__30), 0, 0, 1, 0},
  {&__pyx_kp_s__31, __pyx_k__31, sizeof(__pyx_k__31), 0, 0, 1, 0},
  {&__pyx_kp_s__32, __pyx_k__32, sizeof(__pyx_k__32), 0, 0, 1, 0},
  {&__pyx_kp_s__42, __pyx_k__42, sizeof(__pyx_k__42), 0, 0, 1, 0},
  {&__pyx_kp_s__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 1, 0},
  {&__pyx_kp_s__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 0, 1, 0},
  {&__pyx_n_s_abcdefghijklmnopqrstuvwxyzABCDEF, __pyx_k_abcdefghijklmnopqrstuvwxyzABCDEF, sizeof(__pyx_k_abcdefghijklmnopqrstuvwxyzABCDEF), 0, 0, 1, 1},
  {&__pyx_n_s_alphanum, __pyx_k_alphanum, sizeof(__pyx_k_alphanum), 0, 0, 1, 1},
  {&__pyx_n_s_alphanum_2, __pyx_k_alphanum_2, sizeof(__pyx_k_alphanum_2), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_kp_s_bogus_escape_end_of_line, __pyx_k_bogus_escape_end_of_line, sizeof(__pyx_k_bogus_escape_end_of_line), 0, 0, 1, 0},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_cache, __pyx_k_cache, sizeof(__pyx_k_cache), 0, 0, 1, 1},
  {&__pyx_n_s_cache_repl, __pyx_k_cache_repl, sizeof(__pyx_k_cache_repl), 0, 0, 1, 1},
  {&__pyx_n_s_cachekey, __pyx_k_cachekey, sizeof(__pyx_k_cachekey), 0, 0, 1, 1},
  {&__pyx_n_s_callback, __pyx_k_callback, sizeof(__pyx_k_callback), 0, 0, 1, 1},
  {&__pyx_n_s_ch, __pyx_k_ch, sizeof(__pyx_k_ch), 0, 0, 1, 1},
  {&__pyx_n_s_clear, __pyx_k_clear, sizeof(__pyx_k_clear), 0, 0, 1, 1},
  {&__pyx_n_s_compile, __pyx_k_compile, sizeof(__pyx_k_compile), 0, 0, 1, 1},
  {&__pyx_n_s_compile_2, __pyx_k_compile_2, sizeof(__pyx_k_compile_2), 0, 0, 1, 1},
  {&__pyx_n_s_convert_spans, __pyx_k_convert_spans, sizeof(__pyx_k_convert_spans), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_default, __pyx_k_default, sizeof(__pyx_k_default), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_encoded, __pyx_k_encoded, sizeof(__pyx_k_encoded), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_endpos, __pyx_k_endpos, sizeof(__pyx_k_endpos), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_error_code, __pyx_k_error_code, sizeof(__pyx_k_error_code), 0, 0, 1, 1},
  {&__pyx_n_s_error_msg, __pyx_k_error_msg, sizeof(__pyx_k_error_msg), 0, 0, 1, 1},
  {&__pyx_n_s_escape, __pyx_k_escape, sizeof(__pyx_k_escape), 0, 0, 1, 1},
  {&__pyx_kp_s_expected_string_or_buffer, __pyx_k_expected_string_or_buffer, sizeof(__pyx_k_expected_string_or_buffer), 0, 0, 1, 0},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_findall, __pyx_k_findall, sizeof(__pyx_k_findall), 0, 0, 1, 1},
  {&__pyx_n_s_finditer, __pyx_k_finditer, sizeof(__pyx_k_finditer), 0, 0, 1, 1},
  {&__pyx_kp_s_first_argument_must_be_a_string, __pyx_k_first_argument_must_be_a_string, sizeof(__pyx_k_first_argument_must_be_a_string), 0, 0, 1, 0},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_flush, __pyx_k_flush, sizeof(__pyx_k_flush), 0, 0, 1, 1},
  {&__pyx_kp_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 0},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_group, __pyx_k_group, sizeof(__pyx_k_group), 0, 0, 1, 1},
  {&__pyx_n_s_groupdict, __pyx_k_groupdict, sizeof(__pyx_k_groupdict), 0, 0, 1, 1},
  {&__pyx_n_s_groups, __pyx_k_groups, sizeof(__pyx_k_groups), 0, 0, 1, 1},
  {&__pyx_kp_s_home_gdkar_git_repos_extra_pyre, __pyx_k_home_gdkar_git_repos_extra_pyre, sizeof(__pyx_k_home_gdkar_git_repos_extra_pyre), 0, 0, 1, 0},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_isdigit, __pyx_k_isdigit, sizeof(__pyx_k_isdigit), 0, 0, 1, 1},
  {&__pyx_n_s_istring, __pyx_k_istring, sizeof(__pyx_k_istring), 0, 0, 1, 1},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_s_level, __pyx_k_level, sizeof(__pyx_k_level), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_match, __pyx_k_match, sizeof(__pyx_k_match), 0, 0, 1, 1},
  {&__pyx_n_s_max_mem, __pyx_k_max_mem, sizeof(__pyx_k_max_mem), 0, 0, 1, 1},
  {&__pyx_n_s_maxsplit, __pyx_k_maxsplit, sizeof(__pyx_k_maxsplit), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_new_pattern, __pyx_k_new_pattern, sizeof(__pyx_k_new_pattern), 0, 0, 1, 1},
  {&__pyx_n_s_next, __pyx_k_next, sizeof(__pyx_k_next), 0, 0, 1, 1},
  {&__pyx_n_s_next_2, __pyx_k_next_2, sizeof(__pyx_k_next_2), 0, 0, 1, 1},
  {&__pyx_kp_s_no_such_group, __pyx_k_no_such_group, sizeof(__pyx_k_no_such_group), 0, 0, 1, 0},
  {&__pyx_n_s_num_groups, __pyx_k_num_groups, sizeof(__pyx_k_num_groups), 0, 0, 1, 1},
  {&__pyx_n_s_opts, __pyx_k_opts, sizeof(__pyx_k_opts), 0, 0, 1, 1},
  {&__pyx_n_s_original_pattern, __pyx_k_original_pattern, sizeof(__pyx_k_original_pattern), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_kp_s_p_L_p_Nd, __pyx_k_p_L_p_Nd, sizeof(__pyx_k_p_L_p_Nd), 0, 0, 1, 0},
  {&__pyx_kp_s_p_L_p_Nd_2, __pyx_k_p_L_p_Nd_2, sizeof(__pyx_k_p_L_p_Nd_2), 0, 0, 1, 0},
  {&__pyx_kp_s_p_L_p_Nd_3, __pyx_k_p_L_p_Nd_3, sizeof(__pyx_k_p_L_p_Nd_3), 0, 0, 1, 0},
  {&__pyx_kp_s_p_Nd, __pyx_k_p_Nd, sizeof(__pyx_k_p_Nd), 0, 0, 1, 0},
  {&__pyx_kp_s_p_Nd_2, __pyx_k_p_Nd_2, sizeof(__pyx_k_p_Nd_2), 0, 0, 1, 0},
  {&__pyx_n_s_pattern, __pyx_k_pattern, sizeof(__pyx_k_pattern), 0, 0, 1, 1},
  {&__pyx_n_s_pattern_object, __pyx_k_pattern_object, sizeof(__pyx_k_pattern_object), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_prepare_pattern, __pyx_k_prepare_pattern, sizeof(__pyx_k_prepare_pattern), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pypattern, __pyx_k_pypattern, sizeof(__pyx_k_pypattern), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {&__pyx_n_s_re2, __pyx_k_re2, sizeof(__pyx_k_re2), 0, 0, 1, 1},
  {&__pyx_n_s_re_pattern, __pyx_k_re_pattern, sizeof(__pyx_k_re_pattern), 0, 0, 1, 1},
  {&__pyx_n_s_repl, __pyx_k_repl, sizeof(__pyx_k_repl), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_kp_s_s_p_Z, __pyx_k_s_p_Z, sizeof(__pyx_k_s_p_Z), 0, 0, 1, 0},
  {&__pyx_kp_s_s_p_Z_2, __pyx_k_s_p_Z_2, sizeof(__pyx_k_s_p_Z_2), 0, 0, 1, 0},
  {&__pyx_kp_s_s_p_Z_3, __pyx_k_s_p_Z_3, sizeof(__pyx_k_s_p_Z_3), 0, 0, 1, 0},
  {&__pyx_n_s_search, __pyx_k_search, sizeof(__pyx_k_search), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_set_fallback_notification, __pyx_k_set_fallback_notification, sizeof(__pyx_k_set_fallback_notification), 0, 0, 1, 1},
  {&__pyx_n_s_source, __pyx_k_source, sizeof(__pyx_k_source), 0, 0, 1, 1},
  {&__pyx_n_s_span, __pyx_k_span, sizeof(__pyx_k_span), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_stdout, __pyx_k_stdout, sizeof(__pyx_k_stdout), 0, 0, 1, 1},
  {&__pyx_n_s_strflags, __pyx_k_strflags, sizeof(__pyx_k_strflags), 0, 0, 1, 1},
  {&__pyx_n_s_string, __pyx_k_string, sizeof(__pyx_k_string), 0, 0, 1, 1},
  {&__pyx_n_s_sub, __pyx_k_sub, sizeof(__pyx_k_sub), 0, 0, 1, 1},
  {&__pyx_n_s_subn, __pyx_k_subn, sizeof(__pyx_k_subn), 0, 0, 1, 1},
  {&__pyx_n_s_subn_callback, __pyx_k_subn_callback, sizeof(__pyx_k_subn_callback), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_this, __pyx_k_this, sizeof(__pyx_k_this), 0, 0, 1, 1},
  {&__pyx_n_s_tostring, __pyx_k_tostring, sizeof(__pyx_k_tostring), 0, 0, 1, 1},
  {&__pyx_kp_s_unexpected_end_of_regular_expres, __pyx_k_unexpected_end_of_regular_expres, sizeof(__pyx_k_unexpected_end_of_regular_expres), 0, 0, 1, 0},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 41, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 152, __pyx_L1_error)
  __pyx_builtin_NameError = __Pyx_GetBuiltinName(__pyx_n_s_NameError); if (!__pyx_builtin_NameError) __PYX_ERR(0, 185, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 204, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 257, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 297, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 415, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 690, __pyx_L1_error)
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) __PYX_ERR(0, 955, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "re2.pyx":41
 *     level = int(level)
 *     if level < 0 or level > 2:
 *         raise ValueError("This function expects a valid notification level.")             # <<<<<<<<<<<<<<
 *     current_notification = level
 * 
 */

#line 41 "re2.pyx"
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_This_function_expects_a_valid_no); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 41, __pyx_L1_error)

#line 41 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple_);

#line 41 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "re2.pyx":204
 * 
 *         if idx > self.nmatches - 1:
 *             raise IndexError("no such group")             # <<<<<<<<<<<<<<
 *         return self._groups[idx]
 * 
 */

#line 204 "re2.pyx"
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_such_group); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 204, __pyx_L1_error)

#line 204 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__2);

#line 204 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "re2.pyx":273
 *         for i in range(self.nmatches):
 *             if self.matches[i].data() == NULL:
 *                 spans.append((-1, -1))             # <<<<<<<<<<<<<<
 *             else:
 *                 piece = &self.matches[i]
 */

#line 273 "re2.pyx"
  __pyx_tuple__3 = PyTuple_Pack(2, __pyx_int_neg_1, __pyx_int_neg_1); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 273, __pyx_L1_error)

#line 273 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__3);

#line 273 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "re2.pyx":277
 *                 piece = &self.matches[i]
 *                 if piece.data() == NULL:
 *                     return (-1, -1)             # <<<<<<<<<<<<<<
 *                 start = piece.data() - s
 *                 end = start + piece.length()
 */

#line 277 "re2.pyx"
  __pyx_tuple__4 = PyTuple_Pack(2, __pyx_int_neg_1, __pyx_int_neg_1); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 277, __pyx_L1_error)

#line 277 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__4);

#line 277 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "re2.pyx":296
 *         # TODO - This can be optimized to work a bit faster in C.
 *         # Expand a template with groups
 *         items = template.split('\\')             # <<<<<<<<<<<<<<
 *         for i, item in enumerate(items[1:]):
 *             if item[0].isdigit():
 */

#line 296 "re2.pyx"
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s__5); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 296, __pyx_L1_error)

#line 296 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__6);

#line 296 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "re2.pyx":297
 *         # Expand a template with groups
 *         items = template.split('\\')
 *         for i, item in enumerate(items[1:]):             # <<<<<<<<<<<<<<
 *             if item[0].isdigit():
 *                 # Number group
 */

#line 297 "re2.pyx"
  __pyx_slice__7 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__7)) __PYX_ERR(0, 297, __pyx_L1_error)

#line 297 "re2.pyx"
  __Pyx_GOTREF(__pyx_slice__7);

#line 297 "re2.pyx"
  __Pyx_GIVEREF(__pyx_slice__7);

  /* "re2.pyx":301
 *                 # Number group
 *                 if item[0] == '0':
 *                     items[i + 1] = '\x00' + item[1:]             # <<<<<<<<<<<<<<
 *                 else:
 *                     items[i + 1] = self.group(int(item[0])) + item[1:]
 */

#line 301 "re2.pyx"
  __pyx_slice__9 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__9)) __PYX_ERR(0, 301, __pyx_L1_error)

#line 301 "re2.pyx"
  __Pyx_GOTREF(__pyx_slice__9);

#line 301 "re2.pyx"
  __Pyx_GIVEREF(__pyx_slice__9);

  /* "re2.pyx":303
 *                     items[i + 1] = '\x00' + item[1:]
 *                 else:
 *                     items[i + 1] = self.group(int(item[0])) + item[1:]             # <<<<<<<<<<<<<<
 *             elif item[:2] == 'g<' and '>' in item:
 *                 # This is a named group
 */

#line 303 "re2.pyx"
  __pyx_slice__10 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__10)) __PYX_ERR(0, 303, __pyx_L1_error)

#line 303 "re2.pyx"
  __Pyx_GOTREF(__pyx_slice__10);

#line 303 "re2.pyx"
  __Pyx_GIVEREF(__pyx_slice__10);

  /* "re2.pyx":304
 *                 else:
 *                     items[i + 1] = self.group(int(item[0])) + item[1:]
 *             elif item[:2] == 'g<' and '>' in item:             # <<<<<<<<<<<<<<
 *                 # This is a named group
 *                 name, rest = item[2:].split('>', 1)
 */

#line 304 "re2.pyx"
  __pyx_slice__11 = PySlice_New(Py_None, __pyx_int_2, Py_None); if (unlikely(!__pyx_slice__11)) __PYX_ERR(0, 304, __pyx_L1_error)

#line 304 "re2.pyx"
  __Pyx_GOTREF(__pyx_slice__11);

#line 304 "re2.pyx"
  __Pyx_GIVEREF(__pyx_slice__11);

  /* "re2.pyx":306
 *             elif item[:2] == 'g<' and '>' in item:
 *                 # This is a named group
 *                 name, rest = item[2:].split('>', 1)             # <<<<<<<<<<<<<<
 *                 items[i + 1] = self.group(name) + rest
 *             else:
 */

#line 306 "re2.pyx"
  __pyx_slice__13 = PySlice_New(__pyx_int_2, Py_None, Py_None); if (unlikely(!__pyx_slice__13)) __PYX_ERR(0, 306, __pyx_L1_error)

#line 306 "re2.pyx"
  __Pyx_GOTREF(__pyx_slice__13);

#line 306 "re2.pyx"
  __Pyx_GIVEREF(__pyx_slice__13);

#line 306 "re2.pyx"
  __pyx_tuple__14 = PyTuple_Pack(2, __pyx_kp_s__12, __pyx_int_1); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 306, __pyx_L1_error)

#line 306 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__14);

#line 306 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "re2.pyx":344
 *         if type(group) is int:
 *             if group > len(self._spans):
 *                 raise IndexError("no such group")             # <<<<<<<<<<<<<<
 *             return self._spans[group]
 *         else:
 */

#line 344 "re2.pyx"
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_such_group); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 344, __pyx_L1_error)

#line 344 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__16);

#line 344 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "re2.pyx":349
 *             self.groupdict()
 *             if group not in self._named_indexes:
 *                 raise IndexError("no such group")             # <<<<<<<<<<<<<<
 *             return self._spans[self._named_indexes[group]]
 * 
 */

#line 349 "re2.pyx"
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_such_group); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 349, __pyx_L1_error)

#line 349 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__17);

#line 349 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "re2.pyx":415
 * 
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 * 
 *         if endpos >= 0 and endpos <= pos:
 */

#line 415 "re2.pyx"
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_expected_string_or_buffer); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 415, __pyx_L1_error)

#line 415 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__18);

#line 415 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "re2.pyx":477
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 *         encoded = <bint>encoded
 * 
 */

#line 477 "re2.pyx"
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_expected_string_or_buffer); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 477, __pyx_L1_error)

#line 477 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__20);

#line 477 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "re2.pyx":502
 *             if as_match:
 *                 if self.ngroups > 1:
 *                     resultlist.append(m.groups(""))             # <<<<<<<<<<<<<<
 *                 else:
 *                     resultlist.append(m.group(self.ngroups))
 */

#line 502 "re2.pyx"
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s__15); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 502, __pyx_L1_error)

#line 502 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__21);

#line 502 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "re2.pyx":556
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 * 
 *         encoded = <bint>encoded
 */

#line 556 "re2.pyx"
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_expected_string_or_buffer); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 556, __pyx_L1_error)

#line 556 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__22);

#line 556 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "re2.pyx":641
 *         repl = unicode_to_bytestring(repl, &repl_encoded)
 *         if pystring_to_bytestring(repl, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 * 
 *         fixed_repl = NULL
 */

#line 641 "re2.pyx"
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_expected_string_or_buffer); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 641, __pyx_L1_error)

#line 641 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__23);

#line 641 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "re2.pyx":652
 *                 s += 1
 *                 if s == end:
 *                     raise RegexError("Invalid rewrite pattern")             # <<<<<<<<<<<<<<
 *                 c = s[0]
 *                 if c == '\\' or (c >= '0' and c <= '9'):
 */

#line 652 "re2.pyx"
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_Invalid_rewrite_pattern); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 652, __pyx_L1_error)

#line 652 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__24);

#line 652 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "re2.pyx":690
 *             del input_str
 *             del sp
 *             raise NotImplementedError("So far pyre2 does not support custom replacement counts")             # <<<<<<<<<<<<<<
 * 
 *         if string_encoded or (repl_encoded and total_replacements > 0):
 */

#line 690 "re2.pyx"
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_So_far_pyre2_does_not_support_cu); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 690, __pyx_L1_error)

#line 690 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__25);

#line 690 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "re2.pyx":722
 *         string = unicode_to_bytestring(string, &encoded)
 *         if pystring_to_bytestring(string, &cstring, &size) == -1:
 *             raise TypeError("expected string or buffer")             # <<<<<<<<<<<<<<
 *         encoded = <bint>encoded
 * 
 */

#line 722 "re2.pyx"
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_expected_string_or_buffer); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 722, __pyx_L1_error)

#line 722 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__26);

#line 722 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "re2.pyx":921
 *     if isinstance(pattern, (Pattern, SREPattern)):
 *         if flags:
 *             raise ValueError('Cannot process flags argument with a compiled pattern')             # <<<<<<<<<<<<<<
 *         return pattern
 * 
 */

#line 921 "re2.pyx"
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_Cannot_process_flags_argument_wi); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 921, __pyx_L1_error)

#line 921 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__33);

#line 921 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "re2.pyx":965
 *     pattern = unicode_to_bytestring(pattern, &encoded)
 *     if pystring_to_bytestring(pattern, &string, &length) == -1:
 *         raise TypeError("first argument must be a string or compiled pattern")             # <<<<<<<<<<<<<<
 * 
 *     s = new _re2.StringPiece(string, length)
 */

#line 965 "re2.pyx"
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_first_argument_must_be_a_string); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 965, __pyx_L1_error)

#line 965 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__34);

#line 965 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "re2.pyx":1079
 *             else:
 *                 s[i] = "\\" + c
 *     return pattern[:0].join(s)             # <<<<<<<<<<<<<<
 * 
 */

#line 1079 "re2.pyx"
  __pyx_slice__35 = PySlice_New(Py_None, __pyx_int_0, Py_None); if (unlikely(!__pyx_slice__35)) __PYX_ERR(0, 1079, __pyx_L1_error)

#line 1079 "re2.pyx"
  __Pyx_GOTREF(__pyx_slice__35);

#line 1079 "re2.pyx"
  __Pyx_GIVEREF(__pyx_slice__35);

  /* "re2.pyx":23
 * FALLBACK_EXCEPTION = 2
 * 
 * VERSION = (0, 2, 23)             # <<<<<<<<<<<<<<
 * VERSION_HEX = 0x000217
 * 
 */

#line 23 "re2.pyx"
  __pyx_tuple__36 = PyTuple_Pack(3, __pyx_int_0, __pyx_int_2, __pyx_int_23); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 23, __pyx_L1_error)

#line 23 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__36);

#line 23 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "re2.pyx":27
 * 
 * # Type of compiled re object from Python stdlib
 * SREPattern = type(re.compile(''))             # <<<<<<<<<<<<<<
 * 
 * cdef int current_notification = FALLBACK_QUIETLY
 */

#line 27 "re2.pyx"
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s__15); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 27, __pyx_L1_error)

#line 27 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__37);

#line 27 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "re2.pyx":31
 * cdef int current_notification = FALLBACK_QUIETLY
 * 
 * def set_fallback_notification(level):             # <<<<<<<<<<<<<<
 *     """
 *     Set the fallback notification to a level; one of:
 */

#line 31 "re2.pyx"
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_n_s_level); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 31, __pyx_L1_error)

#line 31 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__38);

#line 31 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__38);

#line 31 "re2.pyx"
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_gdkar_git_repos_extra_pyre, __pyx_n_s_set_fallback_notification, 31, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 31, __pyx_L1_error)

  /* "re2.pyx":766
 * _MAXCACHE = 100
 * 
 * def compile(pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     cachekey = (type(pattern),) + (pattern, flags)
 *     p = _cache.get(cachekey)
 */

#line 766 "re2.pyx"
  __pyx_tuple__40 = PyTuple_Pack(5, __pyx_n_s_pattern, __pyx_n_s_flags, __pyx_n_s_max_mem, __pyx_n_s_cachekey, __pyx_n_s_p); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 766, __pyx_L1_error)

#line 766 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__40);

#line 766 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__40);

#line 766 "re2.pyx"
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_gdkar_git_repos_extra_pyre, __pyx_n_s_compile_2, 766, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 766, __pyx_L1_error)

  /* "re2.pyx":787
 * 
 * class Tokenizer:
 *     def __init__(self, string):             # <<<<<<<<<<<<<<
 *         self.string = string
 *         self.index = 0
 */

#line 787 "re2.pyx"
  __pyx_tuple__43 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_string); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 787, __pyx_L1_error)

#line 787 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__43);

#line 787 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__43);

#line 787 "re2.pyx"
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_gdkar_git_repos_extra_pyre, __pyx_n_s_init, 787, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 787, __pyx_L1_error)

  /* "re2.pyx":791
 *         self.index = 0
 *         self.__next()
 *     def __next(self):             # <<<<<<<<<<<<<<
 *         if self.index >= len(self.string):
 *             self.next = None
 */

#line 791 "re2.pyx"
  __pyx_tuple__45 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_ch, __pyx_n_s_c); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 791, __pyx_L1_error)

#line 791 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__45);

#line 791 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__45);

#line 791 "re2.pyx"
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_gdkar_git_repos_extra_pyre, __pyx_n_s_next_2, 791, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 791, __pyx_L1_error)

  /* "re2.pyx":804
 *         self.index = self.index + len(ch)
 *         self.next = ch
 *     def get(self):             # <<<<<<<<<<<<<<
 *         this = self.next
 *         self.__next()
 */

#line 804 "re2.pyx"
  __pyx_tuple__47 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_this); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 804, __pyx_L1_error)

#line 804 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__47);

#line 804 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__47);

#line 804 "re2.pyx"
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_gdkar_git_repos_extra_pyre, __pyx_n_s_get, 804, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 804, __pyx_L1_error)

  /* "re2.pyx":809
 *         return this
 * 
 * def prepare_pattern(pattern, int flags):             # <<<<<<<<<<<<<<
 *     source = Tokenizer(pattern)
 *     new_pattern = []
 */

#line 809 "re2.pyx"
  __pyx_tuple__49 = PyTuple_Pack(6, __pyx_n_s_pattern, __pyx_n_s_flags, __pyx_n_s_source, __pyx_n_s_new_pattern, __pyx_n_s_strflags, __pyx_n_s_this); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 809, __pyx_L1_error)

#line 809 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__49);

#line 809 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__49);

#line 809 "re2.pyx"
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_gdkar_git_repos_extra_pyre, __pyx_n_s_prepare_pattern, 809, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 809, __pyx_L1_error)

  /* "re2.pyx":908
 * 
 * 
 * def _compile(pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     """
 *     Compile a regular expression pattern, returning a pattern object.
 */

#line 908 "re2.pyx"
  __pyx_tuple__51 = PyTuple_Pack(13, __pyx_n_s_pattern, __pyx_n_s_flags, __pyx_n_s_max_mem, __pyx_n_s_string, __pyx_n_s_length, __pyx_n_s_s, __pyx_n_s_opts, __pyx_n_s_error_code, __pyx_n_s_encoded, __pyx_n_s_original_pattern, __pyx_n_s_error_msg, __pyx_n_s_re_pattern, __pyx_n_s_pypattern); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 908, __pyx_L1_error)

#line 908 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__51);

#line 908 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__51);

#line 908 "re2.pyx"
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(3, 0, 13, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_gdkar_git_repos_extra_pyre, __pyx_n_s_compile, 908, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 908, __pyx_L1_error)

  /* "re2.pyx":1000
 *     return pypattern
 * 
 * def search(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Scan through string looking for a match to the pattern, returning
 */

#line 1000 "re2.pyx"
  __pyx_tuple__53 = PyTuple_Pack(3, __pyx_n_s_pattern, __pyx_n_s_string, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 1000, __pyx_L1_error)

#line 1000 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__53);

#line 1000 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__53);

#line 1000 "re2.pyx"
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_gdkar_git_repos_extra_pyre, __pyx_n_s_search, 1000, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 1000, __pyx_L1_error)

  /* "re2.pyx":1007
 *     return compile(pattern, flags).search(string)
 * 
 * def match(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Try to apply the pattern at the start of the string, returning
 */

#line 1007 "re2.pyx"
  __pyx_tuple__55 = PyTuple_Pack(3, __pyx_n_s_pattern, __pyx_n_s_string, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 1007, __pyx_L1_error)

#line 1007 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__55);

#line 1007 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__55);

#line 1007 "re2.pyx"
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_gdkar_git_repos_extra_pyre, __pyx_n_s_match, 1007, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 1007, __pyx_L1_error)

  /* "re2.pyx":1014
 *     return compile(pattern, flags).match(string)
 * 
 * def finditer(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return an list of all non-overlapping matches in the
 */

#line 1014 "re2.pyx"
  __pyx_tuple__57 = PyTuple_Pack(3, __pyx_n_s_pattern, __pyx_n_s_string, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 1014, __pyx_L1_error)

#line 1014 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__57);

#line 1014 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__57);

#line 1014 "re2.pyx"
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_gdkar_git_repos_extra_pyre, __pyx_n_s_finditer, 1014, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 1014, __pyx_L1_error)

  /* "re2.pyx":1023
 *     return compile(pattern, flags).finditer(string)
 * 
 * def findall(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return an list of all non-overlapping matches in the
 */

#line 1023 "re2.pyx"
  __pyx_tuple__59 = PyTuple_Pack(3, __pyx_n_s_pattern, __pyx_n_s_string, __pyx_n_s_flags); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 1023, __pyx_L1_error)

#line 1023 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__59);

#line 1023 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__59);

#line 1023 "re2.pyx"
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_gdkar_git_repos_extra_pyre, __pyx_n_s_findall, 1023, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 1023, __pyx_L1_error)

  /* "re2.pyx":1032
 *     return compile(pattern, flags).findall(string)
 * 
 * def split(pattern, string, int maxsplit=0):             # <<<<<<<<<<<<<<
 *     """
 *     Split the source string by the occurrences of the pattern,
 */

#line 1032 "re2.pyx"
  __pyx_tuple__61 = PyTuple_Pack(3, __pyx_n_s_pattern, __pyx_n_s_string, __pyx_n_s_maxsplit); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 1032, __pyx_L1_error)

#line 1032 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__61);

#line 1032 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__61);

#line 1032 "re2.pyx"
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_gdkar_git_repos_extra_pyre, __pyx_n_s_split, 1032, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 1032, __pyx_L1_error)

  /* "re2.pyx":1039
 *     return compile(pattern).split(string, maxsplit)
 * 
 * def sub(pattern, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return the string obtained by replacing the leftmost
 */

#line 1039 "re2.pyx"
  __pyx_tuple__63 = PyTuple_Pack(4, __pyx_n_s_pattern, __pyx_n_s_repl, __pyx_n_s_string, __pyx_n_s_count); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 1039, __pyx_L1_error)

#line 1039 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__63);

#line 1039 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__63);

#line 1039 "re2.pyx"
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_gdkar_git_repos_extra_pyre, __pyx_n_s_sub, 1039, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(0, 1039, __pyx_L1_error)

  /* "re2.pyx":1050
 *     return compile(pattern).sub(repl, string, count)
 * 
 * def subn(pattern, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return a 2-tuple containing (new_string, number).
 */

#line 1050 "re2.pyx"
  __pyx_tuple__65 = PyTuple_Pack(4, __pyx_n_s_pattern, __pyx_n_s_repl, __pyx_n_s_string, __pyx_n_s_count); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 1050, __pyx_L1_error)

#line 1050 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__65);

#line 1050 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__65);

#line 1050 "re2.pyx"
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_gdkar_git_repos_extra_pyre, __pyx_n_s_subn, 1050, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(0, 1050, __pyx_L1_error)

  /* "re2.pyx":1068
 * del c
 * 
 * def escape(pattern):             # <<<<<<<<<<<<<<
 *     "Escape all non-alphanumeric characters in pattern."
 *     s = list(pattern)
 */

#line 1068 "re2.pyx"
  __pyx_tuple__67 = PyTuple_Pack(5, __pyx_n_s_pattern, __pyx_n_s_s, __pyx_n_s_alphanum_2, __pyx_n_s_i, __pyx_n_s_c); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 1068, __pyx_L1_error)

#line 1068 "re2.pyx"
  __Pyx_GOTREF(__pyx_tuple__67);

#line 1068 "re2.pyx"
  __Pyx_GIVEREF(__pyx_tuple__67);

#line 1068 "re2.pyx"
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_gdkar_git_repos_extra_pyre, __pyx_n_s_escape, 1068, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 1068, __pyx_L1_error)

#line 1068 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1068 "re2.pyx"
  return 0;

#line 1068 "re2.pyx"
  __pyx_L1_error:;

#line 1068 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1068 "re2.pyx"
  return -1;

#line 1068 "re2.pyx"
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_23 = PyInt_FromLong(23); if (unlikely(!__pyx_int_23)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_535 = PyInt_FromLong(535); if (unlikely(!__pyx_int_535)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initre2(void); /*proto*/
PyMODINIT_FUNC initre2(void)
#else
PyMODINIT_FUNC PyInit_re2(void); /*proto*/
PyMODINIT_FUNC PyInit_re2(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_re2(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("re2", __pyx_methods, __pyx_k_File_re2_pyx_starting_at_line_1, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_re2) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "re2")) {
      if (unlikely(PyDict_SetItemString(modules, "re2", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_3re2_Match = &__pyx_vtable_3re2_Match;
  __pyx_vtable_3re2_Match.init_groups = (PyObject *(*)(struct __pyx_obj_3re2_Match *))__pyx_f_3re2_5Match_init_groups;
  __pyx_vtable_3re2_Match._convert_positions = (PyObject *(*)(struct __pyx_obj_3re2_Match *, PyObject *))__pyx_f_3re2_5Match__convert_positions;
  __pyx_vtable_3re2_Match._make_spans = (PyObject *(*)(struct __pyx_obj_3re2_Match *))__pyx_f_3re2_5Match__make_spans;
  if (PyType_Ready(&__pyx_type_3re2_Match) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_type_3re2_Match.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_3re2_Match, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 97, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_3re2_5Match___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_3re2_5Match___init__.doc = __pyx_doc_3re2_5Match___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_3re2_5Match___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_3re2_Match.tp_dict, __pyx_vtabptr_3re2_Match) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Match", (PyObject *)&__pyx_type_3re2_Match) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_ptype_3re2_Match = &__pyx_type_3re2_Match;
  __pyx_vtabptr_3re2_Pattern = &__pyx_vtable_3re2_Pattern;
  __pyx_vtable_3re2_Pattern._search = (PyObject *(*)(struct __pyx_obj_3re2_Pattern *, PyObject *, int, int, RE2::Anchor))__pyx_f_3re2_7Pattern__search;
  __pyx_vtable_3re2_Pattern._print_pattern = (PyObject *(*)(struct __pyx_obj_3re2_Pattern *))__pyx_f_3re2_7Pattern__print_pattern;
  __pyx_vtable_3re2_Pattern._finditer = (PyObject *(*)(struct __pyx_obj_3re2_Pattern *, PyObject *, struct __pyx_opt_args_3re2_7Pattern__finditer *__pyx_optional_args))__pyx_f_3re2_7Pattern__finditer;
  if (PyType_Ready(&__pyx_type_3re2_Pattern) < 0) __PYX_ERR(0, 378, __pyx_L1_error)
  __pyx_type_3re2_Pattern.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_3re2_Pattern.tp_dict, __pyx_vtabptr_3re2_Pattern) < 0) __PYX_ERR(0, 378, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Pattern", (PyObject *)&__pyx_type_3re2_Pattern) < 0) __PYX_ERR(0, 378, __pyx_L1_error)
  if (__pyx_type_3re2_Pattern.tp_weaklistoffset == 0) __pyx_type_3re2_Pattern.tp_weaklistoffset = offsetof(struct __pyx_obj_3re2_Pattern, __weakref__);
  __pyx_ptype_3re2_Pattern = &__pyx_type_3re2_Pattern;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "re2.pyx":3
 * # cython: infer_types(False) language='c++'
 * # Import re flags to be compatible.
 * import sys             # <<<<<<<<<<<<<<
 * import re
 * 
 */

#line 3 "re2.pyx"
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)

#line 3 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 3 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(0, 3, __pyx_L1_error)

#line 3 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":4
 * # Import re flags to be compatible.
 * import sys
 * import re             # <<<<<<<<<<<<<<
 * 
 * I = re.I
 */

#line 4 "re2.pyx"
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_re, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)

#line 4 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_re, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)

#line 4 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":6
 * import re
 * 
 * I = re.I             # <<<<<<<<<<<<<<
 * IGNORECASE = re.IGNORECASE
 * M = re.M
 */

#line 6 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)

#line 6 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 6 "re2.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_I); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)

#line 6 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 6 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 6 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_I, __pyx_t_2) < 0) __PYX_ERR(0, 6, __pyx_L1_error)

#line 6 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":7
 * 
 * I = re.I
 * IGNORECASE = re.IGNORECASE             # <<<<<<<<<<<<<<
 * M = re.M
 * MULTILINE = re.MULTILINE
 */

#line 7 "re2.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)

#line 7 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 7 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_IGNORECASE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)

#line 7 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 7 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 7 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IGNORECASE, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)

#line 7 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":8
 * I = re.I
 * IGNORECASE = re.IGNORECASE
 * M = re.M             # <<<<<<<<<<<<<<
 * MULTILINE = re.MULTILINE
 * S = re.S
 */

#line 8 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 8 "re2.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_M); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 8 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 8 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_M, __pyx_t_2) < 0) __PYX_ERR(0, 8, __pyx_L1_error)

#line 8 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":9
 * IGNORECASE = re.IGNORECASE
 * M = re.M
 * MULTILINE = re.MULTILINE             # <<<<<<<<<<<<<<
 * S = re.S
 * DOTALL = re.DOTALL
 */

#line 9 "re2.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)

#line 9 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 9 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_MULTILINE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)

#line 9 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 9 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 9 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MULTILINE, __pyx_t_1) < 0) __PYX_ERR(0, 9, __pyx_L1_error)

#line 9 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":10
 * M = re.M
 * MULTILINE = re.MULTILINE
 * S = re.S             # <<<<<<<<<<<<<<
 * DOTALL = re.DOTALL
 * U = re.U
 */

#line 10 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)

#line 10 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 10 "re2.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_S); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)

#line 10 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 10 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 10 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_S, __pyx_t_2) < 0) __PYX_ERR(0, 10, __pyx_L1_error)

#line 10 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":11
 * MULTILINE = re.MULTILINE
 * S = re.S
 * DOTALL = re.DOTALL             # <<<<<<<<<<<<<<
 * U = re.U
 * UNICODE = re.UNICODE
 */

#line 11 "re2.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)

#line 11 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 11 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_DOTALL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)

#line 11 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 11 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 11 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DOTALL, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)

#line 11 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":12
 * S = re.S
 * DOTALL = re.DOTALL
 * U = re.U             # <<<<<<<<<<<<<<
 * UNICODE = re.UNICODE
 * X = re.X
 */

#line 12 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)

#line 12 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 12 "re2.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_U); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)

#line 12 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 12 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 12 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_U, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)

#line 12 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":13
 * DOTALL = re.DOTALL
 * U = re.U
 * UNICODE = re.UNICODE             # <<<<<<<<<<<<<<
 * X = re.X
 * VERBOSE = re.VERBOSE
 */

#line 13 "re2.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)

#line 13 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 13 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_UNICODE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)

#line 13 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 13 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 13 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UNICODE, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)

#line 13 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":14
 * U = re.U
 * UNICODE = re.UNICODE
 * X = re.X             # <<<<<<<<<<<<<<
 * VERBOSE = re.VERBOSE
 * L = re.L
 */

#line 14 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)

#line 14 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 14 "re2.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_X); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)

#line 14 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 14 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 14 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_X, __pyx_t_2) < 0) __PYX_ERR(0, 14, __pyx_L1_error)

#line 14 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":15
 * UNICODE = re.UNICODE
 * X = re.X
 * VERBOSE = re.VERBOSE             # <<<<<<<<<<<<<<
 * L = re.L
 * LOCALE = re.LOCALE
 */

#line 15 "re2.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)

#line 15 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 15 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_VERBOSE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)

#line 15 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 15 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 15 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VERBOSE, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)

#line 15 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":16
 * X = re.X
 * VERBOSE = re.VERBOSE
 * L = re.L             # <<<<<<<<<<<<<<
 * LOCALE = re.LOCALE
 * 
 */

#line 16 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)

#line 16 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 16 "re2.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_L); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)

#line 16 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 16 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 16 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_L, __pyx_t_2) < 0) __PYX_ERR(0, 16, __pyx_L1_error)

#line 16 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":17
 * VERBOSE = re.VERBOSE
 * L = re.L
 * LOCALE = re.LOCALE             # <<<<<<<<<<<<<<
 * 
 * FALLBACK_QUIETLY = 0
 */

#line 17 "re2.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)

#line 17 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 17 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_LOCALE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)

#line 17 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 17 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 17 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOCALE, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)

#line 17 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":19
 * LOCALE = re.LOCALE
 * 
 * FALLBACK_QUIETLY = 0             # <<<<<<<<<<<<<<
 * FALLBACK_WARNING = 1
 * FALLBACK_EXCEPTION = 2
 */

#line 19 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FALLBACK_QUIETLY, __pyx_int_0) < 0) __PYX_ERR(0, 19, __pyx_L1_error)

  /* "re2.pyx":20
 * 
 * FALLBACK_QUIETLY = 0
 * FALLBACK_WARNING = 1             # <<<<<<<<<<<<<<
 * FALLBACK_EXCEPTION = 2
 * 
 */

#line 20 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FALLBACK_WARNING, __pyx_int_1) < 0) __PYX_ERR(0, 20, __pyx_L1_error)

  /* "re2.pyx":21
 * FALLBACK_QUIETLY = 0
 * FALLBACK_WARNING = 1
 * FALLBACK_EXCEPTION = 2             # <<<<<<<<<<<<<<
 * 
 * VERSION = (0, 2, 23)
 */

#line 21 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FALLBACK_EXCEPTION, __pyx_int_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)

  /* "re2.pyx":23
 * FALLBACK_EXCEPTION = 2
 * 
 * VERSION = (0, 2, 23)             # <<<<<<<<<<<<<<
 * VERSION_HEX = 0x000217
 * 
 */

#line 23 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VERSION, __pyx_tuple__36) < 0) __PYX_ERR(0, 23, __pyx_L1_error)

  /* "re2.pyx":24
 * 
 * VERSION = (0, 2, 23)
 * VERSION_HEX = 0x000217             # <<<<<<<<<<<<<<
 * 
 * # Type of compiled re object from Python stdlib
 */

#line 24 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VERSION_HEX, __pyx_int_535) < 0) __PYX_ERR(0, 24, __pyx_L1_error)

  /* "re2.pyx":27
 * 
 * # Type of compiled re object from Python stdlib
 * SREPattern = type(re.compile(''))             # <<<<<<<<<<<<<<
 * 
 * cdef int current_notification = FALLBACK_QUIETLY
 */

#line 27 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)

#line 27 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 27 "re2.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_compile_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)

#line 27 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 27 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 27 "re2.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)

#line 27 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 27 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 27 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SREPattern, ((PyObject *)Py_TYPE(__pyx_t_1))) < 0) __PYX_ERR(0, 27, __pyx_L1_error)

#line 27 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":29
 * SREPattern = type(re.compile(''))
 * 
 * cdef int current_notification = FALLBACK_QUIETLY             # <<<<<<<<<<<<<<
 * 
 * def set_fallback_notification(level):
 */

#line 29 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FALLBACK_QUIETLY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)

#line 29 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 29 "re2.pyx"
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 29, __pyx_L1_error)

#line 29 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 29 "re2.pyx"
  __pyx_v_3re2_current_notification = __pyx_t_3;

  /* "re2.pyx":31
 * cdef int current_notification = FALLBACK_QUIETLY
 * 
 * def set_fallback_notification(level):             # <<<<<<<<<<<<<<
 *     """
 *     Set the fallback notification to a level; one of:
 */

#line 31 "re2.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_1set_fallback_notification, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)

#line 31 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 31 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_fallback_notification, __pyx_t_1) < 0) __PYX_ERR(0, 31, __pyx_L1_error)

#line 31 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":45
 * 
 * 
 * class RegexError(re.error):             # <<<<<<<<<<<<<<
 *     """
 *     Some error has occured in compilation of the regex.
 */

#line 45 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)

#line 45 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 45 "re2.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_error); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)

#line 45 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 45 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 45 "re2.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)

#line 45 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 45 "re2.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 45 "re2.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);

#line 45 "re2.pyx"
  __pyx_t_2 = 0;

#line 45 "re2.pyx"
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)

#line 45 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 45 "re2.pyx"
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_RegexError, __pyx_n_s_RegexError, (PyObject *) NULL, __pyx_n_s_re2, __pyx_kp_s_File_re2_pyx_starting_at_line_45); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 45, __pyx_L1_error)

#line 45 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 45 "re2.pyx"
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_RegexError, __pyx_t_1, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 45, __pyx_L1_error)

#line 45 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 45 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RegexError, __pyx_t_5) < 0) __PYX_ERR(0, 45, __pyx_L1_error)

#line 45 "re2.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 45 "re2.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 45 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 45 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":51
 *     pass
 * 
 * error = RegexError             # <<<<<<<<<<<<<<
 * 
 * cdef int _I = I, _M = M, _S = S, _U = U, _X = X, _L = L
 */

#line 51 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_RegexError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)

#line 51 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 51 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_error, __pyx_t_1) < 0) __PYX_ERR(0, 51, __pyx_L1_error)

#line 51 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":53
 * error = RegexError
 * 
 * cdef int _I = I, _M = M, _S = S, _U = U, _X = X, _L = L             # <<<<<<<<<<<<<<
 * 
 * cimport _re2
 */

#line 53 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_I); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)

#line 53 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 53 "re2.pyx"
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 53, __pyx_L1_error)

#line 53 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 53 "re2.pyx"
  __pyx_v_3re2__I = __pyx_t_3;

#line 53 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_M); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)

#line 53 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 53 "re2.pyx"
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 53, __pyx_L1_error)

#line 53 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 53 "re2.pyx"
  __pyx_v_3re2__M = __pyx_t_3;

#line 53 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_S); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)

#line 53 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 53 "re2.pyx"
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 53, __pyx_L1_error)

#line 53 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 53 "re2.pyx"
  __pyx_v_3re2__S = __pyx_t_3;

#line 53 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_U); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)

#line 53 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 53 "re2.pyx"
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 53, __pyx_L1_error)

#line 53 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 53 "re2.pyx"
  __pyx_v_3re2__U = __pyx_t_3;

#line 53 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_X); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)

#line 53 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 53 "re2.pyx"
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 53, __pyx_L1_error)

#line 53 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 53 "re2.pyx"
  __pyx_v_3re2__X = __pyx_t_3;

#line 53 "re2.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_L); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)

#line 53 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 53 "re2.pyx"
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 53, __pyx_L1_error)

#line 53 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 53 "re2.pyx"
  __pyx_v_3re2__L = __pyx_t_3;

  /* "re2.pyx":58
 * cimport cpython.unicode
 * from cython.operator cimport preincrement as inc, dereference as deref
 * import warnings             # <<<<<<<<<<<<<<
 * 
 * cdef object cpp_to_pystring(_re2.cpp_string input):
 */

#line 58 "re2.pyx"
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_warnings, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)

#line 58 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 58 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_1) < 0) __PYX_ERR(0, 58, __pyx_L1_error)

#line 58 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":761
 *             del sp
 * 
 * _cache = {}             # <<<<<<<<<<<<<<
 * _cache_repl = {}
 * 
 */

#line 761 "re2.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 761, __pyx_L1_error)

#line 761 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 761 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cache, __pyx_t_1) < 0) __PYX_ERR(0, 761, __pyx_L1_error)

#line 761 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":762
 * 
 * _cache = {}
 * _cache_repl = {}             # <<<<<<<<<<<<<<
 * 
 * _MAXCACHE = 100
 */

#line 762 "re2.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 762, __pyx_L1_error)

#line 762 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 762 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cache_repl, __pyx_t_1) < 0) __PYX_ERR(0, 762, __pyx_L1_error)

#line 762 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":764
 * _cache_repl = {}
 * 
 * _MAXCACHE = 100             # <<<<<<<<<<<<<<
 * 
 * def compile(pattern, int flags=0, int max_mem=8388608):
 */

#line 764 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MAXCACHE, __pyx_int_100) < 0) __PYX_ERR(0, 764, __pyx_L1_error)

  /* "re2.pyx":766
 * _MAXCACHE = 100
 * 
 * def compile(pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     cachekey = (type(pattern),) + (pattern, flags)
 *     p = _cache.get(cachekey)
 */

#line 766 "re2.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_3compile, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 766, __pyx_L1_error)

#line 766 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 766 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compile_2, __pyx_t_1) < 0) __PYX_ERR(0, 766, __pyx_L1_error)

#line 766 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":778
 *     return p
 * 
 * class BackreferencesException(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 778 "re2.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 778, __pyx_L1_error)

#line 778 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 778 "re2.pyx"
  __Pyx_INCREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));

#line 778 "re2.pyx"
  __Pyx_GIVEREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));

#line 778 "re2.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));

#line 778 "re2.pyx"
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 778, __pyx_L1_error)

#line 778 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 778 "re2.pyx"
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_BackreferencesException, __pyx_n_s_BackreferencesException, (PyObject *) NULL, __pyx_n_s_re2, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 778, __pyx_L1_error)

#line 778 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 778 "re2.pyx"
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_BackreferencesException, __pyx_t_1, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 778, __pyx_L1_error)

#line 778 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 778 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BackreferencesException, __pyx_t_5) < 0) __PYX_ERR(0, 778, __pyx_L1_error)

#line 778 "re2.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 778 "re2.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 778 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 778 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":781
 *     pass
 * 
 * class CharClassProblemException(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 781 "re2.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)

#line 781 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 781 "re2.pyx"
  __Pyx_INCREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));

#line 781 "re2.pyx"
  __Pyx_GIVEREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));

#line 781 "re2.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));

#line 781 "re2.pyx"
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 781, __pyx_L1_error)

#line 781 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 781 "re2.pyx"
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_CharClassProblemException, __pyx_n_s_CharClassProblemException, (PyObject *) NULL, __pyx_n_s_re2, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 781, __pyx_L1_error)

#line 781 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 781 "re2.pyx"
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_CharClassProblemException, __pyx_t_1, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 781, __pyx_L1_error)

#line 781 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 781 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CharClassProblemException, __pyx_t_5) < 0) __PYX_ERR(0, 781, __pyx_L1_error)

#line 781 "re2.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 781 "re2.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 781 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 781 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":784
 *     pass
 * 
 * WHITESPACE = set(" \t\n\r\v\f")             # <<<<<<<<<<<<<<
 * 
 * class Tokenizer:
 */

#line 784 "re2.pyx"
  __pyx_t_1 = PySet_New(__pyx_kp_s__42); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 784, __pyx_L1_error)

#line 784 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 784 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WHITESPACE, __pyx_t_1) < 0) __PYX_ERR(0, 784, __pyx_L1_error)

#line 784 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":786
 * WHITESPACE = set(" \t\n\r\v\f")
 * 
 * class Tokenizer:             # <<<<<<<<<<<<<<
 *     def __init__(self, string):
 *         self.string = string
 */

#line 786 "re2.pyx"
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_Tokenizer, __pyx_n_s_Tokenizer, (PyObject *) NULL, __pyx_n_s_re2, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 786, __pyx_L1_error)

#line 786 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

  /* "re2.pyx":787
 * 
 * class Tokenizer:
 *     def __init__(self, string):             # <<<<<<<<<<<<<<
 *         self.string = string
 *         self.index = 0
 */

#line 787 "re2.pyx"
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_3re2_9Tokenizer_1__init__, 0, __pyx_n_s_Tokenizer___init, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)

#line 787 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 787 "re2.pyx"
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_init, __pyx_t_2) < 0) __PYX_ERR(0, 787, __pyx_L1_error)

#line 787 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":791
 *         self.index = 0
 *         self.__next()
 *     def __next(self):             # <<<<<<<<<<<<<<
 *         if self.index >= len(self.string):
 *             self.next = None
 */

#line 791 "re2.pyx"
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_3re2_9Tokenizer_3__next, 0, __pyx_n_s_Tokenizer___next, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 791, __pyx_L1_error)

#line 791 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 791 "re2.pyx"
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Tokenizer__next, __pyx_t_2) < 0) __PYX_ERR(0, 791, __pyx_L1_error)

#line 791 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":804
 *         self.index = self.index + len(ch)
 *         self.next = ch
 *     def get(self):             # <<<<<<<<<<<<<<
 *         this = self.next
 *         self.__next()
 */

#line 804 "re2.pyx"
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_3re2_9Tokenizer_5get, 0, __pyx_n_s_Tokenizer_get, NULL, __pyx_n_s_re2, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L1_error)

#line 804 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 804 "re2.pyx"
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_get, __pyx_t_2) < 0) __PYX_ERR(0, 804, __pyx_L1_error)

#line 804 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "re2.pyx":786
 * WHITESPACE = set(" \t\n\r\v\f")
 * 
 * class Tokenizer:             # <<<<<<<<<<<<<<
 *     def __init__(self, string):
 *         self.string = string
 */

#line 786 "re2.pyx"
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_Tokenizer, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 786, __pyx_L1_error)

#line 786 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 786 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tokenizer, __pyx_t_2) < 0) __PYX_ERR(0, 786, __pyx_L1_error)

#line 786 "re2.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 786 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":809
 *         return this
 * 
 * def prepare_pattern(pattern, int flags):             # <<<<<<<<<<<<<<
 *     source = Tokenizer(pattern)
 *     new_pattern = []
 */

#line 809 "re2.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_5prepare_pattern, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 809, __pyx_L1_error)

#line 809 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 809 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_prepare_pattern, __pyx_t_1) < 0) __PYX_ERR(0, 809, __pyx_L1_error)

#line 809 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":908
 * 
 * 
 * def _compile(pattern, int flags=0, int max_mem=8388608):             # <<<<<<<<<<<<<<
 *     """
 *     Compile a regular expression pattern, returning a pattern object.
 */

#line 908 "re2.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_7_compile, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 908, __pyx_L1_error)

#line 908 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 908 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compile, __pyx_t_1) < 0) __PYX_ERR(0, 908, __pyx_L1_error)

#line 908 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1000
 *     return pypattern
 * 
 * def search(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Scan through string looking for a match to the pattern, returning
 */

#line 1000 "re2.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_9search, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1000, __pyx_L1_error)

#line 1000 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1000 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_search, __pyx_t_1) < 0) __PYX_ERR(0, 1000, __pyx_L1_error)

#line 1000 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1007
 *     return compile(pattern, flags).search(string)
 * 
 * def match(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Try to apply the pattern at the start of the string, returning
 */

#line 1007 "re2.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_11match, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1007, __pyx_L1_error)

#line 1007 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1007 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_match, __pyx_t_1) < 0) __PYX_ERR(0, 1007, __pyx_L1_error)

#line 1007 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1014
 *     return compile(pattern, flags).match(string)
 * 
 * def finditer(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return an list of all non-overlapping matches in the
 */

#line 1014 "re2.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_13finditer, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1014, __pyx_L1_error)

#line 1014 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1014 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_finditer, __pyx_t_1) < 0) __PYX_ERR(0, 1014, __pyx_L1_error)

#line 1014 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1023
 *     return compile(pattern, flags).finditer(string)
 * 
 * def findall(pattern, string, int flags=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return an list of all non-overlapping matches in the
 */

#line 1023 "re2.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_15findall, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1023, __pyx_L1_error)

#line 1023 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1023 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_findall, __pyx_t_1) < 0) __PYX_ERR(0, 1023, __pyx_L1_error)

#line 1023 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1032
 *     return compile(pattern, flags).findall(string)
 * 
 * def split(pattern, string, int maxsplit=0):             # <<<<<<<<<<<<<<
 *     """
 *     Split the source string by the occurrences of the pattern,
 */

#line 1032 "re2.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_17split, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1032, __pyx_L1_error)

#line 1032 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1032 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_split, __pyx_t_1) < 0) __PYX_ERR(0, 1032, __pyx_L1_error)

#line 1032 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1039
 *     return compile(pattern).split(string, maxsplit)
 * 
 * def sub(pattern, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return the string obtained by replacing the leftmost
 */

#line 1039 "re2.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_19sub, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1039, __pyx_L1_error)

#line 1039 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1039 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sub, __pyx_t_1) < 0) __PYX_ERR(0, 1039, __pyx_L1_error)

#line 1039 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1050
 *     return compile(pattern).sub(repl, string, count)
 * 
 * def subn(pattern, repl, string, int count=0):             # <<<<<<<<<<<<<<
 *     """
 *     Return a 2-tuple containing (new_string, number).
 */

#line 1050 "re2.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_21subn, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1050, __pyx_L1_error)

#line 1050 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1050 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_subn, __pyx_t_1) < 0) __PYX_ERR(0, 1050, __pyx_L1_error)

#line 1050 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1063
 *     return compile(pattern).subn(repl, string, count)
 * 
 * _alphanum = {}             # <<<<<<<<<<<<<<
 * for c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890':
 *     _alphanum[c] = 1
 */

#line 1063 "re2.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1063, __pyx_L1_error)

#line 1063 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1063 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_alphanum, __pyx_t_1) < 0) __PYX_ERR(0, 1063, __pyx_L1_error)

#line 1063 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1064
 * 
 * _alphanum = {}
 * for c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890':             # <<<<<<<<<<<<<<
 *     _alphanum[c] = 1
 * del c
 */

#line 1064 "re2.pyx"
  __pyx_t_1 = PyObject_GetIter(__pyx_n_s_abcdefghijklmnopqrstuvwxyzABCDEF); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1064, __pyx_L1_error)

#line 1064 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1064 "re2.pyx"
  __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1064, __pyx_L1_error)

#line 1064 "re2.pyx"
  for (;;) {

#line 1064 "re2.pyx"
    {

#line 1064 "re2.pyx"
      __pyx_t_2 = __pyx_t_6(__pyx_t_1);

#line 1064 "re2.pyx"
      if (unlikely(!__pyx_t_2)) {

#line 1064 "re2.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 1064 "re2.pyx"
        if (exc_type) {

#line 1064 "re2.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 1064 "re2.pyx"
          else __PYX_ERR(0, 1064, __pyx_L1_error)

#line 1064 "re2.pyx"
        }

#line 1064 "re2.pyx"
        break;

#line 1064 "re2.pyx"
      }

#line 1064 "re2.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 1064 "re2.pyx"
    }

#line 1064 "re2.pyx"
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_c, __pyx_t_2) < 0) __PYX_ERR(0, 1064, __pyx_L1_error)

#line 1064 "re2.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "re2.pyx":1065
 * _alphanum = {}
 * for c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890':
 *     _alphanum[c] = 1             # <<<<<<<<<<<<<<
 * del c
 * 
 */

#line 1065 "re2.pyx"
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_alphanum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1065, __pyx_L1_error)

#line 1065 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1065 "re2.pyx"
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_c); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1065, __pyx_L1_error)

#line 1065 "re2.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 1065 "re2.pyx"
    if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_t_4, __pyx_int_1) < 0)) __PYX_ERR(0, 1065, __pyx_L1_error)

#line 1065 "re2.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1065 "re2.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "re2.pyx":1064
 * 
 * _alphanum = {}
 * for c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890':             # <<<<<<<<<<<<<<
 *     _alphanum[c] = 1
 * del c
 */

#line 1064 "re2.pyx"
  }

#line 1064 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1066
 * for c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890':
 *     _alphanum[c] = 1
 * del c             # <<<<<<<<<<<<<<
 * 
 * def escape(pattern):
 */

#line 1066 "re2.pyx"
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_c) < 0) __PYX_ERR(0, 1066, __pyx_L1_error)

  /* "re2.pyx":1068
 * del c
 * 
 * def escape(pattern):             # <<<<<<<<<<<<<<
 *     "Escape all non-alphanumeric characters in pattern."
 *     s = list(pattern)
 */

#line 1068 "re2.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3re2_23escape, NULL, __pyx_n_s_re2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1068, __pyx_L1_error)

#line 1068 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1068 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_escape, __pyx_t_1) < 0) __PYX_ERR(0, 1068, __pyx_L1_error)

#line 1068 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "re2.pyx":1
 * # cython: infer_types(False) language='c++'             # <<<<<<<<<<<<<<
 * # Import re flags to be compatible.
 * import sys
 */

#line 1 "re2.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)

#line 1 "re2.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1 "re2.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)

#line 1 "re2.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1 "re2.pyx"


#line 1 "re2.pyx"
  /*--- Wrapped vars code ---*/

#line 1 "re2.pyx"


#line 1 "re2.pyx"
  goto __pyx_L0;

#line 1 "re2.pyx"
  __pyx_L1_error:;

#line 1 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 1 "re2.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 1 "re2.pyx"
  if (__pyx_m) {

#line 1 "re2.pyx"
    if (__pyx_d) {

#line 1 "re2.pyx"
      __Pyx_AddTraceback("init re2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "re2.pyx"
    }

#line 1 "re2.pyx"
    Py_DECREF(__pyx_m); __pyx_m = 0;

#line 1 "re2.pyx"
  } else if (!PyErr_Occurred()) {

#line 1 "re2.pyx"
    PyErr_SetString(PyExc_ImportError, "init re2");

#line 1 "re2.pyx"
  }

#line 1 "re2.pyx"
  __pyx_L0:;

#line 1 "re2.pyx"
  __Pyx_RefNannyFinishContext();

#line 1 "re2.pyx"
  #if PY_MAJOR_VERSION < 3

#line 1 "re2.pyx"
  return;

#line 1 "re2.pyx"
  #else

#line 1 "re2.pyx"
  return __pyx_m;

#line 1 "re2.pyx"
  #endif

#line 1 "re2.pyx"
}

#line 1 "cython_utility"

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseArgTupleInvalid */
  static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
  static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
  static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* SliceTupleAndList */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject** CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyList_New(0);
    dest = PyList_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyListObject*)src)->ob_item + start,
        ((PyListObject*)dest)->ob_item,
        length);
    return dest;
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyTuple_New(0);
    dest = PyTuple_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyTupleObject*)src)->ob_item + start,
        ((PyTupleObject*)dest)->ob_item,
        length);
    return dest;
}
#endif

/* KeywordStringCheck */
  static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetItemInt */
    static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyIntBinop */
      #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* RaiseTooManyValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
      static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
      static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyObjectCallMethod1 */
      static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* append */
      static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* SliceObject */
      static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* PyIntBinop */
      #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* BytesEquals */
      static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
      static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* StringJoin */
      #if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* GetModuleGlobalName */
      static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* GetException */
        #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
          #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* SaveResetException */
          #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
          #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    return PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* UnicodeAsUCS4 */
          static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject* x) {
   Py_ssize_t length;
   #if CYTHON_PEP393_ENABLED
   length = PyUnicode_GET_LENGTH(x);
   if (likely(length == 1)) {
       return PyUnicode_READ_CHAR(x, 0);
   }
   #else
   length = PyUnicode_GET_SIZE(x);
   if (likely(length == 1)) {
       return PyUnicode_AS_UNICODE(x)[0];
   }
   #if Py_UNICODE_SIZE == 2
   else if (PyUnicode_GET_SIZE(x) == 2) {
       Py_UCS4 high_val = PyUnicode_AS_UNICODE(x)[0];
       if (high_val >= 0xD800 && high_val <= 0xDBFF) {
           Py_UCS4 low_val = PyUnicode_AS_UNICODE(x)[1];
           if (low_val >= 0xDC00 && low_val <= 0xDFFF) {
               return 0x10000 + (((high_val & ((1<<10)-1)) << 10) | (low_val & ((1<<10)-1)));
           }
       }
   }
   #endif
   #endif
   PyErr_Format(PyExc_ValueError,
                "only single character unicode strings can be converted to Py_UCS4, "
                "got length %" CYTHON_FORMAT_SSIZE_T "d", length);
   return (Py_UCS4)-1;
}

/* object_ord */
          static long __Pyx__PyObject_Ord(PyObject* c) {
    Py_ssize_t size;
    if (PyBytes_Check(c)) {
        size = PyBytes_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyBytes_AS_STRING(c)[0];
        }
#if PY_MAJOR_VERSION < 3
    } else if (PyUnicode_Check(c)) {
        return (long)__Pyx_PyUnicode_AsPy_UCS4(c);
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    } else if (PyByteArray_Check(c)) {
        size = PyByteArray_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyByteArray_AS_STRING(c)[0];
        }
#endif
    } else {
        PyErr_Format(PyExc_TypeError,
            "ord() expected string of length 1, but %.200s found", c->ob_type->tp_name);
        return (long)(Py_UCS4)-1;
    }
    PyErr_Format(PyExc_TypeError,
        "ord() expected a character, but string of length %zd found", size);
    return (long)(Py_UCS4)-1;
}

/* SetItemInt */
          static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* SetVTable */
            static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* Import */
            static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* CalculateMetaclass */
            static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
            static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* FetchCommonType */
            static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
            static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CodeObjectCache */
                static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
                #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
                #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* Print */
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ptrdiff_t(ptrdiff_t value) {
    const ptrdiff_t neg_one = (ptrdiff_t) -1, const_zero = (ptrdiff_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ptrdiff_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ptrdiff_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ptrdiff_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ptrdiff_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ptrdiff_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ptrdiff_t),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
                static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* PrintOne */
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
                static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
                static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
                static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
